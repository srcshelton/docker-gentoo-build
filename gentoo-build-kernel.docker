#! /usr/bin/env bash

declare trace="${TRACE:-}"
# shellcheck disable=SC2034
declare debug="${DEBUG:-}"

set -eu
set -o pipefail

[ -n "${trace:-}" ] && set -o xtrace

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

# Set by common/vars.sh, sourced below...
#
#declare build_name=''
#declare _command='docker'
#declare use_essential_gcc=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh
# shellcheck disable=SC2034 # Set from common/vars.sh
[[ -n "${__COMMON_VARS_INCLUDED:-}" ]] || {
	echo >&2 "FATAL: Inclusion of common defaults failed"
	exit 1
}

# shellcheck disable=SC2154
declare IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh

declare -ir build_space_reqiured=750
declare -ir temp_space_required=2800
declare -ir graph_space_required=8500

declare package_default='sys-kernel/gentoo-sources'
if grep -q -- 'Model.*Raspberry Pi' /proc/cpuinfo; then
	package_default='sys-kernel/raspberrypi-sources'
fi
readonly package_default

declare rust_ver='1.62.0'
# https://github.com/rust-lang/rust-bindgen/issues/2312
declare bindgen_ver='0.56.0'

declare binutils_min_ver='2.25.0'
declare gcc_min_ver='5.1.0'  #Â 12.0.0 on PA-RISC
declare llvm_min_ver='11.0.0'  # 15.0.0 on S390

declare -i llvm_slot=14
declare llvm_sub_slot='14.0.6'

declare firmware=''
declare microcode=''
declare microcode_blob=''
if grep 'vendor_id' /proc/cpuinfo | awk '{ print $3 }' | grep -iqm 1 'intel'; then
	microcode='sys-firmware/intel-microcode'
	microcode_blob='intel'
elif grep 'vendor_id' /proc/cpuinfo | awk '{ print $3 }' | grep -iqm 1 'amd'; then
	firmware='sys-kernel/linux-firmware'
	case "$( grep -Fm 1 "cpu family" /proc/cpuinfo | cut -d':' -f 2- | awk '{ print $1 }' )" in
		16|17|18|20)
			microcode_blob='amd-ucode/microcode_amd.bin'
			;;
		21)
			microcode_blob='amd-ucode/microcode_amd_fam15h.bin'
			;;
		22)
			microcode_blob='amd-ucode/microcode_amd_fam16h.bin'
			;;
		23)
			microcode_blob='amd-ucode/microcode_amd_fam17h.bin amd/amd_sev_fam17h_model0xh.sbin amd/amd_sev_fam17h_model3xh.sbin'
			;;
		25)
			microcode_blob='amd-ucode/microcode_amd_fam19h.bin amd/amd_sev_fam19h_model0xh.sbin'
			;;
	esac
fi
readonly microcode microcode_blob

pkgslot() {
	local pkg="${1:-}"
	local ver="${2:-}"

	[[ -n "${pkg:-}" ]] || return 1

	if [[ -z "${ver:-}" ]]; then
		printf '%s\n' "${pkg}"
		return 1
	fi

	if [[ "${ver:0:1}" == ':' ]]; then
		printf '%s:%s\n' "${pkg}" "${ver:1}"
	else
		[[ "${ver:0:1}" == '-' ]] || ver="-${ver}"
		printf '>=%s%s\n' "${pkg}" "${ver}"
	fi
}  # pkgslot

_docker_setup

if echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	declare usage='' options=''
	usage="Usage: $( basename "${0}" ) "
	# shellcheck disable=SC2116 # echo used for line-splitting
	options="$( echo \
		"[--config-from=<file> [--force]]|[--config=<defconfig>]" \
		"[--no-keep-build|--keep-build[=<dir>]]" \
		"[--no-patch|--patch=<url>[,<url]]" \
		"[--menuconfig|--nconfig]" \
		"[--package=<atom>] [--no-firmware|--firmware] [--clean]" \
		"[--clang [--clean-lto] [--llvm-unwind] [--rust]] [-O3]" \
		"[--debug] [--force-llvm=<version>]"
	)"
	output "${usage}${options}" | fold -sw ${COLUMNS:-"80"} - | head -n 1 >&2
	output "${options}" | fold -sw $(( ${COLUMNS:-"80"} - ${#usage} )) - | sed "s|^|${usage//?/ }|" | tail -n +2 >&2
	output >&2
	output >&2 "Options:"
	output >&2 "       --config-from <file>     Use specified file as kernel base configuration"
	output >&2 "                               (specify config.gz or /proc/config.gz to"
	output >&2 "                                auto-extract the active kernel configuration)"
	output >&2 "                                N.B. To keep the resultant configuration, use"
	output >&2 "                                     the '--keep-build' option to save the"
	output >&2 "                                     build output"
	output >&2 "       --defconfig <target>     preconfigure with specified 'make' target"
	output >&2 "       --config <target>        configure with specified 'make' target"
	output >&2 "       --keep-build [dir]       Cache the kernel build artefacts for re-use"
	output >&2 "                               (optionally in the specified directory)"
	output >&2 "       --force                  Overwrite build-cache configuration with"
	output >&2 "                                the specified file"
	output >&2 "       --patch <url>            Apply patch (-p1) from specified URL"
	output >&2 "       --menuconfig             Interactively reconfigure the kernel via ncurses"
	output >&2 "       --nconfig                Interactively reconfigure the kernel via nconfig"
	output >&2 "       --package <package>      Specify kernel package to build"
	output >&2 "                               (default: '${package_default}')"
	output >&2 "       --firmware               Include 'sys-kernel/linux-firmware'"
	output >&2 "       -O3                      Add 'KCFLAGS=-O3' (and others - see [1])"
	output >&2 "       --clang                  Compile kernel with llvm"
	output >&2 "       --llvm-unwind            Install LLVM edition of libunwind"
	output >&2 "       --rust                   Pull-in 'rust' dependencies"
	output >&2 "       --force-llvm <version>   Force a specified LLVM version instead of '${llvm_sub_slot}'"
	output >&2
	output >&2 "       --no-install             Don't install build-products to /boot"
	output >&2 "       --clean                  Run 'make clean' before build"
	output >&2 "       --clean-lto              Remove exisitng *.lto.o objects"
	output >&2
	output >&2 "       --debug                  Allocate more memory to build-container"
	output >&2
	output >&2 "Running on architecture '${arch:-"${ARCH:-}"}'"
	output >&2
	output >&2 "[1]: https://github.com/clearlinux-pkgs/linux/blob/main/0133-novector.patch"
	output >&2
	exit 0
fi

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

declare -i build=1
declare -i clean=0
declare -i clean_lto=0
declare -i force=0
declare -i install=1
declare -i opt_o3=0
declare -i rust=0
declare -i raise_mem=0
declare build_dir=''
declare compiler='gcc'
declare config=''
declare defconfig=''
declare menuconfig=''
declare nconfig=''
declare patch=''
declare unwind=''
declare package_override=''
declare rust_llvm_use=''

if [[ -n "${kbuild_opt:-}" ]]; then
	declare arg=''
	for arg in "${@:-}"; do
		shift
		if [[ -n "${arg:-}" ]] && ! [[ " ${*} ${kbuild_opt} " == *" ${arg} "* ]]; then
			set -- ${@+"${@}"} "${arg}"
		else
			print "Skipping duplicate argument '${arg:-}'"
		fi
	done
	unset arg
	set -- "${*:-}" "${kbuild_opt}"
	print "After processing environment variables, arguments are '${*:-}'"
fi
unset kbuild_opt

if echo " ${*:-} " | grep -q -- ' --menuconfig '; then
	menuconfig='menuconfig'  # Just has to be set...
	nconfig=''
fi
if echo " ${*:-} " | grep -q -- ' --nconfig '; then
	menuconfig=''
	nconfig='nconfig'  # Just has to be set...
fi
if echo " ${*:-} " | grep -q -- ' --clean '; then
	clean=1
fi
if echo " ${*:-} " | grep -q -- ' -O3 '; then
	opt_o3=1
fi
if echo " ${*:-} " | grep -q -- ' --no-install '; then
	install=0
fi
if echo " ${*:-} " | grep -q -- ' --debug '; then
	raise_mem=1
fi
if echo " ${*:-} " | grep -Eq -- ' --(clang|llvm) '; then
	compiler='clang'
	if echo " ${*:-} " | grep -Fq -- ' --clean-lto '; then
		clean_lto=1
	fi
	if echo " ${*:-} " | grep -Eq -- ' --(llvm-)?(lib)?unwind '; then
		unwind='llvm'
	fi
	if echo " ${*:-} " | grep -Fq -- ' --rust '; then
		rust=1
	fi
	if echo " ${*:-} " | grep -q -- ' --force-llvm'; then
		if echo " ${*:-} " | grep -q -- ' --force-llvm=[^ ]\+ '; then
			llvm_sub_slot="$( echo " ${*} " | grep -o -- '--force-llvm=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $//' | sort -V | tail -n 1 )"
		elif echo " ${*:-} " | grep -q -- ' --force-llvm [^ -][^ ]* '; then
			llvm_sub_slot="$( echo " ${*} " | grep -o -- '--force-llvm [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $//' | sort -V | tail -n 1 )"
		else
			warn "Invalid LLVM version '$( echo " ${*:-} " | grep -o -- ' --force-llvm[^ ]\+ ' | sed 's/ $//' )'"
		fi

		print "llvm_sub_slot is '${llvm_sub_slot}' from '${*}'"
		(( llvm_slot = $( cut -d'.' -f 1 <<<"${llvm_sub_slot}" ) ))
		rust_llvm_use='-system-llvm'
	fi
else
	if echo " ${*:-} " | grep -Fq -- ' --clean-lto '; then
		warn "'--clean-lto' is not a valid option without '--clang'"
	fi
	if echo " ${*:-} " | grep -Eq -- ' --(llvm-)?(lib)?unwind '; then
		warn "'--llvm-unwind' is not a valid option without '--clang'"
	fi
	if echo " ${*:-} " | grep -Fq -- ' --rust '; then
		warn "'--rust' is not a valid option without '--clang'"
	fi
	if echo " ${*:-} " | grep -Fq -- ' --force-llvm[ =]'; then
		warn "'--force-llvm' is not a valid option without '--clang'"
	fi
fi
if echo " ${*:-} " | grep -Eq -- ' --config(-from)?[= ]'; then
	if echo " ${*:-} " | grep -Eq -- ' --config(-from)?=[^ ]+ '; then
		config="$( echo " ${*} " | grep -Eo -- '--config(-from)?=[^ ]+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -Eq -- ' --config(-from)? [^ -][^ ]* '; then
		config="$( echo " ${*} " | grep -Eo -- '--config(-from)? [^ ]+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	else
		warn "Invalid config option '$( echo " ${*:-} " | grep -Eo -- '--config[^ ]*[= ][^ ]+ ' | sed 's/ $//' )'"
	fi
	if echo " ${*:-} " | grep -q -- ' --force '; then
		force=1
	fi
else
	if echo " ${*:-} " | grep -q -- ' --force '; then
		warn "'--force' is not a valid option without '--config-from'"
	fi
	# Use bash syntax to avoid shellcheck SC2166
	if
		[[ -n "${menuconfig:-}" || -n "${nconfig:-}" ]] &&
			! grep -q -- ' --keep-build ' <<<" ${*:-} "
	then
		warn "Changes made to configuration will not be saved externally"
	fi
fi
if echo " ${*:-} " | grep -Eq -- ' --defconfig[= ]'; then
	if echo " ${*:-} " | grep -Eq -- ' --defconfig=[^ ]+ '; then
		defconfig="$( echo " ${*} " | grep -Eo -- '--defconfig=[^ ]+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -Eq -- ' --defconfig [^ -][^ ]* '; then
		defconfig="$( echo " ${*} " | grep -Eo -- '--defconfig [^ ]+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	else
		warn "Invalid config option '$( echo " ${*:-} " | grep -Eo -- '--defconfig[^ ]*[= ][^ ]+ ' | sed 's/ $//' )'"
	fi
fi
if [[ -n "${config:-}" && -n "${defconfig:-}" ]]; then
	warn "'--defconfig' (${defconfig}) overrides '--config-from' (${config}) - using former value"
fi
if echo " ${*:-} " | grep -q -- ' --keep-build'; then
	if echo " ${*:-} " | grep -q -- ' --keep-build=[^ ]\+ '; then
		build_dir="$( echo " ${*} " | grep -o -- '--keep-build=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -q -- ' --keep-build [^ -][^ ]* '; then
		build_dir="$( echo " ${*} " | grep -o -- '--keep-build [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -q -- ' --keep-build '; then
		:
	else
		warn "Invalid build option '$( echo " ${*:-} " | grep -o -- '--keep-build[^ ]\+ ' | sed 's/ $//' )'"
		build=0
	fi
elif echo " ${*:-} " | grep -q -- ' --no-keep-build'; then
	build=0
fi
if echo " ${*:-} " | grep -q -- ' --package'; then
	if echo " ${*:-} " | grep -q -- ' --package=[^ ]\+ '; then
		package_override="$( echo " ${*} " | grep -o -- '--package=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -q -- ' --package [^ -][^ ]* '; then
		package_override="$( echo " ${*} " | grep -o -- '--package [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	else
		warn "Invalid package option '$( echo " ${*:-} " | grep -o -- ' --package[^ ]\+ ' | sed 's/ $//' )'"
	fi
fi

declare package=''
declare package_version=''
declare container_name=''
declare distro=''
_docker_resolve "${package_override:-"${package_default}"}"
if ! echo "${package}" | grep -Fq -- '/'; then
	error "Resolved package '${package}' with version '${package_version}' lacks a category"
	#note "(... we could always add in 'sys-kernel/' as an assumed prefix?)"
	die "Essential package data not found - aborting"
fi
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
export container_name
case "${package}" in
	*gentoo*)
		distro='-gentoo'
		;;
esac

# Unless noted, the patches below are for the highest supported GCC version...
case "${package_version}" in
	3.[23456789].*|3.1[01234].*)
		# gcc-4.2 patch also available
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/outdated_versions/linux-3.2%2B/gcc-4.9%2B/enable_additional_cpu_optimizations_for_gcc_v4.9%2B.patch' ;;
	3.1[56789].*|4.[0123456789].*|4.1[012].*)
		# gcc-4.2 patch also available
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/outdated_versions/enable_additional_cpu_optimizations_for_gcc_v4.9%2B_kernel_v3.15%2B.patch' ;;
	4.1[345678].*)
		# gcc-4.9 patch also available
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/outdated_versions/enable_additional_cpu_optimizations_for_gcc_v8.1%2B_kernel_v4.13%2B.patch' ;;
	4.19.*|5.[01234].*)
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/more-uarches-for-kernel-4.19-5.4.patch' ;;
	5.[56].*)
		# gcc-9.1 patch also available
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/outdated_versions/enable_additional_cpu_optimizations_for_gcc_v10.1%2B_kernel_v5.5-v5.6.patch' ;;
	5.7.*)
		# gcc-9.1 patch also available
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/outdated_versions/enable_additional_cpu_optimizations_for_gcc_v10.1%2B_kernel_v5.7.patch' ;;
	5.[89].*|5.1[01234].*)
		#if type -pf gcc >/dev/null 2>&1; then
		#	case "$( gcc --version | awk '( NR == 1 ) { print $NF }' )" in
		#		9.*)
		#			patch='https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/more-uarches-for-gcc-v9-and-kernel-5.8%2B.patch' ;;
		#		10.*)
		#			patch='https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/more-uarches-for-gcc-v10-and-kernel-5.8%2B.patch' ;;
		#	esac
		#fi
		#patch='https://github.com/graysky2/kernel_compiler_patch/raw/master/more-uarches-for-kernel-5.8%2B.patch'
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/more-uarches-for-kernel-5.8-5.14.patch'
		case "${package_version}" in
			5.11.*)
				patch="${patch:+"${patch} "}https://lore.kernel.org/linux-btrfs/206d121e2e2b609ffe31217e6d90bfabe1c4e121.1616066404.git.fdmanana@suse.com/raw" ;;
		esac
		;;
	5.15.*|5.16.*)
		#patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/more-uarches-for-kernel-5.15%2B.patch' ;;
		patch='https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/more-uarches-for-kernel-5.15-5.16.patch' ;;
	5.1[789].*|6.[0123456].*)
		patch='https://github.com/graysky2/kernel_compiler_patch/raw/master/more-uarches-for-kernel-5.17%2B.patch'
		case "${package_version}" in
			5.19.*)
				patch="${patch:+"${patch} "}https://lore.kernel.org/all/20220630090100.2769490-1-yi.zhang@huawei.com/raw"
		esac
		;;
	'')
		: ;;
	*)
		if ! echo " ${*:-} " | grep -q -- ' --no-patch'; then
			warn "No known patch for kernel ${package_version} from https://github.com/graysky2/kernel_compiler_patch"
		fi
		;;
esac
case "${package_version}" in
	[12345].*|6.0.*)
		if (( rust )); then
			warn "Disabling dev-lang/rust support prior to kernel 6.1.x"
			rust=0
		fi
		;;
	6.5.*)
		rust_ver='1.68.2'
		;;
	6.6.*)
		rust_ver='1.71.1'
		bindgen_ver='0.65.1'
		;;
esac
case "${arch:-"${ARCH:-}"}" in
	arm64)
		patch="${patch:+"${patch} "}https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/build-with-mcpu-for-cortex-a72.patch"
		;;
esac
if echo " ${*:-} " | grep -q -- ' --patch'; then
	if echo " ${*:-} " | grep -q -- ' --patch=[^ ]\+ '; then
		patch="$( echo " ${*} " | grep -o -- '--patch=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $// ; s/,/ /g' )"
	elif echo " ${*:-} " | grep -q -- ' --patch [^ -][^ ]* '; then
		patch="$( echo " ${*} " | grep -o -- '--patch [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $// ; s/,/ /g' )"
	else
		warn "Invalid patch option '$( echo " ${*:-} " | grep -o -- ' --patch[^ ]\+ ' | sed 's/ $//' )'"
	fi
elif echo " ${*:-} " | grep -q -- ' --no-patch'; then
	patch=''
fi
if echo " ${*:-} " | grep -q -- ' --firmware'; then
	firmware='sys-kernel/linux-firmware'
elif echo " ${*:-} " | grep -q -- ' --no-firmware'; then
	firmware=''
fi

# shellcheck disable=SC2154
$_command image list "${IMAGE%":"*}" | grep -Eq -- "^(localhost/)?${IMAGE%":"*}" || die "docker image '${IMAGE%":"*}' not found"

if mount | grep ' on /boot ' | grep -Eq '(\(ro,|,ro,|,ro\))'; then
	output >&2
	output >&2 '*****'
	output >&2 '*'
	output >&2 '* WARNING: Your /boot partition is mounted read-only'
	output >&2 '*'
	output >&2 '*          Please remount read/write and retry'
	output >&2 '*'
	output >&2 '*****'
	output >&2
	sleep 5
fi

declare build_version=''
build_version="$( echo "${package_version}" | cut -d'.' -f 1-2 )"
if [ -z "${build_dir:-}" ]; then
	# Even if '--keep-build' hasn't been specified, we still set build_dir
	# here, we just won't mount it from the host later...
	#
	declare name="${package_override:-"${package_default}"}"
	name="${name#*"/"}"
	name="${name%"-sources"*}"
	build_dir="/usr/src/linux-${name}-build-${compiler}${unwind:+"-unwind"}-${build_version}.x"
	unset name
fi
unset build_version
if [ "${build:-}" = '1' ]; then
	info >&2 "Using build directory '${build_dir}' ..."
	mkdir -p "${build_dir}" || die "mkdir() on '${build_dir}' failed: ${?}"
fi

if [ -n "${config:-}" ]; then
	if [ "${build:-}" = '1' ] && [ -s "${build_dir}"/.config ] && ! [ "${force:-}" = '1' ]; then
		warn "Not replacing existing '${build_dir}/.config' file without '--force'"
		config="${build_dir}/.config"
	else
		# We've already changed to the script directory, so if there ever were
		# a file in the same location named 'config.gz', it's unlikely to be
		# one we'd actually want to use!
		#
		if [ "${config}" = 'config.gz' ] || [ "${config}" = '/proc/config.gz' ]; then
			note >&2 "Attempting to use current kernel configuration ..."
			if ! lsmod | grep -qw -- '^configs'; then
				warn "Attempting to load 'configs' module..."
				modprobe configs || :
			fi
			if ! [ -r /proc/config.gz ]; then
				die "Cannot read current kernel configuration '/proc/config.gz'"
			fi
			if [ "${build:-}" = '1' ]; then
				config="${build_dir}/.config"
				note >&2 "Extracting /proc/config.gz to '${config}' ..."
				zcat /proc/config.gz > "${config}" || die "zcat failed: ${?}"
			else
				config="${TMPDIR:-"/tmp"}/linux-${package_version%"-r"[0-9]}.config"
				if [ -e "${config}" ]; then
					die "configuration file '${config}' already exists"
				fi
				note >&2 "Extracting /proc/config.gz to '${config}' ..."
				zcat /proc/config.gz > "${config}" || die "zcat failed: ${?}"
			fi
		else
			if [ "${build:-}" = '1' ]; then
				if ! file "${config}" >/dev/null 2>&1; then
					die "configuration file '${config}' is unreadable or missing"
				elif file "${config}" 2>&1 | grep -Fq -- 'gzip compressed data'; then
					die "configuration file '${config}' is compressed"
				else
					cp "${config}" "${build_dir}"/.config || die "file copy from '${config}' to '${build_dir}/.config' failed: ${?}"
					config="${build_dir}/.config"
				fi
			fi
		fi
		note >&2 "Resolving kernel configuration '${config}' ..."
		config="$( readlink -e "${config}" )"
		note >&2 "Kernel configuration resolved to '${config}'"
		if ! [ -s "${config}" ]; then
			die "Cannot read kernel configuration file '${config}'"
		fi
		if ! [ -w "${config}" ]; then
			die "Cannot write to kernel configuration file '${config}'"
		fi
		if ! [ "${build:-}" = '1' ]; then
			#info >&2 "Using '${config}' as kernel configuration - changes WILL BE saved to this file..."
			info >&2 "Using '${config}' as kernel configuration"
		fi
	fi
fi

[ -d log ] || mkdir log

declare openmp='openmp'
declare pre_remove=''
declare pre_pkgs=''
declare pre_use=''
declare -a compiler_pkgs=()
declare compiler_USE="${rust_llvm_use:-}"
declare container_CC='gcc'
declare container_CXX='g++'
declare container_LLVM=''
declare container_KCFLAGS=''
if (( opt_o3 )); then
	declare add_flags='-O3 -mno-avx2 -fno-tree-vectorize'
	if [[ -e /proc/cpuinfo && -r /proc/cpuinfo ]]; then
		if grep -Fq 'sse4_2' /proc/cpuinfo; then
			add_flags+=" -mpopcnt"
		fi
	fi
	container_KCFLAGS="KCFLAGS=\"${add_flags}\""
	unset add_flags
fi
case "${compiler}" in
	gcc)
		compiler_pkgs=(
			"$( pkgslot sys-devel/binutils "${binutils_min_ver:-}" )"
			"$( pkgslot sys-devel/gcc "${gcc_min_ver:-}" )"
		)
		# shellcheck disable=SC2154
		compiler_USE="-lib-only ${use_essential_gcc}"
		;;
	clang|llvm)
		[[ -n "${llvm_slot:-}" ]] || die "'llvm_slot' is required for clang builds"

		# pkgslot() outputs a '>=' specifier if no slot is requested
		#
		# N.B. LLVM package SLOT values are no consistent across versions, so
		#      for example sys-libs/compiler-rt-14.0.6 has slot '14.0.6',
		#      whereas sys-libs/compiler-rt-16.0.6 has slot '16'.
		#
		compiler='clang'
		inconsistent_slot="${llvm_sub_slot}"
		if (( llvm_slot > 15 )); then
			inconsistent_slot="${llvm_slot}"
		fi
		compiler_pkgs=(
			"$( pkgslot sys-devel/binutils "${binutils_min_ver:-}" )"
			"$( pkgslot sys-devel/clang "${llvm_min_ver:-}" )"
			"$( pkgslot sys-devel/llvm "${llvm_min_ver:-}" )"

			sys-devel/binutils-config

			"$( pkgslot sys-devel/clang-common "${llvm_slot}" )" # SLOT=0
			"$( pkgslot sys-devel/llvm-common "${llvm_slot}" )" # SLOT=0
			# As-of 5.10.1: "gold linker 'ld.gold' not supported"...
			#"$( pkgslot sys-devel/llvmgold "${llvm_slot}" )" # SLOT=0
			"$( pkgslot sys-libs/libcxx "${llvm_slot}" )" # SLOT=0
			"$( pkgslot sys-libs/libcxxabi "${llvm_slot}" )" # SLOT=0
			"$( pkgslot sys-libs/llvm-libunwind "${llvm_slot}" )" # SLOT=0

			"$( pkgslot sys-libs/libomp "${llvm_slot}" )" # SLOT=0, 0/16

			"$( pkgslot sys-devel/clang ":${llvm_slot}" )" # SLOT=14, 16/16
			"$( pkgslot sys-devel/llvm ":${llvm_slot}" )" # SLOT=14, 16/16

			"$( pkgslot sys-devel/lld ":${llvm_slot}" )" # SLOT=14/14, 16/16

			"$( pkgslot sys-devel/clang-toolchain-symlinks ":${llvm_slot}" )" # SLOT=14, 16
			"$( pkgslot sys-devel/lld-toolchain-symlinks ":${llvm_slot}" )" # SLOT=14, 16
			"$( pkgslot sys-devel/llvm-toolchain-symlinks ":${llvm_slot}" )" # SLOT=14, 16

			"$( pkgslot sys-devel/clang-runtime ":${inconsistent_slot}" )" # SLOT=14.0.6, 16
			"$( pkgslot sys-libs/compiler-rt ":${inconsistent_slot}" )" # SLOT=14.0.6, 16
			"$( pkgslot sys-libs/compiler-rt-sanitizers ":${inconsistent_slot}" )" # SLOT=14.0.6, 16
		)
		unset inconsistent_slot
		compiler_USE+=' clang default-compiler-rt default-libcxx default-lld' # gold

		# https://github.com/rust-lang/rust-bindgen/issues/2312
		#
		# LLVM/clang 14 works with the kernel bindgen, but requires python3_10,
		# so patching the older bindgen source seems to make more sense...
		#
		case "${bindgen_ver:-}" in
			'0.56.0'*)
				compiler_pkgs+=(
					"<sys-devel/clang-$(( llvm_slot + 1 ))"
					"<sys-devel/clang-common-$(( llvm_slot + 1 ))"
					"<sys-devel/clang-runtime-$(( llvm_slot + 1 ))"
					"<sys-devel/clang-toolchain-symlinks-$(( llvm_slot + 1 ))"
					"<sys-devel/llvm-$(( llvm_slot + 1 ))"
					"<sys-devel/llvm-common-$(( llvm_slot + 1 ))"
					"<sys-devel/llvm-toolchain-symlinks-$(( llvm_slot + 1 ))"
				)
				compiler_USE+='  python_single_target_python3_10  python_targets_python3_10'
				compiler_USE+=' -python_single_target_python3_11 -python_targets_python3_11'
				compiler_USE+=' -python_single_target_python3_12 -python_targets_python3_12'
				;;
		esac

		# sys-libs/llvm-libunwind-14* depends on python3_10
		#
		case "$(( llvm_slot ))" in
			'14')
				compiler_USE+='  python_single_target_python3_10  python_targets_python3_10'
				compiler_USE+=' -python_single_target_python3_11 -python_targets_python3_11'
				compiler_USE+=' -python_single_target_python3_12 -python_targets_python3_12'
				;;
		esac

		container_CC='clang'
		container_CXX='clang++'
		#container_LD='ld.bfd'
		container_LD='ld.lld' # lld required for LTO
		container_LLVM='1'
		#LLVM_TARGETS='-* BPF X86' - moved to ${base_dir}/etc/portage/package.use.build/package.use
		;;
	*)
		die "Unknown compiler '${compiler}'"
		;;
esac
case "${unwind:-}" in
	llvm)
		compiler_pkgs+=(
			sys-libs/llvm-libunwind
		)
		compiler_USE="$( replace_flags 'llvm-libunwind' -- "${compiler_USE:-}" )"
		#pre_remove="sys-libs/libunwind"
		#pre_pkgs="sys-libs/llvm-libunwind"
		;;
esac

# FIXME: shellcheck wants:
#
#          docker_extra_mounts+=( $( add_mount ... ) )
#
#        ... to be expressed in the form of:
#
#          readarray -O "${#docker_extra_mounts[@]}" -t docker_extra_mounts < <(
#            add_mount ...
#          )
#
# shellcheck disable=SC2207
{
# FIXME: Standardise on host or container configuration files
#
declare -a docker_extra_mounts=()
docker_extra_mounts+=( $( add_mount --dir --print \
		'/etc/portage/package.accept_keywords'
	) ) || :
docker_extra_mounts+=( $( add_mount --print \
		'/etc/portage/package.license'
	) ) || :

if ! [ -d /etc/portage/package.mask ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask/package.mask' \
			'/etc/portage/package.mask/host.mask'
		) ) || :
	declare extra_mask='' file=''
	while read -r extra_mask; do
		file="$( basename "${extra_mask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.mask/${file}"
			) ) || :
	done < <( find /etc/portage/package.mask/ -mindepth 1 -maxdepth 1 -type f -not -name 'package.mask' -print0 | grep -vz -- '^repo-.*-mask' )
	unset file extra_mask
fi
if ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask" ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'%base%/etc/portage/package.mask' \
			'.../base.mask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'%base%/etc/portage/package.mask/package.mask' \
			'/etc/portage/package.mask/base.mask'
		) ) || :
fi

if ! [ -d /etc/portage/package.unmask ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask' \
			'.../host.unmask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask/package.unmask' \
			'.../host.unmask'
		) ) || :
	declare extra_unmask='' file=''
	while read -r extra_unmask; do
		file="$( basename "${extra_unmask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.unmask/${file}"
			) ) || :
	done < <( find /etc/portage/package.unmask/ -mindepth 1 -maxdepth 1 -type f -not -name 'package.unmask' -print )
	unset file extra_unmask
fi

docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.mask.kernel-sources' \
		'/etc/portage/package.mask/kernel-sources.mask'
	) ) || :

if ! [ -d /etc/portage/package.use ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.use' \
			'.../package.use'
		) ) || :
else
	# Add a prefix so that host.use can override package.use...
	docker_extra_mounts+=( # <- Syntax
		$( add_mount --print \
				'/etc/portage/package.use/package.use' \
				'/etc/portage/package.use/aa-package.use'
			)
		$( add_mount --print \
				'/etc/portage/package.use/host.use' \
				'/etc/portage/package.use/zz-host.use'
			)
		$( add_mount --print \
				'/etc/portage/package.use/python_targets'
			)
	) || :
fi

docker_extra_mounts+=( $( add_mount --print \
		'/etc/portage/profile/package.use.mask'
	) ) || :

declare rustext=''
if (( rust )); then
	rustext='rustc'
fi
# shellcheck disable=SC2154
if ! [ "$( $_command image list "${container_name%"-${package_version}"}.${compiler}${rustext:+"-${rustext}"}:${package_version}" | wc -l )" = '2' ]; then
	(
		ACCEPT_LICENSE="linux-fw-redistributable no-source-code"
		USE="extra-filters${rustext:+" http2"} lzma${openmp:+" openmp"}${rustext:+" rust-src"} symlink threads zlib${compiler_USE:+" ${compiler_USE}"}"
		if [[ -n "${firmware:-}" ]]; then
			USE="firmware ${USE}"
		else
			USE="-firmware ${USE}"
		fi
		export ACCEPT_LICENSE USE
		if [[ -n "${openmp:-}" ]]; then
			pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}sys-devel/gcc app-crypt/libb2"
			pre_use="$( replace_flags '-lib-only' -- "${pre_use:-}" )"
		fi

		name="${container_name}-${compiler}${rustext:+"-${rustext}"}"
		logname="${container_name}-${compiler}${rustext:+"+${rustext}"}"
		image="${IMAGE}"
		export name image

		# shellcheck disable=SC2206
		declare -a pkgs=( # <- Syntax
			"${compiler_pkgs[@]:-}"
			app-arch/bzip2
			app-arch/cpio
			app-arch/lz4
			app-arch/lzma
			app-arch/xz-utils
			app-arch/zstd
			app-crypt/libb2
			dev-util/pahole
			dev-libs/libyaml
			sys-apps/coreutils
			sys-apps/kmod
			sys-process/time
			${microcode:-}
			${firmware:-}
			${rustext:+"${rust_ver:+"="}virtual/rust${rust_ver:+"-${rust_ver}"}"}
			${rustext:+"${bindgen_ver:+"="}dev-util/bindgen${bindgen_ver:+"-${bindgen_ver}"}"}
			virtual/os-headers
			virtual/linux-sources
		)
		declare -a _docker_run_arguments=( # <- Syntax
			--with-use="${USE}"
			--changed-use
			--update
			--usepkg=y
			$( add_arg pre_remove "--pre-remove=${pre_remove}" )
			$( add_arg pre_pkgs "--pre-pkgs=${pre_pkgs}" )
			$( add_arg pre_use "--pre-use=${pre_use}" )
			$( add_arg openmp "--post-pkgs=sys-devel/gcc" "--post-use=-lib-only" )
		)

		# shellcheck disable=SC2086,SC2154
		time {
			_docker_run \
					"${_docker_run_arguments[@]:-}" \
					"=${package}" \
					"${pkgs[@]:-}" \
				2>&1 | tee "log/docker.${logname}.log"
			output " -> ${?}"
		}

		# It would be nice if we could squash the image layers here to produce
		# a unified image in response to 'commit', but without an additional
		# 'container build' operation (which may be viable, as building a
		# kernel on a pre-existing image requires the definition of many less
		# environment-variables than when invoking 'emerge' to build
		# packages) - but even this way, we end up with the base-layer,
		# ultimate build layer, and above kernel layer - which should result in
		# kernel source images being the only things depending on stale
		# build-images...
		#
		# Update: While 'podman build' can't squash image layers when
		#         committing containers, it appears that 'buildah commit' can!
		#
		time {
			trap '' INT
			if ! command -v buildah >/dev/null 2>&1; then
				# shellcheck disable=SC2046
				$_command $( add_arg IMAGE_ROOT --storage-opt= --root "${IMAGE_ROOT}" ) \
						container commit \
							"${name}" \
							"${container_name%"-${package_version}"}.${compiler}${rustext:+"-${rustext}"}:${package_version}" 2>&1 |
					tee -a "log/docker.${logname}.log"
			else
				# shellcheck disable=SC2046
				buildah $( add_arg IMAGE_ROOT --storage-opt= --root "${IMAGE_ROOT}" ) \
						commit \
								--squash \
							"${name}" \
							"${container_name%"-${package_version}"}.${compiler}${rustext:+"-${rustext}"}:${package_version}" 2>&1 |
					tee -a "log/docker.${logname}.log"
			fi
			output " -> ${?}"
			$_command container rm --volumes "${name}" 2>&1 |
				tee -a "log/docker.${logname}.log"
			trap - INT
		}
	)
fi

docker_extra_mounts+=( # <- Syntax
	$( add_mount --dir --no-ro --print '/lib/modules/' )
	$( add_mount --dir --no-ro --print '/boot' )
) || :
case "${arch:-"${ARCH:-}"}" in
	arm64)
		mkdir -p /boot/overlays
		docker_extra_mounts+=( $( add_mount --dir --no-ro --print \
			'/boot/overlays/' \
			'/boot/dtbs'
		) ) || :
esac
DOCKER_ENTRYPOINT='/bin/sh'
DOCKER_INTERACTIVE=1
deforoldconfig="${defconfig:-"defconfig"}"
if [ "${build:-}" = '1' ]; then
	docker_extra_mounts+=( $( add_mount --dir --no-ro --print \
		"${build_dir}/" \
		'/usr/src/build'
	) ) || :
	if ! [ -d "${build_dir}" ]; then
		warn "Build cache directory '${build_dir}' doesn't exists - creating ..."
		mkdir -p "${build_dir}"
	fi
	if [ -e "${build_dir}"/.config ]; then
		deforoldconfig='oldconfig'
	fi
fi

declare -i rc=0
if [ -s /etc/containers/storage.conf ] && graphroot="$( sed 's/#.*$//' /etc/containers/storage.conf | grep -m 1 -- '^graphroot' | cut -d'"' -f 2 )" && [ -d "${graphroot:-}" ]; then
	if (( $( df -BM --output=avail "${graphroot}" | tail -n +2 | sed 's/M$//' ) < graph_space_required )); then
		warn "Filesystem containing '${graphroot}' has only $( df -h --output=avail "${graphroot}" | tail -n +2 ) space available, need ${graph_space_required}M"
		rc=1
	fi
else
	error "Cannot determine graph root directory from '/etc/containers/storage.conf'" || :
fi
if [ -n "${TMPDIR:-}" ]; then
	if ! [ -d "${TMPDIR}" ]; then
		die "Temporary directory '${TMPDIR}' (from variable 'TMPDIR') doesn't exist"
	fi
	warn "Temporary directory override 'TMPDIR' (${TMPDIR}) set, but container tools may ignore this variable"
	export TMPDIR
fi
if (( $( df -BM --output=avail "${TMPDIR:-"/var/tmp/"}" | tail -n +2 | sed 's/M$//' ) < temp_space_required )); then
	warn "Filesystem containing '${TMPDIR:-"/var/tmp"}' has only $( df -h --output=avail /var/tmp/ | tail -n +2 ) space available, need ${temp_space_required}M"
	rc=1
fi
if (( $( df -BM --output=avail "${build_dir}"/.. | tail -n +2 | sed 's/M$//' ) + $( df -BM --output=used "${build_dir}" | tail -n +2 | sed 's/M$//' ) < build_space_reqiured )); then
	warn "Filesystem containing '${build_dir}' has only $( df -h --output=avail "${build_dir}" | tail -n +2 ) space available, need ${build_space_reqiured}M"
	rc=1
fi
if (( rc )); then
	die "Insufficient space - please free up space and try again"
fi

# Specifying a configuration file takes precedence over having a build
# directory cache...
#
if [ -n "${config:-}" ]; then
	deforoldconfig='oldconfig'
	if [ "${build:-}" != '1' ] || [ "${config}" != "${build_dir}/.config" ]; then
		if [ -w "${config}" ]; then
			# This used to work, but now (due to a podman upgrade?)
			# the kernel build process terminates saying it can't
			# write to the mounted file.
			DOCKER_VOLUMES="--volume ${config}:/usr/src/build/.config"
		else
			die "Cannot write to configuration file '${config}'"
		fi
	fi
fi

kernel_debug=''
#kernel_debug='V=2 W=123'

[ -z "${COLUMNS:-}" ] && warn "'COLUMNS' not set - please export this variable"
[ -z "${LINES:-}" ] && warn "'LINES' not set - please export this variable"

: ${COLUMNS:="80"}
: ${LINES:="24"}

declare -a kernel_make_opts=()
# shellcheck disable=SC2206
kernel_make_opts+=(
	${container_CC:+"CC=${container_CC}"}
	${container_CXX:+"CXX=${container_CXX}"}
	${container_LD:+"LD=${container_LD}"}
	${container_LLVM:+"LLVM=1 LLVM_IAS=1"}
	${container_KCFLAGS:-}
	${kernel_debug:+"${kernel_debug}"}
	O=../build
)
RUST_VERBOSE=''
case "${package_version}" in
	6.[1234].*|6.5.[123])
		RUST_VERBOSE='-v'
		# Unpatched:
		#  /usr/src/linux-6.1.4-gentoo/scripts/rust_is_available_bindgen_libclang.h:2:9: warning: clang version 15.0.6  [-W#pragma-messages]
		# ... gives a result of '6.1.4' rather than '15.0.6' :(
		RUST_PATCH="$( cat <<-'EOF'
			--- scripts/rust_is_available.sh
			+++ scripts/rust_is_available.sh
			@@ -104,7 +104,7 @@
				LC_ALL=C "$BINDGEN" $(dirname $0)/rust_is_available_bindgen_libclang.h 2>&1 >/dev/null \
					| grep -F 'clang version ' \
					| grep -oE '[0-9]+\.[0-9]+\.[0-9]+' \
			-		| head -n 1 \
			+		| tail -n 1 \
			 )
			 bindgen_libclang_min_version=$($min_tool_version llvm)
			 bindgen_libclang_cversion=$(get_canonical_version $bindgen_libclang_version)
		EOF
		)"
		RUST_PATCH_B64="$( echo "${RUST_PATCH}" | base64 -w 0 )"
		;;
esac
DOCKER_SCRIPT="$( cat <<-EOF
	set -eu ;
	[ -e /usr/src/linux ] || {
		echo >&2 "FATAL: '/usr/src/linux' does not exist in container" ;
		exit 1 ;
	} ;
	echo "Detected terminal size: \$( stty size )" ;
	export TERM LINES COLUMNS ;
	echo "Setting terminal to \${COLUMNS}x\${LINES}..." ;
	stty cols "\${COLUMNS}" rows "\${LINES}" ;
	echo "Detected terminal size: \$( stty size )" ;
	if [ -e /bin/awk ] && [ ! -e /usr/bin/awk ]; then
		ln -s ../../bin/awk /usr/bin/ ;
	fi ;
	hostname >/dev/null || exit 1 ;
	if ! grep -Fq -- 'lzma' /var/db/pkg/sys-apps/kmod-*/USE; then
		echo >&2 "FATAL: kmod lacks 'lzma' capability" ;
		exit 1 ;
	elif ! grep -Fq -- 'zlib' /var/db/pkg/sys-apps/kmod-*/USE; then
		echo >&2 "FATAL: kmod lacks 'zlib' capability" ;
		exit 1 ;
	fi ;
	env-update ;
	test -s /etc/profile && . /etc/profile ;
	ldconfig ;
	if portageq has_version / sys-libs/llvm-libunwind; then
		LDFLAGS_MODULE="-unwindlib=libunwind" ;
		HOSTLDFLAGS="-unwindlib=libunwind" ;
		export LDFLAGS_MODULE HOSTLDFLAGS ;
	fi ;
	if [[ "${compiler}" == 'clang' ]]; then
		if echo "\${CFLAGS:-}" | xargs -rn 1 | grep -v -- '^-march=' | grep -q -- '^-m'; then
			echo -n "Filtering GNU CFLAGS for ${compiler}: " ;
			echo "\${CFLAGS}" | xargs -rn 1 | grep -v -- '-march=' | grep -- '^-m' | sort -V | xargs -r -I'{}' -- echo "\'{}\'" | xargs -r ;
			: march="\$( echo "\${CFLAGS}" | xargs -rn 1 | grep '^-march=' )" ;
			march='-march=native' ;
			export CFLAGS="\$( { echo "\${CFLAGS}" | xargs -rn 1 | grep -v -- '^-m' ; echo "\${march}" ; } | sort -V | xargs -r )" ;
			unset march ;
		fi ;
	fi ;
	kernel='bzImage' ;
	dir='x86' ;
	dtb='' ;
	case "${arch:-"${ARCH:-}"}" in
		arm64)
			kernel='Image.gz' ;
			dir='arm64'
			echo "Will build devicetree files for ARM64 platforms ..." ;
			dtb='1' ;
			;;
		arm*)
			kernel='Image.gz' ;
			dir='arm' ;
			echo "Will build devicetree files for ARM platforms ..." ;
			dtb='1' ;
			;;
	esac ;
	${container_CC} --version ;
	set -x ;
	cd /usr/src/linux ;
	make mrproper ;
	set +x ;
	if [ -n "${patch:-}" ]; then
		for p in ${patch}; do
			echo "Processing patch '\${p}' ..." ;
			if wget "\${p}" -qO patch.diff && cat patch.diff | patch -p1 --dry-run --force --quiet; then
				cat patch.diff | patch -p1 ;
			else
				echo >&2 "WARN:  patch '\${p}' failed to download or apply" ;
			fi ;
			rm patch.diff ;
		done ;
	fi ;
	mkdir -p ../build ;
	[ "${clean_lto}" = '1' ] && find ../build/ -name '*.lto.o' -delete ;
	if [ -n "${microcode_blob:-}" ]; then
		echo ;
		echo "Required microcode update files${microcode:+" from '\$( portageq best_version / \"${microcode}\" )'"}:" ;
		echo ;
		if [ "${microcode_blob}" = 'intel' ]; then
			iucode_tool -S -l /lib/firmware/intel-ucode/* ;
		else
			echo "${microcode_blob}" ;
			found=0 ;
			for blob in ${microcode_blob}; do
				if ! [ -e "/lib/firmware/\${blob}" ]; then
					echo >&2 "ERROR: microcode firmware blob '\${blob}' not found" ;
					found=1 ;
				fi ;
			done ;
			if [ \$(( found )) -ne 0 ]; then
				echo >&2 "FATAL: missing firmware" ;
				exit 1 ;
			fi ;
		fi ;
		echo ;
		[ -f ../build/.config ] && [ -s ../build/.config ] && grep -Fm 1 'CONFIG_EXTRA_FIRMWARE' ../build/.config 2>/dev/null && echo ;
	fi ;
	if [ $(( clean )) -ne 0 ]; then
		make ${kernel_make_opts[@]} clean ;
	fi ;
	if [ $(( rust )) -ne 0 ]; then
		clang --version ;
		echo ;
		rustc --version ;
		echo ;
		export RUST_BACKTRACE=1
		[ -n "${RUST_PATCH_B64:-}" ] &&
			echo "${RUST_PATCH_B64:-}" | base64 -d | patch -p0 ;
		[ -n "${RUST_VERBOSE:-}" ] &&
			sed -ri Makefile -e '/scripts\/rust_is_available.sh/s|(scripts/rust_is_available.sh)|\\1 ${RUST_VERBOSE}|' ;
		make --debug=print ${kernel_make_opts[@]} rustavailable || {
			echo >&2 "ERROR: rust_is_available.sh returns \${?}" ;
			exit 1 ;
		} ;
	fi ;
	if [ -e .config ]; then
		echo "Configuration changes from '.config':" ;
		make ${kernel_make_opts[@]} listnewconfig 2>/dev/null | grep '^CONFIG' || echo '<none>' ;
	fi
	success=0 ;
	set -x ;
	time make ${kernel_make_opts[@]} ${deforoldconfig} prepare ${menuconfig:+"menuconfig"} ${nconfig:+"nconfig"} vmlinux modules \${dtb:+"dtbs"} \${kernel} &&
		rm -rf "/lib/modules/${package_version}${distro:-}" &&
			make ${kernel_make_opts[@]} INSTALL_MOD_STRIP=1 modules_install &&
				success=1 ;
	sh scripts/extract-vmlinux ../build/arch/\${dir}/boot/\${kernel} > vmlinux &&
		[ -f vmlinux ] &&
			mv vmlinux ../build/ ;
	if [ "${install}" = '1' ]; then
		set +x ;
		if [ -s /boot/boot.config -o -s /proc/bootconfig ] && [ -e /boot/initramfs.img ]; then
			if make ${kernel_make_opts[@]} -C tools/bootconfig; then
				make ${kernel_make_opts[@]} bindir='/usr/local/sbin' -C tools/bootconfig install ;
				if [ -s /boot/boot.config ]; then
					bootconfig -a /boot/boot.config /boot/initramfs.img ;
				else
					bootconfig -a /proc/bootconfig /boot/initramfs.img ;
				fi ;
			else
				echo >&2 "WARN:  'make -C tools/bootconfig' failed: \${?}" ;
			fi ;
		fi ;
		if [ "\${dtb}" = '1' ]; then
			make ${kernel_make_opts[@]} dtbs_install ;
		fi ;
		if [ "\${success}" = '1' ]; then
			set -x ;
			cp ../build/.config /boot/config-${package_version}${distro:-} ;
			cp ../build/System.map /boot/System.map-${package_version}${distro:-} ;
			cp ../build/arch/\${dir}/boot/\${kernel} /boot/kernel-${package_version}${distro:-} ;
			cp ../build/vmlinux /lib/modules/${package_version}${distro:-}/vmlinux-${package_version}${distro:-} ;
			set +x ;
			echo 'Linux kernel-${package_version}${distro:-} successfully installed - please update your bootloader' ;
		fi ;
	elif [ "\${success}" = '1' ]; then
		echo "Linux kernel-${package_version}${distro:-} successfully built (but not installed due to '--no-install' argument)" ;
	fi ;
EOF
)"
	#echo "Detected packages:"
	#ls -1d /var/db/pkg/*/* | cut -d '/' -f 5-
	#[ -e /etc/python-exec/emerge.conf ] && rm /etc/python-exec/emerge.conf ;
	#KBUILD_OUTPUT="/usr/src/build" CC="${container_CC}" CXX="${container_CXX}" LD="${container_LD}" emerge --with-bdeps=n --buildpkg=y -kv '>=net-firewall/xtables-addons-3.18' ;

nl="$( printf '\n' )"
DOCKER_SCRIPT="$( echo "${DOCKER_SCRIPT}" | tr "${nl}" ' ' )"
unset nl

export DOCKER_ENTRYPOINT DOCKER_INTERACTIVE DOCKER_VOLUMES DOCKER_SCRIPT
export DOCKER_EXTRA_MOUNTS="${docker_extra_mounts[*]:-}"
unset docker_extra_mounts
}


if (( raise_mem )); then
	# DEBUG-enabled 'LD vmlinux.o' step fails with OOM with 2G
	# reservation :(
	#
	export PODMAN_MEMORY_RESERVATION='8g'
	export PODMAN_MEMORY_LIMIT='12g'
	export PODMAN_SWAP_LIMIT="${PODMAN_MEMORY_LIMIT}"
#else
#	export PODMAN_MEMORY_RESERVATION='2g'
#	export PODMAN_MEMORY_LIMIT='8g'
#	export PODMAN_SWAP_LIMIT="${PODMAN_MEMORY_LIMIT}"
fi

time {
	#set -x
	#DOCKER_DEVICES="--device=/dev/tty --device=/dev/tty0" \
	TERM="${TERM:-}" \
	DOCKER_HOSTNAME="$( hostname )-build" \
	image="${container_name%"-${package_version}"}.${compiler}${rustext:+"-${rustext}"}:${package_version}" \
	_docker_run \
			-c "${DOCKER_SCRIPT}" \
		2>&1 | tee -a "log/docker.${container_name}-${compiler}${rustext:+"+${rustext}"}.log"
	rc=${?}
	#set +x
	output " -> ${rc}"
}

if [[ -d /boot/dtbs ]] && [[ "$( find /boot/dtbs -maxdepth 0 -empty )" == '/boot/dtbs' ]]; then
	rmdir /boot/dtbs
fi

#set +o xtrace

exit ${rc}

# vi: set nowrap:
