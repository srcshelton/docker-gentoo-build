#! /usr/bin/env bash

set -u
set -o pipefail

#set -o xtrace

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

declare build_name=''
declare docker='docker'
declare docker_readonly='ro=true'

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

declare IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh

if echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	echo >&2 "Usage: $( basename "${0}" ) [--config-from=<file> [--force]] [--no-keep-build|--keep-build[=<dir>]] [--no-patch|--patch=<url>[,<url]] [--menuconfig|--nconfig] [--package=<atom>] [--clang]"
	echo >&2
	echo >&2 "Options:"
	echo >&2 "        --config-from Use specified file as kernel base configuration"
	echo >&2 "                      (specify config.gz or /proc/config.gz to auto-extract the"
	echo >&2 "                       active kernel configuration)"
	echo >&2 "                      N.B. To save the resultant configuration, use the"
	echo >&2 "                           '--keep-build' option to save the build output"
	echo >&2 "        --force       Overwrite build-cache configuration with specified file"
	echo >&2 "        --keep-build  Cache the kernel build artefacts for re-use"
	echo >&2 "                      (optionally in the specified directory)"
	echo >&2 "        --menuconfig  Interactively reconfigure the kernel via ncurses"
	echo >&2 "        --nconfig     Interactively reconfigure the kernel via nconfig"
	echo >&2 "        --package     Specify kernel package to build"
	echo >&2 "                      (default: sys-kernel/gentoo-sources)"
	echo >&2 "        --clang       Compile kernel with llvm"
	echo >&2 "        --patch <url> Apply patch (-p1) from specified URL"
	echo >&2
	exit 0
fi
declare build=1
declare build_dir=''
declare compiler='gcc'
declare config=''
declare force=0
declare menuconfig=''
declare nconfig=''
declare version=''
declare patch='https://raw.githubusercontent.com/graysky2/kernel_gcc_patch/master/enable_additional_cpu_optimizations_for_gcc_v9.1%2B_kernel_v5.8%2B.patch'
if echo " ${*:-} " | grep -q -- ' --menuconfig '; then
	menuconfig=1
fi
if echo " ${*:-} " | grep -q -- ' --nconfig '; then
	menuconfig=0
	nconfig=1
fi
if echo " ${*:-} " | grep -Eq -- ' --(clang|llvm) '; then
	compiler='clang'
fi
if echo " ${*:-} " | grep -Eq -- ' --config(-from)?[= ]'; then
	if echo " ${*:-} " | grep -Eq -- ' --config(-from)?=[^ ]+ '; then
		config="$( echo " ${*} " | grep -Eo -- '--config(-from)?=[^ ]+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -Eq -- ' --config(-from)? [^ -][^ ]* '; then
		config="$( echo " ${*} " | grep -Eo -- '--config(-from)? [^ ]+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	else
		echo "WARN:  Invalid config option '$( echo " ${*:-} " | grep -Eo -- '--config[^ ]*[= ][^ ]+ ' | sed 's/ $//' )'"
	fi
	if echo " ${*:-} " | grep -q -- ' --force '; then
		force=1
	fi
else
	if echo " ${*:-} " | grep -q -- ' --force '; then
		echo >&2 "WARN:  '--force' is not a valid option without '--config-from'"
	fi
	if [ "${menuconfig}" = '1' -o "${nconfig}" = '1' ] && ! echo " ${*:-} " | grep -q -- ' --keep-build'; then
		echo >&2 "WARN:  Changes made to configuration will not be saved externally"
	fi
fi
if echo " ${*:-} " | grep -q -- ' --keep-build'; then
	if echo " ${*:-} " | grep -q -- ' --keep-build=[^ ]\+ '; then
		build_dir="$( echo " ${*} " | grep -o -- '--keep-build=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
		build=1
	elif echo " ${*:-} " | grep -q -- ' --keep-build [^ -][^ ]* '; then
		build_dir="$( echo " ${*} " | grep -o -- '--keep-build [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
		build=1
	elif echo " ${*:-} " | grep -q -- ' --keep-build '; then
		build=1
	else
		echo "WARN:  Invalid build option '$( echo " ${*:-} " | grep -o -- '--keep-build[^ ]\+ ' | sed 's/ $//' )'"
	fi
elif echo " ${*:-} " | grep -q -- ' --no-keep-build'; then
	build_dir=''
	build=0
fi
if echo " ${*:-} " | grep -q -- ' --package'; then
	if echo " ${*:-} " | grep -q -- ' --package=[^ ]\+ '; then
		version="$( echo " ${*} " | grep -o -- '--package=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $//' )"
	elif echo " ${*:-} " | grep -q -- ' --package [^ -][^ ]* '; then
		version="$( echo " ${*} " | grep -o -- '--package [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $//' )"
	else
		echo "WARN:  Invalid package option '$( echo " ${*:-} " | grep -o -- ' --package[^ ]\+ ' | sed 's/ $//' )'"
	fi
fi
if echo " ${*:-} " | grep -q -- ' --patch'; then
	if echo " ${*:-} " | grep -q -- ' --patch=[^ ]\+ '; then
		patch="$( echo " ${*} " | grep -o -- '--patch=[^ ]\+ ' | cut -d'=' -f 2- | sed 's/ $// ; s/,/ /g' )"
	elif echo " ${*:-} " | grep -q -- ' --patch [^ -][^ ]* '; then
		patch="$( echo " ${*} " | grep -o -- '--patch [^ ]\+ ' | cut -d' ' -f 2- | sed 's/ $// ; s/,/ /g' )"
	else
		echo "WARN:  Invalid patch option '$( echo " ${*:-} " | grep -o -- ' --patch[^ ]\+ ' | sed 's/ $//' )'"
	fi
elif echo " ${*:-} " | grep -q -- ' --no-patch'; then
	patch=''
fi

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

$docker image ls "${IMAGE%:*}" | grep -Eq -- "^(localhost/)?${IMAGE%:*}" || die "docker image '${IMAGE%:*}' not found"

if mount | grep ' on /boot ' | grep -Eq '(\(ro,|,ro,|,ro\))'; then
	echo >&2
	echo >&2 '*****'
	echo >&2 '*'
	echo >&2 '* WARNING: Your /boot partition is mounted read-only'
	echo >&2 '*'
	echo >&2 '*          Please remount read/write and retry'
	echo >&2 '*'
	echo >&2 '*****'
	echo >&2
	sleep 5
fi

set -e

docker_setup

package=''
package_version=''
container_name=''
docker_resolve "${version:-sys-kernel/gentoo-sources}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
export container_name

build_version="$( echo "${package_version:-}" | cut -d'.' -f 1-2 )"
if [ -z "${build_dir:-}" ]; then
	build_dir="/usr/src/build-${build_version}.x"
fi
if [ "${build:-}" = '1' ]; then
	echo >&2 "INFO:  Using build directory '${build_dir}' ..."
	mkdir -p "${build_dir}" || die "mkdir() on '${build_dir}' failed: ${?}"
fi

if [ -n "${config:-}" ]; then
	if [ "${build:-}" = '1' ]; then
		if [ -e "${build_dir}"/.config ]; then
			if ! [ "${force:-}" = '1' ]; then
				die "'${build_dir}/.config' already exists"
			fi
		fi
	fi
	if [ "${config}" = 'config.gz' ] || [ "${config}" = '/proc/config.gz' ]; then
		if ! [ -r /proc/config.gz ]; then
			die "Cannot read '/proc/config.gz' - do you need to 'sudo modprobe configs'?"
		fi
		if [ "${build:-}" = '1' ]; then
			zcat /proc/config.gz > "${build_dir}"/.config || die "zcat failed: ${?}"
			config="${build_dir}/.config"
		else
			if [ -e "${TMPDIR:-/tmp}/config" ]; then
				die "'${TMPDIR:-/tmp}/config' already exists"
			fi
			echo >&2 "NOTE:  Extracting /proc/config.gz to '${TMPDIR:-/tmp}' ..."
			zcat /proc/config.gz > "${TMPDIR:-/tmp}/config"
			config="${TMPDIR:-/tmp}/config"
		fi
	else
		if [ "${build:-}" = '1' ]; then
			cp "${config}" "${build_dir}"/.config || die "File copy failed: ${?}"
			config="${build_dir}/.config"
		fi
	fi
	config="$( readlink -e "${config}" )"
	if ! [ -s "${config}" ]; then
		die "Cannot read kernel configuration file '${config}'"
	fi
	if ! [ -w "${config}" ]; then
		die "Cannot write to kernel configuration file '${config}'"
	fi
	if ! [ "${build:-}" = '1' ]; then
		#echo >&2 "INFO:  Using '${config}' as kernel configuration - changes WILL BE saved to this file..."
		echo >&2 "INFO:  Using '${config}' as kernel configuration"
	fi
fi

[ -d log ] || mkdir log

compiler_pkgs=''
compiler_USE=''
container_CC='gcc'
container_CXX='g++'
container_LLVM=''
case "${compiler}" in
	gcc)
		compiler_pkgs='sys-devel/gcc'
		;;
	clang|llvm)
		# As-of 5.10.1: "gold linker 'ld.gold' not supported"...
		compiler='clang'
		compiler_pkgs='sys-devel/binutils-config sys-devel/clang sys-devel/llvm sys-libs/libcxx sys-libs/libcxxabi sys-libs/compiler-rt sys-libs/llvm-libunwind sys-devel/lld' # sys-devel/llvmgold
		compiler_USE='clang default-compiler-rt default-libcxx default-lld' # gold
		container_CC='clang'
		container_CXX='clang++'
		container_LD='ld.bfd'
		container_LLVM='1'
		#LLVM_TARGETS='-* BPF X86' - moved to gentoo-base/etc/portage/package.use.build/package.use
		;;
	*)
		die "Unknown compiler '${compiler}'"
		;;
esac

if ! [ "$( $docker image ls "${container_name%-${package_version}}.${compiler}:${package_version}" | wc -l )" = '2' ]; then
	(
		DOCKER_EXTRA_MOUNTS=''
		test -e /etc/portage/package.accept_keywords &&
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=/etc/portage/package.accept_keywords,destination=/etc/portage/package.accept_keywords${docker_readonly:+,${docker_readonly}}"
		test -e /etc/portage/package.license &&
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=/etc/portage/package.license,destination=/etc/portage/package.license${docker_readonly:+,${docker_readonly}}"
		test -e /etc/portage/package.use/package.use &&
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=/etc/portage/package.use/package.use,destination=/etc/portage/package.use/package.use${docker_readonly:+,${docker_readonly}}"
		test -e /etc/portage/package.use/python_targets &&
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+${DOCKER_EXTRA_MOUNTS} }--mount type=bind,source=/etc/portage/package.use/python_targets,destination=/etc/portage/package.use/python_targets${docker_readonly:+,${docker_readonly}}"
		[ -n "${DOCKER_EXTRA_MOUNTS:-}" ] && export DOCKER_EXTRA_MOUNTS

		ACCEPT_LICENSE="linux-fw-redistributable no-source-code"
		USE="-lib-only extra-filters hostname lzma symlink threads zlib${compiler_USE:+ ${compiler_USE}}"
		export ACCEPT_LICENSE USE

		name="${container_name}-${compiler}"
		image="${IMAGE}"
		export name image

		# shellcheck disable=SC2086
		docker_run \
					--changed-use \
					--update \
					--usepkg=y \
				"=${package}" \
				${compiler_pkgs:-} \
				app-arch/bzip2 \
				app-arch/cpio \
				app-arch/lz4 \
				app-arch/lzma \
				app-arch/xz-utils \
				app-arch/zstd \
				dev-libs/libyaml \
				sys-apps/coreutils \
				sys-apps/kmod \
				sys-firmware/intel-microcode \
				sys-kernel/linux-firmware \
			2>&1 | tee log/"docker.${container_name}-${compiler}.log"
		echo " -> ${?}"

		trap '' INT
		$docker commit "${container_name}-${compiler}" "${container_name%-${package_version}}.${compiler}:${package_version}" 2>&1 | tee -a log/"docker.${container_name}.log"
		$docker rm --volumes "${container_name}-${compiler}" 2>&1 | tee -a log/"docker.${container_name}-${compiler}.log"
		echo " -> ${?}"
		trap - INT
	)
fi

DOCKER_EXTRA_MOUNTS=''
DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS} --mount type=bind,source=/lib/modules/,destination=/lib/modules"
DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS} --mount type=bind,source=/boot/,destination=/boot"
DOCKER_ENTRYPOINT='/bin/sh'
DOCKER_INTERACTIVE=1
deforoldconfig='defconfig'
if [ "${build:-}" = '1' ]; then
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS} --mount type=bind,source=${build_dir},destination=/usr/src/build"
	if ! [ -d "${build_dir}" ]; then
		warn "Build cache directory '${build_dir}' doesn't exists - creating ..."
		mkdir -p "${build_dir}"
	fi
	if [ -e "${build_dir}"/.config ]; then
		deforoldconfig='oldconfig'
	fi
fi

# Specifying a configuration file takes precedence over having a build
# directory cache...
#
if [ -n "${config:-}" ]; then
	deforoldconfig='oldconfig'
	if [ "${build:-}" != '1' ] || [ "${config}" != "${build_dir}/.config" ]; then
		if [ -w "${config}" ]; then
			# This used to work, but now (due to a podman upgrade?)
			# the kernel build process terminates saying it can't
			# write to the mounted file.
			DOCKER_VOLUMES="--volume ${config}:/usr/src/build/.config"
		else
			die "Cannot write to configuration file '${config}'"
		fi
	fi
fi

kernel_debug=''
#kernel_debug='V=2 W=123'

[ -z "${COLUMNS:-}" ] && warn "'COLUMNS' not set - please export this variable"
[ -z "${LINES:-}" ] && warn "'LINES' not set - please export this variable"

: ${COLUMNS:=80}
: ${LINES:=24}

declare -a kernel_make_opts=()
kernel_make_opts+=(
	${container_CC:+CC=${container_CC}}
	${container_CXX:+CXX=${container_CXX}}
	${container_LD:+LD=${container_LD}}
	${container_LLVM:+LLVM=1}
	${kernel_debug:+${kernel_debug}}
	O=../build
)
DOCKER_SCRIPT="$( cat <<-EOF
	set -eu ;
	[ -e /usr/src/linux ] || { 
		echo >&2 "FATAL: '/usr/src/linux' does not exist in container" ;
		exit 1 ;
	} ;
	echo "Detected terminal size: \$( stty size )" ;
	export TERM LINES COLUMNS ;
	echo "Setting terminal to \${COLUMNS}x\${LINES}..." ;
	stty cols "\${COLUMNS}" rows "\${LINES}" ;
	echo "Detected terminal size: \$( stty size )" ;
	if [ -e /bin/awk ] && [ ! -e /usr/bin/awk ]; then
		ln -s ../../bin/awk /usr/bin/ ;
	fi ;
	hostname >/dev/null || exit 1 ;
        if ! grep -Fq -- 'lzma' /var/db/pkg/sys-apps/kmod-*/USE; then
		echo >&2 "FATAL: kmod lacks 'lzma' capability" ;
		exit 1 ;
	elif ! grep -Fq -- 'zlib' /var/db/pkg/sys-apps/kmod-*/USE; then
		echo >&2 "FATAL: kmod lacks 'zlib' capability" ;
		exit 1 ;
	fi ;
	env-update ;
	test -s /etc/profile && . /etc/profile ;
	${container_CC} --version ;
	set -x ;
	cd /usr/src/linux ;
	make mrproper ;
	if [ -n "${patch}" ]; then
		for p in ${patch}; do
			wget "\${p}" -O patch.diff && cat patch.diff | patch -p1 && rm patch.diff ;
		done ;
	fi ;
	mkdir -p ../build ;
	time make ${kernel_make_opts[@]} ${deforoldconfig} prepare ${menuconfig:+menuconfig} ${nconfig:+nconfig} vmlinux modules bzImage modules_install ;
	make ${kernel_make_opts[@]} -C tools/bootconfig ;
	cp ../build/.config /boot/config-${package_version}-gentoo ;
	cp ../build/System.map /boot/System.map-${package_version}-gentoo ;
	cp ../build/arch/x86/boot/bzImage /boot/kernel-${package_version}-gentoo ;
	set +x ;
	echo 'Linux kernel-${package_version}-gentoo installed - please update your bootloader' ;
EOF
)"
	#echo "Detected packages:"
	#ls -1d /var/db/pkg/*/* | cut -d '/' -f 5-

nl="$( printf '\n' )"
DOCKER_SCRIPT="$( echo "${DOCKER_SCRIPT}" | tr "${nl}" ' ' )"
unset nl

export DOCKER_ENTRYPOINT DOCKER_INTERACTIVE DOCKER_EXTRA_MOUNTS DOCKER_VOLUMES DOCKER_SCRIPT

#set -x
#DOCKER_DEVICES="--device=/dev/tty --device=/dev/tty0" \
TERM="${TERM:-}" \
DOCKER_HOSTNAME="$( hostname )-build" \
image="${container_name%-${package_version}}.${compiler}:${package_version}" \
	docker_run \
			-c "${DOCKER_SCRIPT}" \
		2>&1 | tee -a log/"docker.${container_name}-${compiler}.log"
rc=${?}
#set +x
echo " -> ${rc}"

exit ${rc}
