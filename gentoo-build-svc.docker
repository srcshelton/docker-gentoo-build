#! /usr/bin/env bash

set -eu
set -o pipefail

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

declare build_name=''
declare base_dir=''
#declare use_essential=''
declare use_essential_gcc=''
declare python_default_target=''
declare docker='docker'
declare docker_readonly=''
declare environment_file=''
declare environment_filter=''

declare red=''
declare blue=''
declare reset=''

# Redefined by common/local.sh, sourced by common/vars.sh
declare mail_domain='localhost'
declare mail_mta='localhost'
# shellcheck disable=SC1091
[[ ! -s common/vars.sh ]] || . common/vars.sh

declare -a services=() args=()
services=(
	bitlbee
	captive-portal
	dcc
	dhcpd
	distccd
	dovecot
	fetchmail
	fwupd
	imapproxyd
	irqbalance
	less
	lighttpd
	lynis
	man
	mariadb
	memcached
	metalog
	named
	opendkim
	opendmarc
	openntpd
	php
	php73
	php74
	php80
	php81
	pinfo
	postfix
	postgrey
	pound
	powertop
	privoxy
	redis
	spamassassin
	spamassassin-update
	spampd
	subversion
	syslog-ng
	unifi
	unifi60
	unifi61
	unifi62
	unifi64
	unifi65
	unifi70
	unifi71
	unifi72
	unifi73
	vim
	watchdog
	xmrig
	zxtm
)
declare -i installed=0
declare -i tools=0
declare -i all=0
declare -i rebuildpkgs=0
declare force=''
declare build_debug=''
declare alt_log=''
declare arg=''

# Temporarily throw away all other arguments to try to get a set of parameters
# we can use to perform a manual service build (... which is largely deprecated
# at this point)
#
args=( ${@+"${@}"} )
set --
for arg in "${args[@]:-}"; do
	case "${arg}" in
		-*)
			continue
			;;
		tools|installed|all)
			# ... we have a problem :o
			# (Why, tho? What's special about 'less' which causes it not to be
			#  automatically included?)
			set -- ${@+"${@}"} 'sys-apps/less'
			;;
		*)
			set -- ${@+"${@}"} "${arg}"
			;;
	esac
done
declare service="${1:-}"
declare original_service="${service:-}"
declare ports="${2:-0}"
declare user="${3:-"root"}"
declare group="${4:-"root"}"
declare container_cmd="${5:-}"
declare container_cwd="${6:-"/"}" # Optional
declare fs_name="${7:-}" # Optional: If set create /var/{run,log}/${fs_name} in container
#
# Restore our original arguments again
#
set -- "${args[@]:-}"

declare zxtm_service_version=''
declare -i rc=0

declare IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[[ -s common/run.sh ]] && . common/run.sh >/dev/null

if [ -z "${*:-}" ] || echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	output >&2 "Usage: $( basename "${0}" ) <service [<ports> <user> <group> <command> [directory [fs_name]]]|--services <service> [service...]> [--rebuild] [--force] [--force-keywords] [--debug]"
	output >&2
	output >&2 "Known services:"
	s=''
	for s in "${services[@]}"; do
		output >&2 "  ${s}"
	done
	unset s
	output >&2
	output >&2 "  tools"
	output >&2 "  installed"
	output >&2 "  all"
	output >&2
	if [ -z "${*:-}" ]; then
		exit 1
	else
		exit 0
	fi
fi

# Support 'core' user for podman+machine Fedora default user...
if [[ "$( uname -s )" == 'Darwin' ]]; then
	if (( EUID )) && [[ "$( id -nu )" == 'core' ]]; then
		die "Please re-run '$( basename "${0}" )' as user 'root'"
	fi
fi

declare arg=''
declare service_list=''
for arg in "${@}"; do
	shift
	case "${arg}" in
		-a|--all|all)
			service=''
			all=1
			;;
		-d|--debug)
			build_debug=1
			;;
		-f|--force)
			force=1
			;;
		-i|--installed|installed)
			service=''
			installed=1
			;;
		-k|--force-keywords)
			FORCE_KEYWORDS=1
			export FORCE_KEYWORDS
			;;
		-r|--rebuild)
			rebuildpkgs=1
			;;
		-s|--services)
			service_list=1
			;;
		-t|--tools|tools)
			tools=1
			;;
		*)
			set -- "${@}" "${arg}"
			;;
	esac
done


# BEGIN WRAPPER CODE
#
# All we're doing here is figuring out the arguments to re-invoke ourselves with!
#

if [ $(( all )) -eq 1 ] && [ $(( installed )) -eq 1 ]; then
	warn "options 'all' and 'installed' are mutually exclusive - using 'all'"
	installed=0
fi

if [ -n "${installed:-}" ] && [ $(( installed )) -eq 1 ]; then
	service_list=1

	# shellcheck disable=SC2046  # We want word-splitting here...
	set -- "${@}" $( xargs -n 1 echo <<<"$( # <- Syntax highlight fail
		# Build list based on installed packages... (useful if the local image
		# cache has been cleared!)
		#
		find /var/db/pkg/container/ -mindepth 2 -maxdepth 2 -type f -name CONTENTS -print |
			awk -F '/' 'NF-1 { print $(NF-1) }' |
			sed \
				-e 's/^php-\([0-9]\).\([0-9]\)\(.*\)$/php\1\2-\1.\2\3/g' \
				-e 's/^unifi\(-controller\(-bin\)\?\)\?-\([0-9]\).\([0-9]\)\(.*\)$/unifi\3\4-\3.\4\5/g' |
			sed -r 's/-[0-9][0-9.]*(_p[0-9]+)?(-r[0-9]+)?//'

		# Build list based on present images...
		#
		$docker image list --noheading --sort repository --format '{{.Repository}}-{{.Tag}}' 'localhost/service.' |
			grep -vx -- 'localhost/service.www-servers.web-content-latest' |
			cut -d'.' -f 3- |
			sed \
				-e 's/^php-\([0-9]\).\([0-9]\)\(.*\)$/php\1\2-\1.\2\3/g' \
				-e 's/^unifi\(-controller\(-bin\)\?\)\?-\([0-9]\).\([0-9]\)\(.*\)$/unifi\3\4-\3.\4\5/g' |
			sed -r 's/-[0-9][0-9.]*(_p[0-9]+)?(-r[0-9]+)?//'
	)" | sort | uniq )
fi

if [ -n "${tools:-}" ] && [ $(( tools )) -eq 1 ]; then
	service_list=1
	#set -- "${@}" 'fwupd' 'less' 'lynis' 'man' 'pinfo' 'powertop' 'vim'
	set -- "${@}" 'less' 'lynis' 'man' 'pinfo' 'powertop' 'vim'
fi

for arg in "${@}"; do
	shift
	case "${arg}" in
		# In some cases, the package name and service name differ :(
		bind)
			set -- "${@}" 'named'
			;;
		dhcp)
			set -- "${@}" 'dhcpd'
			;;
		distcc)
			set -- "${@}" 'distccd'
			;;
		imapproxy)
			set -- "${@}" 'imapproxyd'
			;;
		man-db)
			set -- "${@}" 'man'
			;;
		spamassassin*)
			# The idea here is to ensure that if spamassassin is rebuilt, then
			# so is spamassassin's updater...
			if ! grep -qw -- 'spamassassin' <<<"${*:-}"; then
				set -- "${@}" 'spamassassin'
			fi
			if ! grep -qw -- 'spamassassin-update' <<<"${*:-}"; then
				set -- "${@}" 'spamassassin-update'
			fi
			;;
		unifi-controller|unifi-controller-bin)
			set -- "${@}" 'unifi'
			;;
		web-content)
			:
			;;
		*)
			set -- "${@}" "${arg}"
			;;
	esac
done

if [ -n "${service_list:-}" ] && [ $(( service_list )) -eq 1 ]; then
	list=''
	for arg in "${@}"; do
		if echo " ${services[*]} " | grep -wq -- "${arg}"; then
			list="${list:+"${list} "}${arg}"
		else
			error "Service '${arg}' not known"
			rc=1
		fi
	done
	[ $(( rc )) -eq 1 ] && die "Unable to process service list"

	# This logic isn't great - if we're given a (reduced) service list, then we
	# replace the master list of services with the specified set but then still
	# process what we believe to be all services (as a result) with the 'all'
	# logic :|
	#
	IFS=" " read -r -a services <<<"${list}"
	service=''
	all=1
fi

if [ -n "${all:-}" ] && [ $(( all )) -eq 1 ]; then
	# Prevent recursion on 'all'...
	if ! [ "${service:-}" = 'all' ]; then
		c=0 s='' f=''
		for s in "${services[@]}"; do
			output >&2
			output >&2 " ${red}*${reset} Examining service '${s}' [${c}/${#services[@]}:${rc}] ..."
			output >&2

			: $(( c = c + 1 ))

			# Call ourself for each service in turn...
			print "Re-invoking script as './$( basename "${0}" ) ${s}${rebuildpkgs:+" --rebuild"}${force:+" --force"}${FORCE_KEYWORDS:+" --force-keywords"}'"
			./"$( basename "${0}" )" "${s}" ${rebuildpkgs:+"--rebuild"} ${force:+"--force"} ${FORCE_KEYWORDS:+"--force-keywords"} || {
				: $(( rc = rc + 1 ))
				f="${f:+"${f} "}${s}"
			}
			sleep 0.1 2>/dev/null || sleep 1
		done
		if [ $(( rc )) -gt 0 ]; then
			warn "${rc} out of ${c} services failed to build:"
			warn "Failed service builds: ${f}"
		fi
		# shellcheck disable=SC2086
		exit ${rc}
	fi
fi

#
# END WRAPPER CODE


[ -n "${trace:-}" ] && set -o xtrace

images="$( $docker image list --noheading "${IMAGE%:*}" 2>&1 )"
if ! echo "${images}" | grep -Eq -- "^(localhost/)?${IMAGE%:*}"; then
	die "svc stage: docker image '${IMAGE%:*}' not found"
fi
unset images

docker_setup

case "${service:-}" in
	bitlbee)
		service='>=net-im/bitlbee-3.6-r1' ;;
	captive-portal)
		# This ebuild lives in a private repo unless/until refactored at some
		# future date to remote internal network, email, and user references...
		service='www-servers/captive-portal' ;;
	dcc)
		service='mail-filter/dcc' ;;
	dhcp|dhcpd)
		service='net-misc/dhcp' ;;
	distcc|distccd)
		service='sys-devel/distcc' ;;
	dovecot)
		service='net-mail/dovecot' ;;
	eix)
		service='app-portage/eix' ;;
	fetchmail)
		service='net-mail/fetchmail' ;;
	fwupd)
		service='sys-apps/fwupd' ;;
	imapproxy|imapproxyd)
		service='>=net-mail/imapproxy-1.2.8_p14637::srcshelton' ;;
	irqbalance)
		service='sys-apps/irqbalance' ;;
	less)
		# Launcher loads running services' /usr/share/doc volumes
		service='sys-apps/less' ;;
	lighttp|lighttpd)
		service='www-servers/lighttpd' ;;
	lynis)
		service='app-forensics/lynis' ;;
	man|man-db)
		# Launcher loads running services' /usr/share/man volumes
		service='sys-apps/man-db' ;;
	memcache|memcached)
		service='net-misc/memcached' ;;
	metalog)
		service='app-admin/metalog::container' ;;
	mysql|mysqld|mariadb)
		service='dev-db/mariadb' ;;
	named|bind)
		#service='>=net-dns/bind-9.14.12::container'
		service='>=net-dns/bind-9.16.6' ;;
	ntpd|openntpd)
		#service='>=net-misc/openntpd-6.8_p1::container' ;;  # turns out, it's broken :(
		service='net-misc/openntpd::container' ;;
	opendkim)
		service='>=mail-filter/opendkim-2.10.3-r3' ;;
	opendmarc)
		service='mail-filter/opendmarc' ;;
	php)
		service='dev-lang/php' ;;
	php73)
		service='=dev-lang/php-7.3*' ;;
	php74)
		service='=dev-lang/php-7.4*' ;;
	php80)
		service='=dev-lang/php-8.0*' ;;
	php81)
		service='=dev-lang/php-8.1*' ;;
	pinfo|info)
		# Launcher loads running services' /usr/share/info volumes
		service='app-text/pinfo' ;;
	postfix)
		service='mail-mta/postfix' ;;
	postgrey|postgray)
		#service='mail-filter/postgrey::container'  # 1.36-r1 and prior didn't use account packages
		service='mail-filter/postgrey' ;;
	pound)
		service='www-servers/pound' ;;
	powertop)
		service='sys-power/powertop' ;;
	privoxy)
		service='net-proxy/privoxy' ;;
	redis)
		service='dev-db/redis' ;;
	spamassassin|spamd)
		service='>=mail-filter/spamassassin-3.4.4-r1' ;;
	spamassassin-update|sa-update)
		service='>=mail-filter/spamassassin-3.4.4-r1' ;;
	spampd)
		service='mail-filter/spampd' ;;
	svn|svnserve|subversion)
		service='dev-vcs/subversion' ;;
	syslog-ng)
		service='app-admin/syslog-ng' ;;
	unifi|unifi-controller|unifi-controller-bin)
		service='net-misc/unifi-controller-bin' ;;
	unifi60|unifi-controller60|unifi-controller-60|unifi-controller-bin60|unifi-controller-bin-60)
		service='=net-misc/unifi-controller-bin-6.0*' ;;
	unifi61|unifi-controller61|unifi-controller-61|unifi-controller-bin61|unifi-controller-bin-61)
		service='=net-misc/unifi-controller-bin-6.1*' ;;
	unifi62|unifi-controller62|unifi-controller-62|unifi-controller-bin62|unifi-controller-bin-62)
		service='=net-misc/unifi-controller-bin-6.2*' ;;
	unifi64|unifi-controller64|unifi-controller-64|unifi-controller-bin64|unifi-controller-bin-64)
		service='=net-misc/unifi-controller-bin-6.4*' ;;
	unifi65|unifi-controller65|unifi-controller-65|unifi-controller-bin65|unifi-controller-bin-65)
		service='=net-misc/unifi-controller-bin-6.5*' ;;
	unifi70|unifi-controller70|unifi-controller-70|unifi-controller-bin70|unifi-controller-bin-70)
		service='=net-misc/unifi-controller-bin-7.0*' ;;
	unifi71|unifi-controller71|unifi-controller-71|unifi-controller-bin71|unifi-controller-bin-71)
		service='=net-misc/unifi-controller-bin-7.1*' ;;
	unifi72|unifi-controller72|unifi-controller-72|unifi-controller-bin72|unifi-controller-bin-72)
		service='=net-misc/unifi-controller-bin-7.2*' ;;
	unifi73|unifi-controller73|unifi-controller-73|unifi-controller-bin73|unifi-controller-bin-73)
		service='=net-misc/unifi-controller-bin-7.3*' ;;
	vim|vi)
		# Launcher loads running services' /usr/share/doc volumes
		service='app-editors/vim' ;;
	watchdog)
		service='sys-apps/watchdog' ;;
	xmrig)
		service='net-misc/xmrig' ;;
	zxtm)
		# The Docker Registry API documenation describes a default page_size of
		# 10 with a maximum of 1000 results, although a practical limit of 100
		# has been reported.
		# There are no details of how the tag-list is sorted into pages, but
		# the list appears to be sorted most-recently-changed first...
		zxtm_service_version="$( # <- Syntax highlight failure
			curl -Ls 'https://registry.hub.docker.com/v2/repositories/pulsesecure/vtm/tags' |
				jq -r '.results[].name' |
				grep -v -- 'latest' |
				sort -V |
				tail -n 1
		)"

		service="net-misc/zxtm-init-scripts-${zxtm_service_version/[Rr]/-r}"
		;;
	'')
		die "No service name or description provided" ;;
	*)
		info "Building manually-specified service '${service}'" ;;
esac

package=''
package_name=''
package_version=''
repo=''
container_name=''
container_prefix='buildsvc'
docker_resolve "${service%::*}" "${container_prefix}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
# shellcheck disable=SC2001 # POSIX sh compatibility
package_name="$( echo "${package_name}" | sed 's|/|.|' )"

case "${package_name}" in
	'net-misc.zxtm-init-scripts')
		package_name='net-misc.zxtm' ;;
	'mail-filter.spamassassin')
		if [ "${original_service}" = 'spamassassin-update' ] || [  "${original_service}" = 'sa-update' ]; then
			pkgname='mail-filter.spamassassin-update'
			alt_log="${pkgname}${container_name#"${package_name}"}"
			package_name="${pkgname}"
			unset pkgname
		fi
		;;
esac
export container_name package_name
echo "${service}" | grep -Fq -- '::' && repo="${service#*::}"

if [ "${container_name}" = 'podman' ]; then
	die "Suspicious container name '${container_name}'"
else
	print "Using container name '${container_name}'"
fi

if [ -z "${package_name:-}" ]; then
	die "Cannot extract package name from service name '${service}' (${package})"
fi
if [ -z "${package_version:-}" ]; then
	die "Cannot extract package version from service name '${service}' (${package})"
fi

if [ $(( ${force:-0} )) -eq 0 ]; then
	images="$( $docker image list --noheading "service.${package_name}:${package_version}" 2>&1 )"
	if echo "${images:-}" | grep -q -- "service.${package_name}\s\+${package_version}\s"; then
		note "Docker image 'service.${package_name}:${package_version}' already exists - remove or use --force to rebuild"
		exit 0
	else
		output "Creating new 'service.${package_name}:${package_version}' image ..."
	fi
	unset images
else
	warn "Forcing creation of new 'service.${package_name}:${package_version}' image ..."
fi

# from common/vars.sh:
#use_essential="asm ipv6 ithreads native-extensions mdev nptl split-usr ssp threads tls-heartbeat zlib${use_cpu_flags:+ ${use_cpu_flags}}"
#use_essential_gcc="default-stack-clash-protection default-znow -fortran graphite nptl openmp pch sanitize ssp vtv zstd"

force_python=''
pre_remove='' pre_pkgs='' pre_use=''
with_use='' extra_pkgs=''
post_pkgs='' post_use='' post_remove=''
gcc_extra_flags='pch'
python_target='' etcdir=''

# There's probably a better way of doing this, but for now let's assume that
# the python configuration for the root system and the python confguration for
# the container build environment is the same (... which is reasonable, unless
# overridden, as they share a common portage tree and therefore base set of
# python defaults).
if type -pf portageq >/dev/null 2>&1; then
	python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"
	case "${original_service:-}" in
		php[0-9][0-9])
			php_targets="${original_service%[0-9]}-${original_service#php[0-9]}"
			;;
		*)
			php_targets="$( for t in $( portageq envvar 'PHP_TARGETS' ); do echo "php_targets_${t}"; done | sort -V | tail -n 1 )"
			;;
	esac
else
	# FIXME: Hard-coded
	python_single_target="${python_default_target##* }"
	python_target="${python_single_target:-"python3_10"}"
	case "${original_service:-}" in
		php[0-9][0-9])
			php_targets="${original_service%[0-9]}-${original_service#php[0-9]}"
			;;
		*)
			php_targets='php_targets_php7-4'
			;;
	esac
fi
print "Building for python version '${python_target}'"
print "Building for PHP versions '${php_targets}'"

case "${package_name}" in
	*.bind)
		output "Setting build variables for package 'bind' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/named acct-user/named'
		extra_pkgs='app-shells/bash dev-lang/perl sys-apps/coreutils sys-apps/file sys-apps/gentoo-functions'

		ports='53/tcp 53/udp 953/tcp 8053/tcp'
		container_cmd='/usr/sbin/named'
		etcdir='bind'
		;;
	*.bitlbee)
		output "Setting build variables for package 'bitlbee' ..."
		pre_pkgs='acct-group/bitlbee acct-user/bitlbee'

		ports='6667/tcp'
		user='bitlbee'
		group='bitlbee'
		container_cmd='/usr/sbin/bitlbee'
		container_cwd='/var/lib/bitlbee'
		etcdir='bitlbee'
		;;
	*.captive-portal)
		output "Setting build variables for private package 'captive-portal' ..."

		ports='8088/tcp'
		#user='root'
		#group='root'
		container_cmd='/usr/local/sbin/shttpd.pl'
		container_cwd='/var/lib/shttpd'
		etcdir='iptables.d'
		;;
	*.dcc)
		output "Setting build variables for package 'dcc' ..."
		extra_pkgs='sys-apps/findutils'

		ports='6276/udp 6276/tcp 6277/udp 6277/tcp'
		container_cmd='/etc/init.d/dcc'
		etcdir='dcc'
		;;
	*.dhcp)
		output "Setting build variables for package 'dhcp' ..."
		pre_pkgs='acct-group/dhcp acct-user/dhcp'

		ports='67/udp 68/udp 647/tcp 7911/tcp'
		#user='dhcp'
		#group='dhcp'
		container_cmd='/usr/sbin/dhcpd'
		etcdir='dhcp'
		;;
	*.distcc)
		output "Setting build variables for package 'distcc' ..."
		pre_pkgs='acct-group/distcc acct-user/distcc'
		extra_pkgs='dev-lang/python'

		ports='3632/tcp 3635/tcp 3636/tcp'
		#user='distcc'
		#group='distcc'
		container_cmd='/usr/bin/distccd'
		etcdir='distcc'
		;;
	*.dovecot)
		output "Setting build variables for package 'dovecot' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/dovecot acct-group/dovenull acct-group/mail acct-user/dovecot acct-user/dovenull acct-user/mail acct-user/postmaster'
		extra_pkgs='app-shells/bash' #  mail-mta/msmtp'

		ports='143/tcp 993/tcp 24242/tcp'
		container_cmd='/usr/sbin/dovecot'
		etcdir='dovecot'
		;;
	*.eix)
		output "Setting build variables for non-native tools ..."
		force_python="${python_target}"
		pre_use="-* build minimal python_single_target_${python_target} python_targets_${python_target} symlink xml"
		pre_pkgs='dev-lang/python dev-lang/python-exec sys-devel/gcc virtual/linux-sources'
		with_use="${pre_use}"
		extra_pkgs='app-eselect/eselect-python app-portage/gentoolkit'

		# This container must be able to be invoked as 'versionsort' or 'equery'...
		container_cmd='/usr/bin/versionsort'
		;;
	*.fetchmail)
		output "Setting build variables for packages 'fetchmail', 'procmail', and 'postfix' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		extra_pkgs='app-shells/bash mail-filter/procmail net-mail/dovecot dev-lang/perl'

		container_cmd='/usr/bin/fetchmail'
		;;
	*.fwupd)
		output "Setting build variables for package 'fwupd' ..."
		pre_remove='sys-libs/libeudev'

		container_cmd='/usr/bin/fwupdtool'
		;;
	*.imapproxy)
		output "Setting build variables for package 'imapproxy' ..."
		pre_pkgs='acct-group/nogroup'

		#ports='143/tcp'
		ports='8143/tcp'
		container_cmd='/usr/sbin/imapproxyd'
		etcdir='imapproxy'
		;;
	*.irqbalance)
		output "Setting build variables for package 'irqbalance' ..."
		pre_pkgs='sys-apps/help2man'

		container_cmd='/usr/sbin/irqbalance'
		;;
	*.less)
		output "Setting build variables for package 'less' ..."
		extra_pkgs='app-text/lesspipe'

		container_cmd='/usr/bin/less'
		;;
	*.lighttpd)
		output "Setting build variables for package 'lighttpd' ..."
		pre_pkgs='app-admin/gamin dev-lang/php media-gfx/imagemagick sys-apps/help2man sys-devel/gcc virtual/fam'
		pre_pkgs+=' acct-group/lighttpd acct-user/lighttpd'
		extra_pkgs='
			app-admin/gamin
			app-shells/bash
			dev-lang/perl
			dev-perl/CGI
			dev-perl/IO-Socket-INET6
			dev-perl/IO-Socket-SSL
			dev-php/pecl-imagick
			mail-filter/dcc
			media-gfx/imagemagick
			sys-apps/findutils
		'
		gcc_extra_flags+=' openmp'

		#ports='80/tcp 443/tcp'
		ports='7080/tcp 7443/tcp'
		container_cmd='/usr/sbin/lighttpd'
		etcdir='lighttpd'
		;;
	*.lynis)
		output "Setting build variables for package 'lynis' ..."
		#extra_pkgs='app-admin/eselect app-eselect/eselect-awk net-misc/openssh sys-apps/coreutils sys-apps/findutils sys-apps/gawk'
		# 'srcshelton' repo relocates gawk to /bin/
		impl='::srcshelton'
		with_use='gawk'
		extra_pkgs="net-misc/openssh sys-apps/coreutils sys-apps/findutils sys-apps/gawk${impl:+"${impl}"} app-alternatives/awk${impl:+"${impl}"}"

		container_cmd='/usr/sbin/lynis'
		;;
	*.man-db)
		output "Setting build variables for package 'man-db' ..."
		pre_pkgs='sys-apps/help2man sys-apps/man-pages sys-apps/man-pages-posix sys-devel/gcc'

		container_cmd='/usr/bin/man'
		;;
	*.mariadb)
		output "Setting build variables for package 'mariadb' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/hugetlb acct-group/mysql acct-user/mysql'
		# app-shells/bash needed to run ebuild 'pkg_config' function within container
		# sys-libs/glibc needed to provide locale data
		# sys-libs/timezone-data needed to provide time-zone data for new installations ...
		with_use='-timezone-tools'
		extra_pkgs='app-shells/bash dev-db/mysqltuner sys-libs/glibc sys-libs/timezone-data'

		ports='3306/tcp 4444/tcp 4567/tcp 4568/tcp' # 4444, 4567-8 for Galera SST
		user='mysql'
		group='mysql'
		container_cmd='/usr/sbin/mysqld'
		container_cwd='/var/lib/mysql'
		etcdir='mysql'
		;;
	*.memcached)
		output "Setting build variables for package 'memcached' ..."
		pre_pkgs='acct-group/hugetlb acct-group/memcached acct-user/memcached'

		container_cmd='/usr/bin/memcached'
		;;
	*.metalog)
		output "Setting build variables for package 'metalog' ..."

		ports='514/udp'
		container_cmd='/usr/sbin/metalog'
		etcdir='metalog'
		;;
	*.opendkim)
		output "Setting build variables for package 'opendkim' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/opendkim acct-user/opendkim'
		pre_pkgs+=' acct-group/dkimsocket acct-group/mail'
		pre_pkgs+=' acct-group/unbound acct-user/unbound'
		extra_pkgs='sys-libs/readline'

		ports='8891/tcp'
		#user='opendkim'
		#group='opendkim'
		container_cmd='/usr/sbin/opendkim'
		#container_cmd='/usr/sbin/opendkim-reportstats'
		etcdir='opendkim'
		;;
	*.opendmarc)
		output "Setting build variables for package 'opendmarc' ..."
		pre_pkgs='sys-devel/gcc acct-group/milter acct-group/opendmarc acct-user/milter acct-user/opendmarc'
		#extra_pkgs='mail-mta/msmtp'

		ports='8893/tcp'
		#user='opendmarc'
		#group='opendmarc'
		container_cmd='/usr/sbin/opendmarc'
		#container_cmd='/usr/sbin/opendmarc-reportstats'
		etcdir='opendmarc'
		;;
	*.openntpd)
		output "Setting build variables for package 'openntpd' ..."

		pre_pkgs='acct-user/openntpd acct-user/openntpd'
		case "${package_version}" in
			6.[02]_p)
				#pre_remove='app-arch/libarchive dev-libs/openssl dev-python/pypy dev-python/pypy3 dev-python/pypy3-exe net-misc/wget'
				# shellcheck disable=SC2034
				pre_remove='app-arch/libarchive dev-libs/openssl' # net-misc/wget'
				pre_use='-openssl libressl'
				force_python="${python_target}"
				pre_pkgs="dev-lang/python dev-libs/libressl dev-util/pkgconf sys-devel/gcc virtual/pkgconfig @system @world"
				with_use='-openssl libressl'
				;;
			*)
				# LibreSSL is now deprecated, so we don't need to jump through these hoops...
				extra_pkgs='app-misc/ca-certificates'
				:
				;;
		esac

		ports='123/udp'
		#user='openntpd'
		#group='openntpd'
		container_cmd='/usr/sbin/ntpd'
		container_cwd='/var/empty'
		etcdir='openntpd'
		fs_name='openntpd'
		;;
	*.php)
		LIB='lib64'
		case "${original_service:-}" in
			php[0-9][0-9])
				PHP_SLOT="${original_service%[0-9]}.${original_service#php[0-9]}"
				;;
			*)
				PHP_SLOT="$( for t in $( portageq envvar 'PHP_TARGETS' ); do echo "${t/-/.}"; done | sort -V | tail -n 1 )"
				;;
		esac
		output "Setting build variables for package 'php' ..."
		# eselect-php-0.9.6+ required for ROOT support
		pre_pkgs='dev-php/PEAR-PEAR media-gfx/imagemagick sys-apps/help2man sys-devel/gcc >=app-eselect/eselect-php-0.9.6 acct-group/lighttpd acct-user/lighttpd acct-group/nobody'
		# TODO: There has to be a better way... ?
		#extra_pkgs="acct-group/lighttpd dev-db/mysql-connector-c dev-php/pecl-imagick >=dev-php/pecl-memcache-4 media-gfx/imagemagick $(
		#	roundcube_flags='change-password enigma exif managesieve mysql plugins ssl spell zxcvbn'
		#	php_flags='bzip2 cli ctype url fileinfo filter fpm gd hash iconv intl json pdo phar posix readline session sockets unicode xml zip zlib'
		#	webapp_config_flags='lighttpd'
		#	nettle_flags='gmp'
		#	libcap_flags='pam'
		#	zx_utils_flags='static-libs'
		#	libpcre2_flags='jit'
		#	USE="-* curl_ssl_openssl openssl ssl python_targets_${python_target}" \
		#		"${libpcre2_flags}" \
		#		"${zx_utils_flags}" \
		#		"${libcap_flags}" \
		#		"${nettle_flags}" \
		#		"${webapp_config_flags}" \
		#		"${php_flags}" \
		#		"${roundcube_flags}" \
		#	emerge -ep roundcube |
		#		cut -d']' -f 2- |
		#		awk '{ print $1 }' |
		#		grep -- '^dev-php' |
		#		sed 's/::.*$// ; s/^/>=/'
		#)"
		extra_pkgs='
			>=dev-php/pecl-memcache-4
			dev-db/mysql-connector-c
			dev-php/Endroid-QrCode
			dev-php/Masterminds-HTML5
			dev-php/pear
			dev-php/PEAR-Archive_Tar
			dev-php/PEAR-Auth_SASL
			dev-php/PEAR-Console_CommandLine
			dev-php/PEAR-Console_Getopt
			dev-php/PEAR-Crypt_GPG
			dev-php/PEAR-Exception
			dev-php/PEAR-Mail_Mime
			dev-php/PEAR-Mail_mimeDecode
			dev-php/PEAR-Net_IDNA2
			dev-php/PEAR-Net_Sieve
			dev-php/PEAR-Net_SMTP
			dev-php/PEAR-Net_Socket
			dev-php/PEAR-PEAR
			dev-php/PEAR-Structures_Graph
			dev-php/PEAR-XML_Util
			dev-php/pecl-imagick
			dev-php/pecl-redis
			dev-php/ZxcvbnPhp
			media-gfx/imagemagick
			net-misc/curl
			sys-apps/file
			sys-apps/gentoo-functions
			sys-apps/shadow
		'
			#dev-util/strace
		gcc_extra_flags+=' openmp'

		container_cmd="/usr/${LIB}/${PHP_SLOT}/bin/php-fpm"
		etcdir='php'
		;;
	*.pinfo)
		output "Setting build variables for package 'pinfo' ..."
		pre_pkgs='sys-apps/help2man'
		extra_pkgs='sys-apps/texinfo'

		container_cmd='/usr/bin/pinfo'
		;;
	*.postfix)
		output "Setting build variables for package 'postfix' ..."
		# mail-filter/maildrop's BDEPEND/DEPEND isn't working :(
		pre_pkgs='
			sys-apps/help2man
			acct-group/hugetlb
			acct-group/postfix
			acct-user/memcached
			acct-user/postfix
			dev-libs/libpcre
			net-dns/libidn
			net-libs/courier-unicode
			sys-devel/automake
			sys-devel/gcc
			sys-devel/libtool
		'
		#extra_pkgs='dev-libs/cyrus-sasl'
		#post_pkgs='app-shells/bash mail-filter/maildrop mail-filter/procmail net-mail/dovecot sys-apps/shadow'  # dovecot for lda
		extra_pkgs='app-shells/bash dev-libs/cyrus-sasl mail-filter/maildrop mail-filter/procmail net-mail/dovecot sys-apps/shadow'  # dovecot for lda
			# ... shadow as postfix user isn't getting its groups

		container_cmd='/usr/sbin/postfix'
		etcdir='postfix sasl2'
		;;
	*.postgrey)
		output "Setting build variables for package 'postgrey' ..."
		pre_pkgs='
			acct-group/dkimsocket
			acct-group/mail
			acct-group/milter
			acct-group/nogroup
			acct-group/postfix
			acct-group/postgrey
			acct-user/postfix
			acct-user/postgrey
		'

		container_cmd='/usr/sbin/postgrey'
		# Not a typo!
		etcdir='postfix'
		;;
	*.pound)
		output "Setting build variables for package 'pound' ..."

		#ports='8888/tcp'
		container_cmd='/usr/sbin/pound'
		etcdir='pound'
		;;
	*.powertop)
		output "Setting build variables for package 'powertop' ..."
		pre_pkgs='sys-devel/gcc'
		extra_pkgs='x11-apps/xset'

		container_cmd='/usr/sbin/powertop'
		# Container requires '--privileged' to operate, data in /var/cache/powertop/
		;;
	*.privoxy)
		output "Setting build variables for package 'privoxy' ..."
		pre_pkgs='acct-group/privoxy acct-user/privoxy'

		ports='8118/tcp'
		container_cmd='/usr/sbin/privoxy'
		etcdir='privoxy'
		;;
	*.redis)
		output "Setting build variables for package 'redis' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/hugetlb acct-group/redis acct-user/redis'

		ports='6379/tcp 26379/tcp'
		user='redis'
		group='redis'
		container_cmd='/usr/sbin/redis-server'
		container_cwd='/var/lib/redis'
		etcdir='redis'
		;;
	*.spamassassin|*.spamassassin-update)
		pre_pkgs='sys-apps/help2man acct-group/spamd acct-user/spamd'
		if [ "${original_service}" = 'spamassassin-update' ] || [ "${original_service}" = 'sa-update' ]; then
			output "Setting build variables for package 'spamassassin-update' ..."
			# 'srcshelton' repo relocates gawk to /bin/
			impl='::srcshelton'
			with_use='gawk'
			extra_pkgs="
				>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
				>=dev-perl/Crypt-OpenSSL-EC-1.10.0
				>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
				>=dev-perl/Crypt-OpenSSL-Random-0.100.0
				>=dev-perl/Digest-GOST-0.60.0
				app-admin/eselect
				app-alternatives/awk${impl:+"${impl}"}
				app-crypt/gnupg
				dev-lang/python-exec
				dev-perl/GeoIP2
				net-misc/geoipupdate
				sys-apps/baselayout
				sys-apps/busybox
				sys-apps/coreutils
				sys-apps/findutils
				sys-apps/gawk${impl:+"${impl}"}
				sys-apps/gentoo-functions
				sys-apps/portage
				sys-apps/sed
				sys-devel/binutils
				sys-devel/binutils-config
				sys-devel/gcc
				sys-devel/gcc-config
				sys-devel/make
				sys-kernel/linux-headers
			"
				#app-eselect/eselect-awk${impl:+"${impl}"}

			container_cmd='/usr/bin/sa-update'
		else
			output "Setting build variables for package 'spamassassin' ..."
			pre_pkgs='sys-devel/gcc'
			extra_pkgs='
				>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
				>=dev-perl/Crypt-OpenSSL-EC-1.10.0
				>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
				>=dev-perl/Crypt-OpenSSL-Random-0.100.0
				>=dev-perl/Digest-GOST-0.60.0
				dev-perl/Archive-Zip
				dev-perl/BSD-Resource
				dev-perl/GeoIP2
				dev-perl/IO-String
				mail-filter/dcc
				sys-apps/findutils
				sys-devel/gcc
			'

			ports='783/tcp 6276/udp 6276/tcp 6277/udp 6277/tcp'
			# Somehow, this container is being built with user='spampd'??!?
			user='root'
			group='root'
			container_cmd='/usr/sbin/spamd'
		fi
		etcdir='mail/spamassassin'
		;;
	*.spampd)
		# 'eval: failed to locate the triplets.txt file' is normal, the file was removed but
		# the eval wasn't :o
		#
		output "Setting build variables for package 'spampd' ..."
		pre_pkgs='sys-apps/help2man acct-group/mail acct-user/mail acct-group/spamd acct-user/spamd'
		extra_pkgs='
			>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
			>=dev-perl/Crypt-OpenSSL-EC-1.10.0
			>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
			>=dev-perl/Crypt-OpenSSL-Random-0.100.0
			>=dev-perl/Digest-GOST-0.60.0
			>=mail-filter/spamassassin-3.4.4-r1
			dev-perl/Crypt-OpenSSL-RSA
			dev-perl/DBD-mysql
			dev-perl/Geo-IP
			dev-perl/GeoIP2
			dev-perl/IP-Country
			dev-perl/NetAddr-IP
			mail-filter/dcc
			mail-filter/razor
			sys-apps/baselayout
			sys-apps/findutils
			sys-devel/gcc
			virtual/perl-DB_File
		'

		ports='6276/udp 6276/tcp 6277/udp 6277/tcp'  # razor/dcc
		if [[ "$( # <- Syntax highlight fail
				printf '2.61\n%s' "${package_version:-}" |
				sort -V |
				head -n 1
		)" == '2.61' ]]; then
			output "Configuring 'spampd-${package_version:-}' for v2.61 or later ..."
			container_cmd='/usr/sbin/spampd'
		else
			output "Configuring 'spampd-${package_version:-}' for v2.53 or prior ..."
			container_cmd='/usr/sbin/spampd.pl'
		fi
		;;
	*.subversion)
		output "Setting build variables for package 'svnserve' ..."
		pre_pkgs='sys-apps/help2man acct-group/svnusers acct-user/svn'
		force_python="${python_target}"
		extra_pkgs='dev-lang/python'
		with_use='xml'

		ports='3690/tcp'
		user='svn'
		group='svnusers'
		container_cmd='/usr/bin/svnserve'
		container_cwd='/'
		;;
	*.syslog-ng)
		output "Setting build variables for package 'syslog-ng' ..."
		pre_pkgs='sys-apps/help2man'

		ports='514/udp'
		container_cmd='/usr/sbin/syslog-ng'
		container_cwd='/var/lib/syslog-ng'
		etcdir='syslog-ng'
		;;
	*.unifi-controller-bin)
		output "Setting build variables for package 'unifi-controller-bin' ..."
		output
		warn "This build will fail with a python exception if any new package"
		warn "has to be built from source. So long as all necessary packages"
		warn "are available for installation as binaries (which should be the"
		warn "case for subsequent builds without other changes) then the"
		warn "process should succeed."
		output
		#EMERGE_OPTS='--single --swap'  # Merge packages one at a time, for debug purposes

		# shellcheck disable=SC2034
		ECLASS_OVERRIDE='unifi'  # consumed in common/run.sh
		# shellcheck disable=SC2034
		NO_REPO_MASKS='no_repo_masks'  # ... any value will do

		gcc_use="${use_essential_gcc/ graphite / -graphite }"
		# Look for "build" gcc USE-flags in package.use only (or use defaults above) ...
		if [ -s /etc/portage/package.use/package.use ]; then
			gcc_use="$( # <- SYntax highlight fail
				sed 's/#.*$//' /etc/portage/package.use/package.use |
				tr -s '[:space:]' |
				grep -E -- '^\s?([<>=~]=?)?sys-devel/gcc' |
				cut -f 2- |
				xargs -n 1 echo |
				sort |
				uniq
			)"
		fi

		masked_packages='=dev-python/setuptools-46.4.0-r3 sys-apps/util-linux' # sys-apps/file sys-apps/portage
		export L10N='en'
		export CFLAGS="${CFLAGS:+"${CFLAGS} "}-w"  # mongodb is *really* noisy...
		pre_use="headless-awt ${gcc_use}"
		force_python='python2_7'
		#pre_pkgs='dev-java/openjdk-bin:8 dev-lang/python:2.7 sys-devel/gcc'
		pre_pkgs="${masked_packages} sys-devel/gcc acct-group/mongodb acct-group/unifi acct-user/mongodb acct-user/unifi"
		#extra_pkgs='
		#	  sys-devel/gcc
		#	 =app-misc/pax-utils-1.2.4
		#	 =sys-apps/file-5.37-r1
		#	 =sys-apps/util-linux-2.33.2
		#	 =sys-apps/portage-2.3.89-r1
		#	 =dev-util/boost-build-1.72.0
		#		  app-admin/eselect
		#		  app-eselect/eselect-python
		#	  dev-lang/python:2.7
		#		 =dev-python/setuptools-46.4.0-r3
		#		 =dev-java/java-config-2.2.0-r4
		#	  dev-java/openjdk-bin:8
		#		  acct-group/mongodb
		#		  acct-user/mongodb
		#		>=app-arch/snappy-1.1.3
		#		>=dev-cpp/yaml-cpp-0.5.3
		#		>=dev-libs/boost-1.60
		#		>=dev-libs/libpcre-8.41
		#		  dev-libs/snowball-stemmer
		#		  net-libs/libpcap
		#		  net-misc/curl
		#		>=sys-libs/zlib-1.2.11
		#		>=dev-libs/openssl-1.0.1g:0
		#		>=dev-util/scons-2.5.0
		#		  dev-python/cheetah
		#		  dev-python/pyyaml
		#		  dev-python/typing
		#		  sys-libs/ncurses:0
		#		  sys-libs/readline:0
		#	      dev-python/regex
		#	 <dev-db/mongodb-4.2'
		# If we try to build 'openjdk:8' in ${extra_pkgs} then it now complains
		# that there is no available Java 8 VM available, even though we have
		# openjdk-bin:8 available in the build container with ROOT=/
		# TODO: Consider post-install and post-remove hooks to allow openjdk:8
		#       to be build with ROOT != / and then openjdk-bin:8 removed...
		#extra_pkgs='<dev-db/mongodb-4.2 dev-java/openjdk:8 dev-lang/python:2.7 app-admin/eselect app-eselect/eselect-python'
		case "${package_version}" in
			5.*|6.*|7.0.*|7.1.*|7.2.*)
				extra_pkgs='dev-java/openjdk-bin:8'
				;;
			#7.3.*)
			*)
				#extra_pkgs='dev-java/openjdk-bin:11'
				extra_pkgs='dev-java/openjdk:11'
				;;
		esac
		#post_remove="${extra_pkgs}"
		extra_pkgs="${extra_pkgs} <dev-db/mongodb-4.2 dev-lang/python:2.7" # app-admin/eselect app-eselect/eselect-python'
		extra_pkgs="${extra_pkgs} app-misc/ca-certificates${ECLASS_OVERRIDE:+"::${ECLASS_OVERRIDE}"}"
		extra_pkgs="${extra_pkgs} ${masked_packages}"
		with_use="python_targets_${force_python}"

		ports='3478/udp 5514/udp 8080/tcp 8443/tcp 8880/tcp 8843/tcp 6789/tcp 27117/tcp 10001/udp 1900/udp 5656-5699/udp'
		user='unifi'
		group='unifi'
		# As of 5.5.24, logs are written to 'logs/server.log' below the
		# directory from which the class is invoked - so we need to chdir to
		# the installation directory in order for this to work as anticipated.
		container_cwd="/opt/unifi-controller-${package_version}"
		# ace.jar needs to be run within a JVM...
		container_cmd='/usr/bin/java'
		;;
	*.vim)
		output "Setting build variables for package 'vim' ..."
		extra_pkgs='app-vim/dhcpd-syntax app-vim/eselect-syntax app-vim/gentoo-syntax app-vim/help-extra-syntax app-vim/info app-vim/json app-vim/nginx-syntax app-vim/ntp-syntax vim-spell-en'

		container_cmd='/usr/bin/vim'
		etcdir='vim'
		;;
	*.watchdog)
		output "Setting build variables for package 'watchdog' ..."

		container_cmd='/usr/sbin/watchdog'
		;;
	*.xmrig)
		output "Setting build variables for package 'xmrig' ..."

		container_cmd='/usr/bin/xmrig'
		etcdir='xmrig'
		;;
	*.zxtm)
		ZEUSHOME='/opt/zeus'
		output "Setting build variables for package 'zxtm' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/nogroup acct-group/sys'
		extra_pkgs='app-eselect/eselect-iptables app-shells/bash net-firewall/iptables sys-apps/iproute2 sys-process/procps'

		container_cmd='/opt/zeus/runzeus.sh'
		container_cwd="${ZEUSHOME}"
		;;
	*)
		warn "Package '${package_name}' has no pre-set configuration"
		;;
esac
#print "Additional USE flags are '${with_use:-"<none>"}'"

pre_use="$( echo "${pre_use}" | tr $'\n' ' ' | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"
pre_pkgs="$( echo "${pre_pkgs}" | tr $'\n' ' ' | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"
extra_pkgs="$( echo "${extra_pkgs}" | tr $'\n' ' ' | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"
post_use="$( echo "${post_use}" | tr $'\n' ' ' | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"
post_pkgs="$( echo "${post_pkgs}" | tr $'\n' ' ' | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"

declare pkg=''
declare -i warning=0
for pkg in ${post_pkgs:-}; do
	if ! grep -Fq " ${pkg} " <<<" ${package:-} ${extra_pkgs:-} "
	then
		warn "post_pkg entry '${pkg}' will be rebuilt without dependencies, but does not appear in 'extra_pkgs'"
		warn
		warning=1
	fi
done

case " ${pre_pkgs} " in
	*' dev-util/pkgconf '*)
		pre_use="${pre_use:+"${pre_use} "}pkg-config"
		;;
esac
case " ${pre_pkgs} " in
	*' dev-util/pkgconfig '*)
		pre_use="${pre_use:+"${pre_use} "}internal-glib"
		;;
esac
case " ${pre_pkgs} " in
	*' sys-apps/help2man '*)
		pre_use="${pre_use:+"${pre_use} "}nls"
		;;
esac
case " ${pre_pkgs} " in
	*' sys-devel/gcc '*)
		pre_use="-lib-only openmp${pre_use:+" ${pre_use}"}${use_essential_gcc:+" ${use_essential_gcc}"} ${gcc_extra_flags}"
		# spamassassin updates require perl and a functioning compiler
		# in the container...
		if [ "${original_service}" != 'spamassassin-update' ] && [ "${original_service}" != 'sa-update' ]; then
			post_use="lib-only openmp${post_use:+" ${post_use}"} ${gcc_extra_flags}"
			if [ -n "${post_pkgs:-}" ]; then
				warn "sys-devel/gcc needs to be rebuilt (without dependencies) but 'post_pkgs' is non-empty... suggest moving 'post_pkgs' to 'extra_pkgs'"
				warn "post_pkgs contains '${post_pkgs}'"
				warn
				warning=1
			fi
			post_pkgs="${post_pkgs:+"${post_pkgs} "}sys-devel/gcc sys-libs/zlib --nodeps"
		fi
		;;
esac
(( warning )) && sleep 5

if ! grep -Fq ' sys-devel/gcc ' <<<" ${post_pkgs} "; then
	post_pkgs="${post_pkgs:+"${post_pkgs} "}sys-libs/zlib --nodeps --with-bdeps=n"
	post_use="${post_use:+" ${post_use}"} -minizip xml"
fi

# Make these additions after the above check, with the intention that user and
# group packages are explicitly included rather than the user relying on the
# group being a dependency...
pkg=''
case " ${pre_pkgs} " in
	*' acct-group/'*|*' acct-user/'*)
		# We need groups before users if we're not enforcing
		# dependencies...
		for pkg in ${pre_pkgs}; do
			case "${pkg}" in
				acct-user/*)
					post_pkgs="${pkg}${post_pkgs:+" ${post_pkgs}"}"
					;;
			esac
		done
		for pkg in ${pre_pkgs}; do
			case "${pkg}" in
				acct-group/*)
					post_pkgs="${pkg}${post_pkgs:+" ${post_pkgs}"}"
					;;
			esac
		done
		;;
esac
unset pkg

# prelink no longer has any effect as it can't run against PIE binaries :(
#pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}net-misc/ethertypes sys-apps/baselayout sys-devel/prelink"
pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}net-misc/ethertypes sys-apps/baselayout"

case " ${extra_pkgs:-} " in
	*' app-shells/bash '*|*' sys-apps/shadow '*)
		extra_pkgs="${extra_pkgs} sys-libs/readline"
		;;
esac
if [ -n "${build_debug:-}" ]; then
	extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}dev-util/strace"
fi
#extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}sys-devel/prelink"

case " ${gcc_extra_flags:-} " in
	*' openmp '*)
		post_pkgs="dev-libs/gmp dev-libs/mpfr dev-libs/mpc${post_pkgs:+" ${post_pkgs}"}"
		;;
esac

[ -z "${post_use:-}" ] && [ -n "${with_use:-}" ] && post_use="${with_use} lib-only openmp"

if [ -z "${container_cmd:-}" ]; then
	die "No container command provided"
elif [ "${container_cmd}" = 'podman' ]; then
	die "Invalid container command '${container_cmd}'"
fi

#[ -n "${trace:-}" ] && set -o xtrace

DOCKER_EXTRA_MOUNTS=''
if [ -n "${etcdir:-}" ]; then
	for dir in ${etcdir}; do
		mkdir -p "/etc/${dir}"
		DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/etc/${dir}/,destination=/service/etc/${dir}"
		if [ "${dir}" = 'mail/spamassassin' ]; then
			mkdir -p /var/lib/spamassassin /usr/share/spamassassin
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/var/lib/spamassassin/,destination=/service/var/lib/spamassassin"
			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/usr/share/spamassassin/,destination=/service/usr/share/spamassassin"
		fi
	done
fi
DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/etc/default/,destination=/etc/default"
DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/etc/logrotate.d/,destination=/etc/logrotate.d"
DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/etc/ssl/,destination=/etc/ssl"

# package.accept_keywords
#
# FIXME: package.accept_keywords.${arch:-} is handled in common/run.sh rather
#        than here - standardise this to do everything in one place or the
#        other!
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords" ]; then
	print "Mounting $( test -d "${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords" && echo 'directory' || echo 'file' ) '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords' to '/etc/portage/package.accept_keywords' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.accept_keywords,destination=/etc/portage/package.accept_keywords${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.accept_keywords' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

# package.license
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.license" ]; then
	print "Mounting $( test -d "${base_dir:+"${base_dir}/"}etc/portage/package.license" && echo 'directory' || echo 'file' ) '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.license' to '/etc/portage/package.license' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.license,destination=/etc/portage/package.license${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.license' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

# NB: test -s returns '0' when called on a directory (even if it's empty...)
#
# package.unmask.svc
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/${package_name#*.}" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/${package_name#*.}' to '/etc/portage/package.unmask/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/${package_name#*.},destination=/etc/portage/package.unmask/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/package.unmask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/package.unmask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/package.unmask' to '/etc/portage/package.unmask/package.unmask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/package.unmask,destination=/etc/portage/package.unmask/package.unmask${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc' to '/etc/portage/package.unmask/package.unmask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc,destination=/etc/portage/package.unmask/package.unmask${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.unmask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/'"
fi
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch:-}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch}' to '/etc/portage/package.unmask/${arch}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.${arch},destination=/etc/portage/package.unmask/${arch}${docker_readonly:+",${docker_readonly}"}"
fi

# package.mask.svc
package_mask_svc_name="${package_name#*.}"
case "${package_mask_svc_name}-${package_version}" in
	php-7.3.*) package_mask_svc_name='php73' ;;
	php-7.4.*) package_mask_svc_name='php74' ;;
	php-8.0.*) package_mask_svc_name='php80' ;;
	php-8.1.*) package_mask_svc_name='php81' ;;
esac
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/${package_mask_svc_name}" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/${package_mask_svc_name}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/${package_mask_svc_name}' to '/etc/portage/package.mask/${package_mask_svc_name}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/${package_mask_svc_name},destination=/etc/portage/package.mask/${package_mask_svc_name}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/package.mask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/package.mask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/package.mask' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/package.mask,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/'"
fi

# package.mask
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.}' to '/etc/portage/package.mask/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/${package_name#*.},destination=/etc/portage/package.mask/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/package.mask,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.mask" ] && ! [ -d "${base_dir:+"${base_dir}/"}etc/portage/package.mask" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask' to '/etc/portage/package.mask/package.mask' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask,destination=/etc/portage/package.mask/package.mask${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/'"
fi
if [ -e "${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch:-}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch}' to '/etc/portage/package.mask/${arch}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.${arch},destination=/etc/portage/package.mask/${arch}${docker_readonly:+",${docker_readonly}"}"
fi

# host additional package.mask
#if [ -d /etc/portage/package.mask ]; then
#	declare extra_mask='' file=''
#	while read -r extra_mask; do
#		file="$( basename "${extra_mask}" )"
#		if test -s "/etc/portage/package.mask/${file}"; then
#			print "Mounting file '/etc/portage/package.mask/${file}' to '/etc/portage/package.mask/${file}' ..."
#			DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=/etc/portage/package.mask/${file},destination=/etc/portage/package.mask/${file}${docker_readonly:+",${docker_readonly}"}"
#		fi
#	done < <( find /etc/portage/package.mask/ -mindepth 1 -maxdepth 1 -type f -not -name 'package.mask' | grep -v -- "repo-${ECLASS_OVERRIDE:-"__IGNORE__"}-mask" )
#	unset file extra_mask
#fi

# package.use alternatives
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/alternatives" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/alternatives' to '/etc/portage/package.use/package.use.override/alternatives' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/alternatives,destination=/etc/portage/package.use.override/alternatives${docker_readonly:+",${docker_readonly}"}"
fi

# package.use.svc
if [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/${package_name#*.}" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/package.use.header' to '/etc/portage/package.use/package.use.override/package.use.header' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/package.use.header,destination=/etc/portage/package.use.override/package.use.header${docker_readonly:+",${docker_readonly}"}"
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/${package_name#*.}' to '/etc/portage/package.use.override/${package_name#*.}' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/${package_name#*.},destination=/etc/portage/package.use.override/${package_name#*.}${docker_readonly:+",${docker_readonly}"}"
elif [ -s "${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/package.use.header" ]; then
	print "Mounting file '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/package.use.header' to '/etc/portage/package.use/package.use.override/package.use' ..."
	DOCKER_EXTRA_MOUNTS="${DOCKER_EXTRA_MOUNTS:+"${DOCKER_EXTRA_MOUNTS} "}--mount type=bind,source=${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/package.use.header,destination=/etc/portage/package.use.override/package.use${docker_readonly:+",${docker_readonly}"}"
else
	note "No 'package.use' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/'"
fi

export DOCKER_EXTRA_MOUNTS

images="$( $docker image list --noheading "${container_prefix}-${package_name}:${package_version}" 2>&1 )"
if echo "${images:-}" | grep -q -- "${container_prefix}-${package_name}\s\+${package_version}\s"; then
	output >&2
	output >&2 " ${blue}*${reset} Re-using existing '${package_name}:${package_version}' root image ..."
else
	output >&2
	output >&2 " ${blue}*${reset} Building '${package_name}:${package_version}' root image ..."
	output >&2

	trap '' INT
	$docker container stop "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -v 'no such container' || :
	$docker container rm --volumes "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -Fv -- 'no such container' || :
	trap - INT

	# Remove glibc dependencies on gzip, grep, awk...
	#build_use="${USE:+"${USE} "}compile-locales minimal ssp timezone-tools"

	# shadow needed for /sbin/nologin; coreutils needed for chmod
	# shellcheck disable=SC2089
	if [[ -n "${L10N:-}" ]]; then
		DOCKER_CMD_VARS="--env L10N=\"${L10N}\""
	fi
	# shellcheck disable=SC2090
	export DOCKER_CMD_VARS

	args=()
	for arg in pre_remove force_python pre_pkgs pre_use with_use post_pkgs \
			post_use rebuild post_remove
	do
		# shellcheck disable=2206,SC2191
		[[ -n "${!arg:-}" ]] && args+=( --${arg//_/-}="${!arg}" )
	done
	args+=( --depclean --depclean-exclude="${pre_pkgs} ${extra_pkgs}" )
	[[ -n "${post_remove:-}" ]] && args+=( --post-remove="${post_remove}" )
	args+=(  # <- Syntax
			--no-package-use
			--usepkg=y
			--with-bdeps=n
			--with-bdeps-auto=n
		"=${package}${repo:+"::${repo}"}"
		sys-libs/glibc
	)
	if [[ -n "${extra_pkgs:-}" ]]; then
		declare -a additional_args=()
		read -r -a additional_args <<<"${extra_pkgs}"
		args+=( "${additional_args[@]}" )
		unset additional_args
	fi

			ROOT="/service" \
			name="${container_prefix}-${container_name}" \
			image="${IMAGE}" \
	docker_run "${args[@]}" 2>&1 |
		tee "log/docker.${container_prefix}.${alt_log:-"${container_name}"}.log"
	rc=${?}
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1

	# podman is fragile :(
	#
	# ... more to the point, if we use 'buildah commit --squash' here then the
	# next-stage build fails after the ROOT filesystem contents have been
	# copied across when running 'test -s /usr/libexec/environment.sh'!?
	trap '' INT
	$docker container commit \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 |
		tee -a "log/docker.${container_prefix}.${alt_log:-"${container_name}"}.log"
	rc=${?}
	trap - INT
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1
fi
unset images

trap '' INT
$docker container rm --volumes "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -Fv -- 'no such container' || :
trap - INT

cd "${base_dir}" || die "chdir() to '${base_dir}' failed: ${?}"

case "${package_name}" in
	*zxtm*)
		file='Dockerfile.zxtm.service'
		;;
	*)
		file='Dockerfile.service'
		;;
esac
dockerfile_tmp="$( mktemp --tmpdir 'Dockerfile.service.XXXXXXXX' )" ||
	die "mktemp() failed: ${?}"
exposedports=''
for port in ${ports:-}; do
	exposedports+="${exposedports:+"\\n"}EXPOSE ${port}"
done
awk -v p="${exposedports}" '{ gsub( "^EXPOSE .*$", p ) ; print ; }' <"${file}" >"${dockerfile_tmp}"
unset exposedports

output >&2
output >&2 " ${blue}*${reset} Building ${package_name}:${package_version} (${container_cmd}) service image ..."
output >&2

args=()
args+=(
	--build-arg SET_TERM="${TERM}"
)
[[ -n "${ZEUSHOME:-}" ]] && args+=( --build-arg ZEUSHOME="${ZEUSHOME}" )
[[ -n "${environment_file:-}" ]] && args+=( --build-arg environment_file="${environment_file}" )
args+=(
	--build-arg environment_filter="${environment_filter}"
	--build-arg image_name="${container_prefix}-${package_name}"
	--build-arg service_cmd="${container_cmd}"
)
[[ -n "${container_cwd:-}" ]] && args+=( --build-arg service_cwd="${container_cwd}" )
[[ -n "${fs_name:-}" ]] && args+=( --build-arg service_fs_name="${fs_name}" )
args+=(
	--build-arg service_group="${group}"
	--build-arg service_name="${package_name/.//}"
	--build-arg service_name_short="${package_name#*.}"
	--build-arg service_ports="${ports}"
	--build-arg service_user="${user}"
	--build-arg service_version="${package_version}"
	--build-arg smtp_domain="${mail_domain}"
	--build-arg smtp_smarthost="${mail_mta}"
	--build-arg CHOST="${chost}"
)
[[ -n "${zxtm_service_version:-}" ]] && args+=( --build-arg zxtm_service_version="${zxtm_service_version}" )
args+=(
	--compress
	--file "${dockerfile_tmp}"
	--squash-all
	--tag "service.${package_name}:${package_version}"
	#--network slirp4netns
)

# With the addition of the '--squash-all' parameter, the 'build' image is
# re-squashed when 'gentoo-build'-svc.docker invokes 'Dockerfile.*service' to
# produce the service-container image.
#
# shellcheck disable=SC2001  # POSIX sh compatibility
$docker ${IMAGE_ROOT:+"--storage-opt='' --root '${IMAGE_ROOT}'"} \
		image build "${args[@]}" . 2>&1 |
	tee "../log/docker.service.${alt_log:-"${container_name}"}.log"
rc=${?}
rm "${dockerfile_tmp}"
unset dockerfile_tmp
output " -> ${rc}"

if [ $(( ${rc:-1} )) -eq 0 ]; then
	trap '' INT
	$docker image rm "${container_prefix}-${package_name}:${package_version}" 2>/dev/null || :
	case "${package_name}" in
		*eix*)
			$docker image tag "service.${package_name}:${package_version}" 'gentoo-helper:latest'
			;;
	esac
	trap - INT
fi

#set +o xtrace

exit ${rc}

# vi: set colorcolumn=80 syntax=bash:
