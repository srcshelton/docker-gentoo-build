#! /usr/bin/env bash

declare trace="${TRACE:-}"
# shellcheck disable=SC2034
#declare debug="${DEBUG:-}"

set -eu
set -o pipefail

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

#(( trace )) && set -o xtrace

# Set in vars.sh
#
#declare build_name=''
#declare base_dir=''
#declare use_essential=''
#declare use_essential_gcc=''
#declare python_default_target=''

# Set in run.sh
#
#declare docker='docker'
#declare docker_readonly=''
#declare environment_file=''
#declare environment_filter=''
#
#declare red=''
#declare blue=''
#declare reset=''

# Redefined by common/local.sh, sourced by common/vars.sh
#declare mail_domain='localhost'
#declare mail_mta='localhost'

# shellcheck disable=SC1091
[[ ! -s common/vars.sh ]] || . common/vars.sh
# shellcheck disable=SC2034 # Set from common/vars.sh
[[ -n "${__COMMON_VARS_INCLUDED:-}" ]] || {
	echo >&2 'FATAL: Inclusion of common defaults failed'
	exit 1
}

# shellcheck disable=SC2154
declare IMAGE="${build_name}:latest"

# shellcheck disable=SC1091
[[ -s common/run.sh ]] && . common/run.sh >/dev/null
if [[ "$( type -t 'die' )" != 'function' ]]; then
	echo >&2 "FATAL: Unable to source shared functions from" \
		"'common/run.sh': ${?}"
	exit 127
fi

declare -a services=() args=()
services=(
	bitlbee
	captive-portal
	dcc
	dhcpd
	distccd
	dovecot
	fetchmail
	fwupd
	hpl
	imapproxyd
	irqbalance
	kea
	less
	lighttpd
	lynis
	man
	mariadb
	memcached
	metalog
	named
	netdata
	opendkim
	opendmarc
	openntpd
	php
	php73
	php74
	# Gentoo no longer supports <php-8.2 ...
	#php80
	#php81
	php82
	#php83
	pinfo
	postfix
	postgrey
	pound
	powertop
	privoxy
	redis
	spamassassin
	spamassassin-update
	spampd
	subversion
	syslog-ng
	unifi
	unifi60
	unifi61
	unifi62
	unifi64
	unifi65
	unifi70
	unifi71
	unifi72
	unifi73
	unifi74
	unifi75
	unifi80
	unifi81
	unifi82
	unifi83
	unifi84
	unifi85
	unifi86
	vim
	watchdog
	xmrig
	zxtm
)
declare -i installed=0
declare -i tools=0
declare -i all=0
declare -i rebuildpkgs=0
declare force=''
declare build_debug=''
declare alt_log=''
declare arg=''

declare cflags='' cxxflags=''

if type -pf emerge >/dev/null 2>&1; then
	cflags="$( # <- Syntax
			emerge --info 2>&1 |
				grep -- '^CFLAGS=' |
				awk -F'"' '{print $2}' || :
		)"
	cxxflags="$( # <- Syntax
			emerge --info 2>&1 |
				grep -- '^CXXFLAGS=' |
				awk -F'"' '{print $2}' || :
		)"
else
	# If we don't have 'emerge', then we likely lack the profile default
	# value for LDFLAGS, which isn't overridden.  We'll also lack any
	# -march/-mcpu flags, as these are added by the build system in
	# containers only.
	#
	eval "$(
		# shellcheck disable=SC2034
		[[ -n "${LDFLAGS:-}" ]] || case "${arch}" in
			amd64|ppc64|x86)
				LDFLAGS='-Wl,-O1 -Wl,--as-needed -Wl,-z,pack-relative-relocs'
				;;
			*)
				LDFLAGS='-Wl,-O1 -Wl,--as-needed'
				;;
		esac
		[[ -n "${ARCH:-}" ]] || ARCH="${arch}"
		. /etc/portage/make.conf 2>&1
		set |
			grep -F -- 'FLAGS=' |
			sed 's|^[A-Z]\+=|\L&| ; s|$|;|' |
			grep -E -- '^c(xx)?flags='
	)"
fi
[[ -n "${cflags:-}" ]] || cflags='-O2 -pipe'
[[ -n "${cxxflags:-}" ]] || cxxflags="${cflags}"
print "Found CFLAGS '${cflags}', CXXFLAGS '${cxxflags}'"

# Temporarily throw away all other arguments to try to get a set of parameters
# we can use to perform a manual service build (... which is largely deprecated
# at this point)
#
args=( ${@+"${@}"} )
set --
for arg in "${args[@]:-}"; do
	case "${arg}" in
		-*)
			continue
			;;
		tools|installed|all)
			# We can't auto-detect the presence of 'less' or 'distcc'...
			set -- ${@+"${@}"} 'sys-apps/less' 'sys-devel/distcc'
			;;
		*)
			set -- ${@+"${@}"} "${arg}"
			;;
	esac
done
unset arg

declare service="${1:-}"
declare original_service="${service:-}"
declare ports="${2:-"0"}"
declare user="${3:-"root"}"
declare group="${4:-"root"}"
declare container_cmd="${5:-}"
declare container_cwd="${6:-"/"}" # Optional
declare fs_name="${7:-}" # Optional: If set create /var/{run,log}/${fs_name} in container
#
# Restore our original arguments again
#
set -- "${args[@]:-}"

declare zxtm_service_version=''
declare -i rc=0
declare -a container_caps=()

usage() {
	#output >&2 "Usage: $( basename "${0}" ) <service" \
	#	'[<ports> <user> <group> <command> [directory [fs_name]]]|--services' \
	#	'<service> [service...]> [--rebuild] [--force] [--force-keywords]' \
	#	'[--debug]'
	output >&2 "Usage: $( basename "${0}" ) <service>" \
		'[<ports> <user> <group> <command> [directory [fs_name]]]'
	output >&2 "Usage: $( basename "${0}" ) --services" \
		'<service> [service...] [--rebuild] [--force] [--force-keywords]' \
		'[--debug]'
	output >&2
	output >&2 'Known services:'
	s=''
	for s in "${services[@]:-}"; do
		output >&2 "  ${s}"
	done
	unset s

	output >&2
	output >&2 '  tools'
	output >&2 '  installed'
	output >&2 '  all'
	output >&2
} # usage

if [[ -z "${*:-}" ]] || grep -Eq -- ' -(h|-help) ' <<<" ${*:-} "; then
	usage
	if [[ -z "${*:-}" ]]; then
		exit 1
	else
		exit 0
	fi
fi

# Support 'core' user for podman+machine Fedora default user...
if [[ "$( uname -s )" == 'Darwin' ]]; then
	if (( EUID )) && [[ "$( id -nu )" == 'core' ]]; then
		die "Please re-run '$( basename "${0}" )' as user 'root'"
	fi
fi

declare arg=''
declare service_list=''
for arg in "${@:-}"; do
	shift
	case "${arg:-}" in
		-a|--all|all)
			service=''
			all=1
			;;
		-d|--debug)
			build_debug=1
			;;
		-f|--force)
			force=1
			;;
		-i|--installed|installed)
			service=''
			installed=1
			;;
		-k|--force-keywords)
			FORCE_KEYWORDS=1
			export FORCE_KEYWORDS
			;;
		-r|--rebuild)
			rebuildpkgs=1
			;;
		-s|--services)
			service_list=1
			;;
		-t|--tools|tools)
			tools=1
			;;
		'')
			:
			;;
		*)
			set -- ${@+"${@}"} "${arg}"
			;;
	esac
done
unset arg


# BEGIN WRAPPER CODE
#
# All we're doing here is figuring out the arguments to re-invoke ourselves
# with!
#

if (( all && installed )); then
	warn "options 'all' and 'installed' are mutually exclusive - using 'all'"
	installed=0
fi

if (( installed )); then
	service_list=1

	# shellcheck disable=SC2046  # We want word-splitting here...
	set -- "${@}" $( xargs -n 1 echo <<<"$( # <- Syntax
		# Build list based on installed packages... (useful if the local image
		# cache has been cleared!)
		#
		[[ -d /var/db/pkg/container ]] && find /var/db/pkg/container/ \
				-mindepth 2 -maxdepth 2 -type f -name CONTENTS -print |
			awk -F '/' 'NF-1 { print $(NF-1) }' |
			sed \
				-e 's/^php-\([0-9]\).\([0-9]\)\(.*\)$/php\1\2-\1.\2\3/g' \
				-e 's/^unifi\(-controller\(-bin\)\?\)\?-\([0-9]\).\([0-9]\)\(.*\)$/unifi\3\4-\3.\4\5/g' |
			sed -r 's/-[0-9][0-9.]*(_p[0-9]+)?(-r[0-9]+)?//'

		# Build list based on present images...
		#
		docker image list --noheading --sort repository \
				--format '{{.Repository}}-{{.Tag}}' 'localhost/service.' |
			grep -vx -- 'localhost/service.www-servers.web-content-latest' |
			cut -d'.' -f 3- |
			sed \
				-e 's/^php-\([0-9]\).\([0-9]\)\(.*\)$/php\1\2-\1.\2\3/g' \
				-e 's/^unifi\(-controller\(-bin\)\?\)\?-\([0-9]\).\([0-9]\)\(.*\)$/unifi\3\4-\3.\4\5/g' |
			sed -r 's/-[0-9][0-9.]*(_p[0-9]+)?(-r[0-9]+)?//'
	)" | sort | uniq )
fi

if (( tools )); then
	service_list=1
	set -- "${@}" 'distcc' 'less' 'lynis' 'man' 'pinfo' 'powertop' 'vim' # 'fwupd'
fi

for arg in "${@:-}"; do
	shift
	case "${arg:-}" in
		# In some cases, the package name and service name differ :(
		bind)
			set -- "${@}" 'named'
			;;
		dhcp)
			set -- "${@}" 'dhcpd'
			;;
		distcc)
			set -- "${@}" 'distccd'
			;;
		imapproxy)
			set -- "${@}" 'imapproxyd'
			;;
		man-db)
			set -- "${@}" 'man'
			;;
		spamd|spamassassin*)
			# The idea here is to ensure that if spamassassin is rebuilt, then
			# so is spamassassin's updater...
			if ! grep -Eq -- ' spam(d|assassin) ' <<<" ${*:-} "; then
				set -- "${@}" 'spamassassin'
			fi
			if ! grep -q -- ' spamassassin-update ' <<<" ${*:-} "; then
				set -- "${@}" 'spamassassin-update'
			fi
			;;
		unifi-controller|unifi-controller-bin)
			set -- "${@}" 'unifi'
			;;
		web-content)
			:
			;;
		'')
			:
			;;
		*)
			set -- "${@}" "${arg}"
			;;
	esac
done
unset arg

if (( service_list )); then
	list=''
	for arg in "${@:-}"; do
		if grep -wq -- "${arg}" <<<" ${services[*]:-} "; then
			list="${list:+"${list} "}${arg}"
		else
			error "Service '${arg}' not known"
			rc=1
		fi
	done
	unset arg
	(( rc )) && die 'Unable to process service list'

	# This logic isn't great - if we're given a (reduced) service list, then we
	# replace the master list of services with the specified set but then still
	# process what we believe to be all services (as a result) with the 'all'
	# logic :|
	#
	IFS=' ' read -r -a services <<<"${list:-}"
	service=''
	all=1
else
	# 'ports' pattern is '([1-9][0-9]{0-4}(/(tc|ud)p)?) +'
	if grep -q -- '[^0-9,/tcpud]' <<<"${ports}"; then
		output >&2 "FATAL: Illegal value '${ports}' for 'ports' argument of" \
			'component-based assembly'
		output >&2
		usage
		exit 1
	fi
fi

if (( all )); then
	# Prevent recursion on 'all'...
	if ! [[ "${service:-}" == 'all' ]]; then
		declare -i c=0
		declare s='' f=''
		for s in "${services[@]:-}"; do
			output >&2
			# shellcheck disable=SC2154
			output >&2 " ${red}*${reset} Examining service '${s}'" \
				"[${c}/${#services[@]}:${rc}] ..."
			output >&2

			: $(( c++ ))

			# Call ourself for each service in turn...
			print "Re-invoking script as './$( basename "${0}" ) ${s}${rebuildpkgs:+" --rebuild"}${force:+" --force"}${FORCE_KEYWORDS:+" --force-keywords"}'"
			./"$( basename "${0}" )" "${s}" ${rebuildpkgs:+"--rebuild"} ${force:+"--force"} ${FORCE_KEYWORDS:+"--force-keywords"} || {
				: $(( rc++ ))
				f="${f:+"${f} "}${s}"
			}
			sleep 0.1 2>/dev/null || sleep 1
		done
		unset s

		if (( rc )); then
			warn "${rc} out of ${c} services failed to build:"
			warn "Failed service builds: ${f}"
		fi
		# shellcheck disable=SC2086
		exit ${rc}
	fi
fi

#
# END WRAPPER CODE

#replace_flags() {
#	# Moved to common/run.sh!
#} # replace_flags

[ -n "${trace:-}" ] && set -o xtrace

images="$( docker image list --noheading "${IMAGE%":"*}" 2>&1 )"
if ! echo "${images}" | grep -Eq -- "^(localhost/)?${IMAGE%":"*}"; then
	die "svc stage: docker image '${IMAGE%":"*}' not found"
fi
unset images

_docker_setup

case "${service:-}" in
	bitlbee)
		service='>=net-im/bitlbee-3.6-r1' ;;
	captive-portal)
		# This ebuild lives in a private repo unless/until refactored at some
		# future date to remote internal network, email, and user references...
		service='www-servers/captive-portal' ;;
	dcc)
		service='mail-filter/dcc' ;;
	dhcp|dhcpd)
		service='net-misc/dhcp' ;;
	distcc|distccd)
		service='sys-devel/distcc' ;;
	dovecot)
		service='net-mail/dovecot' ;;
	eix)
		service='app-portage/eix' ;;
	fetchmail)
		service='net-mail/fetchmail' ;;
	fwupd)
		service='sys-apps/fwupd' ;;
	hpl)
		service='sys-cluster/hpl' ;;
	imapproxy|imapproxyd)
		service='>=net-mail/imapproxy-1.2.8_p14637::srcshelton' ;;
	irqbalance)
		service='sys-apps/irqbalance' ;;
	kea)
		service='net-misc/kea' ;;
	less)
		# Launcher loads running services' /usr/share/doc volumes
		service='sys-apps/less' ;;
	lighttp|lighttpd)
		service='www-servers/lighttpd' ;;
	lynis)
		service='app-forensics/lynis' ;;
	man|man-db)
		# Launcher loads running services' /usr/share/man volumes
		service='sys-apps/man-db' ;;
	memcache|memcached)
		service='net-misc/memcached' ;;
	metalog)
		service='app-admin/metalog::container' ;;
	mysql|mysqld|mariadb)
		service='dev-db/mariadb' ;;
	named|bind)
		#service='>=net-dns/bind-9.14.12::container'
		service='>=net-dns/bind-9.16.6' ;;
	netdata)
		service='net-analyzer/netdata' ;;
	ntpd|openntpd)
		#service='>=net-misc/openntpd-6.8_p1::container' ;;  # turns out, it's broken :(
		service='net-misc/openntpd::container' ;;
	opendkim)
		service='>=mail-filter/opendkim-2.10.3-r3' ;;
	opendmarc)
		service='mail-filter/opendmarc' ;;
	php)
		service='dev-lang/php' ;;
	php73)
		service='=dev-lang/php-7.3*' ;;
	php74)
		service='=dev-lang/php-7.4*' ;;
	# Gentoo no longer supports <php-8.2 ...
	#php80)
	#	service='=dev-lang/php-8.0*' ;;
	#php81)
	#	service='=dev-lang/php-8.1*' ;;
	php82)
		service='=dev-lang/php-8.2*' ;;
	#php83)
	#	service='=dev-lang/php-8.3*' ;;
	pinfo|info)
		# Launcher loads running services' /usr/share/info volumes
		service='app-text/pinfo' ;;
	postfix)
		service='mail-mta/postfix' ;;
	postgrey|postgray)
		#service='mail-filter/postgrey::container'  # 1.36-r1 and prior didn't use account packages
		service='mail-filter/postgrey' ;;
	pound)
		service='www-servers/pound' ;;
	powertop)
		service='sys-power/powertop' ;;
	privoxy)
		service='net-proxy/privoxy' ;;
	redis)
		service='dev-db/redis' ;;
	spamassassin|spamd)
		service='>=mail-filter/spamassassin-3.4.4-r1::srcshelton' ;;
	spamassassin-update|sa-update)
		service='>=mail-filter/spamassassin-3.4.4-r1::srcshelton' ;;
	spampd)
		service='mail-filter/spampd' ;;
	svn|svnserve|subversion)
		service='dev-vcs/subversion' ;;
	syslog-ng)
		service='app-admin/syslog-ng' ;;
	unifi|unifi-controller|unifi-controller-bin)
		service='net-misc/unifi-controller-bin' ;;
	unifi60|unifi-controller60|unifi-controller-60|unifi-controller-bin60|unifi-controller-bin-60)
		service='=net-misc/unifi-controller-bin-6.0*' ;;
	unifi61|unifi-controller61|unifi-controller-61|unifi-controller-bin61|unifi-controller-bin-61)
		service='=net-misc/unifi-controller-bin-6.1*' ;;
	unifi62|unifi-controller62|unifi-controller-62|unifi-controller-bin62|unifi-controller-bin-62)
		service='=net-misc/unifi-controller-bin-6.2*' ;;
	unifi64|unifi-controller64|unifi-controller-64|unifi-controller-bin64|unifi-controller-bin-64)
		service='=net-misc/unifi-controller-bin-6.4*' ;;
	unifi65|unifi-controller65|unifi-controller-65|unifi-controller-bin65|unifi-controller-bin-65)
		service='=net-misc/unifi-controller-bin-6.5*' ;;
	unifi70|unifi-controller70|unifi-controller-70|unifi-controller-bin70|unifi-controller-bin-70)
		service='=net-misc/unifi-controller-bin-7.0*' ;;
	unifi71|unifi-controller71|unifi-controller-71|unifi-controller-bin71|unifi-controller-bin-71)
		service='=net-misc/unifi-controller-bin-7.1*' ;;
	unifi72|unifi-controller72|unifi-controller-72|unifi-controller-bin72|unifi-controller-bin-72)
		service='=net-misc/unifi-controller-bin-7.2*' ;;
	unifi73|unifi-controller73|unifi-controller-73|unifi-controller-bin73|unifi-controller-bin-73)
		service='=net-misc/unifi-controller-bin-7.3*' ;;
	unifi74|unifi-controller74|unifi-controller-74|unifi-controller-bin74|unifi-controller-bin-74)
		service='=net-misc/unifi-controller-bin-7.4*' ;;
	unifi75|unifi-controller75|unifi-controller-75|unifi-controller-bin75|unifi-controller-bin-75)
		service='=net-misc/unifi-controller-bin-7.5*' ;;
	unifi80|unifi-controller80|unifi-controller-80|unifi-controller-bin80|unifi-controller-bin-80)
		service='=net-misc/unifi-controller-bin-8.0*' ;;
	unifi81|unifi-controller81|unifi-controller-81|unifi-controller-bin81|unifi-controller-bin-81)
		service='=net-misc/unifi-controller-bin-8.1*' ;;
	unifi82|unifi-controller82|unifi-controller-82|unifi-controller-bin82|unifi-controller-bin-82)
		service='=net-misc/unifi-controller-bin-8.2*' ;;
	unifi83|unifi-controller83|unifi-controller-83|unifi-controller-bin83|unifi-controller-bin-83)
		service='=net-misc/unifi-controller-bin-8.3*' ;;
	unifi84|unifi-controller84|unifi-controller-84|unifi-controller-bin84|unifi-controller-bin-84)
		service='=net-misc/unifi-controller-bin-8.4*' ;;
	unifi85|unifi-controller85|unifi-controller-85|unifi-controller-bin85|unifi-controller-bin-85)
		service='=net-misc/unifi-controller-bin-8.5*' ;;
	unifi86|unifi-controller86|unifi-controller-86|unifi-controller-bin86|unifi-controller-bin-86)
		service='=net-misc/unifi-controller-bin-8.6*' ;;
	vim|vi)
		# Launcher loads running services' /usr/share/doc volumes
		service='app-editors/vim' ;;
	watchdog)
		service='sys-apps/watchdog' ;;
	xmrig)
		service='net-misc/xmrig' ;;
	zxtm)
		# The Docker Registry API documenation describes a default page_size of
		# 10 with a maximum of 1000 results, although a practical limit of 100
		# has been reported.
		# There are no details of how the tag-list is sorted into pages, but
		# the list appears to be sorted most-recently-changed first...
		zxtm_service_version="$( # <- Syntax
			curl -Ls 'https://registry.hub.docker.com/v2/repositories/pulsesecure/vtm/tags' |
				jq -r '.results[].name' |
				grep -v -- 'latest' |
				sort -V |
				tail -n 1
		)"

		service="net-misc/zxtm-init-scripts-${zxtm_service_version/[Rr]/-r}"
		;;
	'')
		die 'No service name or description provided' ;;
	*)
		info "Building manually-specified service '${service}'" ;;
esac

package=''
package_name=''
package_version=''
repo=''
container_name=''
container_prefix='buildsvc'
_docker_resolve "${service%"::"*}" "${container_prefix}"
# shellcheck disable=SC2001 # POSIX sh compatibility
container_name="$( echo "${package}" | sed 's|/|.|' )"
# shellcheck disable=SC2001 # POSIX sh compatibility
package_name="$( echo "${package_name}" | sed 's|/|.|' )"
keep_base='yes'

case "${package_name}" in
	'net-misc.zxtm-init-scripts')
		package_name='net-misc.zxtm' ;;
	'mail-filter.spamassassin')
		if [ "${original_service}" = 'spamassassin-update' ] || [  "${original_service}" = 'sa-update' ]; then
			pkgname='mail-filter.spamassassin-update'
			alt_log="${pkgname}${container_name#"${package_name}"}"
			package_name="${pkgname}"
			unset pkgname
		fi
		;;
esac
export container_name package_name
echo "${service}" | grep -Fq -- '::' && repo="${service#*"::"}"

if [ "${container_name}" = 'podman' ]; then
	die "Suspicious container name '${container_name}'"
else
	print "Using container name '${container_name}'"
fi

if [ -z "${package_name:-}" ]; then
	die "Cannot extract package name from service name '${service}' (${package})"
fi
if [ -z "${package_version:-}" ]; then
	die "Cannot extract package version from service name '${service}' (${package})"
fi

if [ $(( ${force:-"0"} )) -eq 0 ]; then
	images="$( docker image list --noheading "service.${package_name}:${package_version}" 2>&1 )"
	if echo "${images:-}" | grep -q -- "service.${package_name}\s\+${package_version}\s"; then
		note "Docker image 'service.${package_name}:${package_version}' already exists - remove or use --force to rebuild"
		exit 0
	else
		output "Creating new 'service.${package_name}:${package_version}' image ..."
	fi
	unset images
else
	warn "Forcing creation of new 'service.${package_name}:${package_version}' image ..."
fi

# ... from common/vars.sh:
#use_essential="asm ipv6 perl_features_ithreads ktls mdev multiarch native-extensions split-usr ssp threads$ ${use_cpu_flags:-}
#use_essential_gcc='default-stack-clash-protection default-znow graphite -jit nptl openmp pch pie -sanitize ssp -vtv zstd'

force_python=''
pre_remove='' pre_pkgs='' pre_use=''
with_use='' extra_pkgs=''
post_pkgs='' post_use='' post_remove=''
gcc_extra_use_flags='pch'  # N.B. 'pch' now masked due to fragility...
python_target='' etcdir=''

# There's probably a better way of doing this, but for now let's assume that
# the python configuration for the root system and the python confguration for
# the container build environment is the same (... which is reasonable, unless
# overridden, as they share a common portage tree and therefore base set of
# python defaults).
if type -pf portageq >/dev/null 2>&1; then
	python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"
	case "${original_service:-}" in
		php[0-9][0-9])
			php_targets="${original_service%[0-9]}-${original_service#"php"[0-9]}"
			;;
		*)
			php_targets="$( for t in $( portageq envvar 'PHP_TARGETS' ); do echo "php_targets_${t}"; done | sort -V | tail -n 1 )"
			;;
	esac
else
	# shellcheck disable=SC2154
	python_single_target="${python_default_target##*" "}"
	python_target="${python_single_target:-"${python_default_target}"}"
	case "${original_service:-}" in
		php[0-9][0-9])
			php_targets="${original_service%[0-9]}-${original_service#"php"[0-9]}"
			;;
		*)
			# FIXME: Hard-coded
			php_targets='php_targets_php8-2'
			;;
	esac
fi
print "Building for python version '${python_target}'"
print "Building for PHP versions '${php_targets}'"

case "${package_name}" in
	*.bind)
		output "Setting build variables for package 'bind' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/named acct-user/named'
		extra_pkgs='app-alternatives/bc dev-lang/perl sys-apps/coreutils sys-apps/file sys-apps/gentoo-functions'
		extra_pkgs+=' app-shells/bash sys-devel/bc'

		ports='53/tcp 53/udp 853/tcp 953/tcp 8053/tcp'
		container_cmd='/usr/sbin/named'
		etcdir='bind'
		;;
	*.bitlbee)
		output "Setting build variables for package 'bitlbee' ..."
		pre_pkgs='acct-group/bitlbee acct-user/bitlbee'

		ports='6667/tcp'
		user='bitlbee'
		group='bitlbee'
		container_cmd='/usr/sbin/bitlbee'
		container_cwd='/var/lib/bitlbee'
		etcdir='bitlbee'
		;;
	*.captive-portal)
		output "Setting build variables for private package 'captive-portal' ..."

		ports='8088/tcp'
		#user='root'
		#group='root'
		container_cmd='/usr/local/sbin/shttpd.pl'
		container_cwd='/var/lib/shttpd'
		etcdir='iptables.d'
		;;
	*.dcc)
		output "Setting build variables for package 'dcc' ..."
		extra_pkgs='sys-apps/findutils'

		ports='6276/udp 6276/tcp 6277/udp 6277/tcp'
		container_cmd='/etc/init.d/dcc'
		etcdir='dcc'
		;;
	*.dhcp)
		output "Setting build variables for package 'dhcp' ..."
		pre_pkgs='acct-group/dhcp acct-user/dhcp'

		ports='67/udp 68/udp 647/tcp 7911/tcp'
		#user='dhcp'
		#group='dhcp'
		container_cmd='/usr/sbin/dhcpd'
		etcdir='dhcp'
		;;
	*.distcc)
		output "Setting build variables for package 'distcc' ..."
		pre_pkgs='acct-group/distcc acct-user/distcc'
		extra_pkgs='dev-lang/python'

		ports='3632/tcp 3635/tcp 3636/tcp'
		#user='distcc'
		#group='distcc'
		container_cmd='/usr/bin/distccd'
		etcdir='distcc'
		;;
	*.dovecot)
		output "Setting build variables for package 'dovecot' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/dovecot acct-group/dovenull acct-group/mail acct-user/dovecot acct-user/dovenull acct-user/mail acct-user/postmaster'
		extra_pkgs='app-shells/bash'

		ports='143/tcp 993/tcp 24242/tcp'
		container_cmd='/usr/sbin/dovecot'
		etcdir='dovecot'
		;;
	*.eix)
		output 'Setting build variables for non-native tools ...'
		force_python="${python_target}"
		#pre_use="-* build minimal python_single_target_${python_target} python_targets_${python_target} symlink xml"
		pre_pkgs='dev-lang/python dev-lang/python-exec sys-devel/gcc virtual/linux-sources'
		#with_use="${pre_use}"
		extra_pkgs='app-eselect/eselect-python app-portage/gentoolkit'

		# This container must be able to be invoked as 'versionsort' or 'equery'...
		container_cmd='/usr/bin/versionsort'
		;;
	*.fetchmail)
		output "Setting build variables for packages 'fetchmail', 'procmail', and 'postfix' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/mail acct-user/mail acct-user/postmaster'
		extra_pkgs='mail-filter/procmail net-mail/dovecot dev-lang/perl'
		extra_pkgs+=' app-shells/bash'

		container_cmd='/usr/bin/fetchmail'
		;;
	*.fwupd)
		output "Setting build variables for package 'fwupd' ..."
		pre_remove='sys-libs/libeudev'
		pre_pkgs='sys-devel/gcc'
		keep_base='no'

		container_cmd='/usr/bin/fwupdtool'
		etcdir='fwupd'
		;;
	*.hpl)
		output "Setting build variables for package 'hpl' ..."
		pre_use='fortran graphite openmp'
		pre_pkgs='dev-libs/isl sys-devel/gcc sys-devel/gcc-config'
		with_use="${pre_use}"
		extra_pkgs="${pre_pkgs}
			app-shells/bash
			dev-debug/strace
			sci-libs/blis
			sci-libs/openblas
			sys-apps/portage
			sys-cluster/mpich
			sys-devel/binutils
			sys-devel/binutils-config
			sys-kernel/linux-headers
			virtual/openssh
		"
		post_use="${pre_use} -lib-only graphite -nls"

		container_cmd='__wait__'
		;;
	*.imapproxy)
		output "Setting build variables for package 'imapproxy' ..."
		pre_pkgs='acct-group/nogroup'

		#ports='143/tcp'
		ports='8143/tcp'
		container_cmd='/usr/sbin/imapproxyd'
		etcdir='imapproxy'
		;;
	*.irqbalance)
		output "Setting build variables for package 'irqbalance' ..."
		pre_pkgs='sys-apps/help2man'

		container_cmd='/usr/sbin/irqbalance'
		;;
	*.kea)
		output "Setting build variables for package 'kea' ..."
		pre_pkgs='sys-devel/gcc'

		#ports='67/udp 68/udp 647/tcp 7911/tcp'
		#user='dhcp'
		#group='dhcp'
		container_caps=( # <- Syntax
			--cap-add NET_BIND_SERVICE
			--cap-add NET_RAW
		)
		container_cmd='/usr/sbin/kea-dhcp4'
		etcdir='kea'
		;;
	*.less)
		output "Setting build variables for package 'less' ..."
		extra_pkgs='app-text/lesspipe'

		container_cmd='/usr/bin/less'
		;;
	*.lighttpd)
		output "Setting build variables for package 'lighttpd' ..."
		# Gentoo no longer supports <php-8.2 ...
		#pre_pkgs='>=dev-lang/php-8.1 media-gfx/imagemagick sys-apps/help2man sys-devel/gcc'
		pre_pkgs='>=dev-lang/php-8.2 media-gfx/imagemagick sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/lighttpd acct-user/lighttpd'
		extra_pkgs='
			dev-lang/perl
			dev-perl/CGI
			dev-perl/IO-Socket-INET6
			dev-perl/IO-Socket-SSL
			dev-php/pecl-imagick
			mail-filter/dcc
			media-gfx/imagemagick
			sys-apps/findutils
		'
		extra_pkgs+=' app-shells/bash'

		if [[ "$( # <- Syntax
				printf '1.4.76\n%s' "${package_version:-}" |
				sort -V |
				head -n 1
		)" == '1.4.76' ]]; then
			output "Configuring '${package_name##*.}-${package_version:-}' for v1.4.76 or later ..."
		else
			output "Configuring '${package_name##*.}-${package_version:-}' for v1.4.75 or prior ..."
			pre_pkgs+=' app-admin/gamin virtual/fam'
			extra_pkgs+=' app-admin/gamin'
		fi

		#ports='80/tcp 443/tcp'
		ports='7080/tcp 7443/tcp'
		container_cmd='/usr/sbin/lighttpd'
		etcdir='lighttpd'
		;;
	*.lynis)
		output "Setting build variables for package 'lynis' ..."
		# 'srcshelton' repo relocates gawk to /bin/
		impl='::srcshelton'
		with_use='gawk'
		extra_pkgs="net-misc/openssh sys-apps/coreutils sys-apps/findutils sys-apps/gawk${impl:+"${impl}"} app-alternatives/awk${impl:+"${impl}"}"

		container_cmd='/usr/sbin/lynis'
		;;
	*.man-db)
		output "Setting build variables for package 'man-db' ..."
		pre_pkgs='sys-apps/help2man sys-apps/man-pages sys-apps/man-pages-posix sys-devel/gcc' # sys-libs/glibc'
		# sys-libs/timezone-data needed for man-page tools...
		extra_pkgs='app-text/manpager net-misc/rsync sys-apps/less' # sys-libs/glibc sys-libs/timezone-data'

		container_cmd='/usr/bin/man'
		;;
	*.mariadb)
		output "Setting build variables for package 'mariadb' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/hugetlb acct-group/mysql acct-user/mysql' # sys-libs/glibc'
		# app-shells/bash needed to run ebuild 'pkg_config' function within container (now from USE-flag to app-alternatives/sh)
		# sys-libs/glibc needed to provide locale data
		# sys-libs/timezone-data needed to provide time-zone data for new installations...
		extra_pkgs='dev-db/mysqltuner' # sys-libs/glibc sys-libs/timezone-data'
		extra_pkgs+=' app-shells/bash'

		ports='3306/tcp 4444/tcp 4567/tcp 4568/tcp' # 4444, 4567-8 for Galera SST
		user='mysql'
		group='mysql'
		container_cmd='/usr/sbin/mysqld'
		container_cwd='/var/lib/mysql'
		etcdir='mysql'
		;;
	*.memcached)
		output "Setting build variables for package 'memcached' ..."
		pre_pkgs='acct-group/hugetlb acct-group/memcached acct-user/memcached'

		container_cmd='/usr/bin/memcached'
		;;
	*.metalog)
		output "Setting build variables for package 'metalog' ..."

		ports='514/udp'
		container_cmd='/usr/sbin/metalog'
		etcdir='metalog'
		;;
	*.netdata)
		output "Setting build variables for package 'netdata' ..."
		pre_pkgs='acct-group/netdata acct-user/netdata'
		pre_pkgs+=' acct-group/cron acct-user/cron'
		pre_pkgs+=' acct-group/crontab'
		pre_pkgs+=' acct-group/dhcp acct-user/dhcp'
		pre_pkgs+=' acct-group/dovecot acct-group/dovenull acct-user/dovecot'
		pre_pkgs+=' acct-group/hugetlb'
		pre_pkgs+=' acct-group/ldap acct-user/ldap'
		pre_pkgs+=' acct-group/mail acct-user/mail'
		pre_pkgs+=' acct-group/mysql acct-user/mysql'
		pre_pkgs+=' acct-group/named acct-user/named'
		pre_pkgs+=' acct-group/netdata acct-user/netdata'
		pre_pkgs+=' acct-group/pcap acct-user/pcap'
		pre_pkgs+=' acct-group/podman'
		pre_pkgs+=' acct-group/postdrop'
		pre_pkgs+=' acct-group/postfix acct-user/postfix'
		pre_pkgs+=' acct-group/tty'
		pre_pkgs+=' acct-group/ulogd acct-user/ulogd'
		pre_pkgs+=' acct-group/wheel'
		pre_pkgs+=' acct-user/postmaster'
		# 'compile-locales' forces 'minimal', which breaks sys-apps/iproute2
		# dependency for net-firewall/firehol...
		#
		with_use='-timezone-tools' # compile-locales
		extra_pkgs='sys-apps/util-linux'
		# portage sometimes struggles to resolve apparently obvious
		# dependencies :(
		#
		pre_use='-timezone-tools'
		pre_pkgs+=' sys-libs/glibc'
		with_use+=' ncurses unicode zlib'
		extra_pkgs+=' dev-lang/python dev-libs/libpcre2 sys-libs/glibc'
		# nodejs links to libatomic, and so has an RDEPEND on sys-devel/gcc
		extra_pkgs+=' sys-devel/gcc'

		ports='19999/tcp'
		user='netdata'
		group='netdata'
		container_caps=( # <- Syntax
			--cap-add AUDIT_READ
			--cap-add CHOWN
			--cap-add DAC_OVERRIDE
			--cap-add DAC_READ_SEARCH
			--cap-add NET_ADMIN
			--cap-add NET_RAW
			--cap-add SETGID
			--cap-add SETUID
			--cap-add SYSLOG
			--cap-add SYS_ADMIN
			--cap-add SYS_PTRACE
		)
		container_cmd='/usr/sbin/netdata'
		container_cwd='/var/lib/netdata'
		etcdir='netdata'
		;;
	*.opendkim)
		output "Setting build variables for package 'opendkim' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc'
		pre_pkgs+=' acct-group/opendkim acct-user/opendkim'
		pre_pkgs+=' acct-group/dkimsocket acct-group/mail acct-group/milter'
		pre_pkgs+=' acct-group/unbound acct-user/unbound'
		extra_pkgs='sys-libs/readline'

		ports='8891/tcp'
		#user='opendkim'
		#group='opendkim'
		container_cmd='/usr/sbin/opendkim'
		#container_cmd='/usr/sbin/opendkim-reportstats'
		etcdir='opendkim'
		;;
	*.opendmarc)
		output "Setting build variables for package 'opendmarc' ..."
		pre_pkgs='sys-devel/gcc acct-group/milter acct-group/opendmarc acct-user/milter acct-user/opendmarc'

		ports='8893/tcp'
		#user='opendmarc'
		#group='opendmarc'
		container_cmd='/usr/sbin/opendmarc'
		#container_cmd='/usr/sbin/opendmarc-reportstats'
		etcdir='opendmarc'
		;;
	*.openntpd)
		output "Setting build variables for package 'openntpd' ..."

		pre_pkgs='acct-user/openntpd acct-user/openntpd'
		case "${package_version}" in
			6.[02]_p)
				# shellcheck disable=SC2034
				pre_remove='app-arch/libarchive dev-libs/openssl' # net-misc/wget'
				pre_use='-openssl libressl'
				force_python="${python_target}"
				pre_pkgs='dev-lang/python dev-libs/libressl dev-util/pkgconf sys-devel/gcc virtual/pkgconfig @system @world'
				with_use='-openssl libressl'
				;;
			*)
				# LibreSSL is now deprecated, so we don't need to jump through these hoops...
				extra_pkgs='app-misc/ca-certificates'
				:
				;;
		esac

		ports='123/udp'
		#user='openntpd'
		#group='openntpd'
		container_cmd='/usr/sbin/ntpd'
		container_cwd='/var/empty'
		etcdir='openntpd'
		fs_name='openntpd'
		;;
	*.php)
		LIB='lib64'
		case "${original_service:-}" in
			php[0-9][0-9])
				PHP_SLOT="${original_service%[0-9]}.${original_service#"php"[0-9]}"
				with_use="php_targets_php${PHP_SLOT/./-}"
				;;
			*)
				PHP_SLOT="$( for t in $( portageq envvar 'PHP_TARGETS' ); do echo "${t/-/.}"; done | sort -V | tail -n 1 )"
				;;
		esac
		output "Setting build variables for package 'php' ..."
		# eselect-php-0.9.6+ required for ROOT support
		pre_pkgs='media-gfx/imagemagick sys-apps/help2man sys-devel/gcc >=app-eselect/eselect-php-0.9.6'
		pre_pkgs+=' acct-group/lighttpd acct-user/lighttpd acct-group/nobody acct-group/mail'
		# Gentoo no longer supports <php-8.2
		# (and therefore <dev-php/pecl-memcache-8.2) ...
		#	>=dev-php/pecl-memcache-4
		extra_pkgs='
			>=dev-php/pecl-memcache-8.2
			dev-db/mysql-connector-c
			dev-php/pecl-imagick
			dev-php/pecl-redis
			dev-php/ZxcvbnPhp
			media-gfx/imagemagick
			net-misc/curl
			sys-apps/file
			sys-apps/gentoo-functions
			sys-apps/shadow
			virtual/mta
		'

		container_cmd="/usr/${LIB}/${PHP_SLOT}/bin/php-fpm"
		etcdir='php'
		;;
	*.pinfo)
		output "Setting build variables for package 'pinfo' ..."
		pre_pkgs='sys-apps/help2man'
		extra_pkgs='net-misc/rsync sys-apps/less sys-apps/texinfo sys-libs/ncurses'

		container_cmd='/usr/bin/pinfo'
		;;
	*.postfix)
		output "Setting build variables for package 'postfix' ..."
		# mail-filter/maildrop's BDEPEND/DEPEND isn't working :(
		pre_pkgs='
			sys-apps/help2man
			acct-group/hugetlb
			acct-group/postfix
			acct-user/memcached
			acct-user/postfix
			dev-build/automake
			dev-build/libtool
			dev-libs/libpcre
			net-dns/libidn
			net-libs/courier-unicode
			sys-devel/gcc
		'
		extra_pkgs='dev-libs/cyrus-sasl mail-filter/maildrop mail-filter/procmail net-mail/dovecot sys-apps/shadow'  # dovecot for lda
			# ... shadow as postfix user isn't getting its groups
		extra_pkgs+=' app-shells/bash'

		container_cmd='/usr/sbin/postfix'
		etcdir='postfix sasl2'
		;;
	*.postgrey)
		output "Setting build variables for package 'postgrey' ..."
		pre_pkgs='
			acct-group/dkimsocket
			acct-group/mail
			acct-group/milter
			acct-group/nogroup
			acct-group/postfix
			acct-group/postgrey
			acct-user/postfix
			acct-user/postgrey
		'

		container_cmd='/usr/sbin/postgrey'
		# Not a typo!
		etcdir='postfix'
		;;
	*.pound)
		output "Setting build variables for package 'pound' ..."

		#ports='8888/tcp'
		container_cmd='/usr/sbin/pound'
		etcdir='pound'
		;;
	*.powertop)
		output "Setting build variables for package 'powertop' ..."
		pre_pkgs='sys-devel/gcc'
		extra_pkgs='x11-apps/xset'

		container_cmd='/usr/sbin/powertop'
		# Container requires '--privileged' to operate, data in /var/cache/powertop/
		;;
	*.privoxy)
		output "Setting build variables for package 'privoxy' ..."
		pre_pkgs='acct-group/privoxy acct-user/privoxy'

		ports='8118/tcp'
		container_cmd='/usr/sbin/privoxy'
		etcdir='privoxy'
		;;
	*.redis)
		output "Setting build variables for package 'redis' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/hugetlb acct-group/redis acct-user/redis'

		ports='6379/tcp 26379/tcp'
		user='redis'
		group='redis'
		container_cmd='/usr/sbin/redis-server'
		container_cwd='/var/lib/redis'
		etcdir='redis'
		;;
	*.spamassassin|*.spamassassin-update)
		pre_pkgs='sys-apps/help2man acct-group/spamd acct-user/spamd'
		if [ "${original_service}" = 'spamassassin-update' ] || [ "${original_service}" = 'sa-update' ]; then
			output "Setting build variables for package 'spamassassin-update' ..."
			# 'srcshelton' repo relocates gawk to /bin/
			impl='::srcshelton'
			with_use='gawk'
			extra_pkgs="
				>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
				>=dev-perl/Crypt-OpenSSL-EC-1.10.0
				>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
				>=dev-perl/Crypt-OpenSSL-Random-0.100.0
				>=dev-perl/Digest-GOST-0.60.0
				app-admin/eselect
				app-alternatives/awk${impl:+"${impl}"}
				app-arch/libarchive
				app-crypt/gnupg
				dev-build/make
				dev-lang/python-exec
				dev-libs/isl
				dev-perl/GeoIP2
				net-misc/geoipupdate
				sys-apps/baselayout
				sys-apps/busybox
				sys-apps/coreutils
				sys-apps/findutils
				sys-apps/gawk${impl:+"${impl}"}
				sys-apps/gentoo-functions
				sys-apps/portage
				sys-apps/sed
				sys-devel/binutils
				sys-devel/binutils-config
				sys-devel/gcc
				sys-devel/gcc-config
				sys-kernel/linux-headers
				sys-libs/glibc
				virtual/libc
			"

			container_cmd='/usr/bin/sa-update'
		else
			output "Setting build variables for package 'spamassassin' ..."
			pre_pkgs+=' sys-devel/gcc'
			extra_pkgs='
				>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
				>=dev-perl/Crypt-OpenSSL-EC-1.10.0
				>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
				>=dev-perl/Crypt-OpenSSL-Random-0.100.0
				>=dev-perl/Digest-GOST-0.60.0
				app-arch/libarchive
				net-misc/curl
				dev-perl/Archive-Zip
				dev-perl/BSD-Resource
				dev-perl/GeoIP2
				dev-perl/IO-String
				mail-filter/dcc
				sys-apps/findutils
				sys-devel/gcc
			'

			ports='783/tcp 6276/udp 6276/tcp 6277/udp 6277/tcp'
			# Somehow, this container is being built with user='spampd'??!?
			user='root'
			group='root'
			container_cmd='/usr/sbin/spamd'
		fi
		etcdir='mail/spamassassin'
		;;
	*.spampd)
		# 'eval: failed to locate the triplets.txt file' is normal, the file was removed but
		# the eval wasn't :o
		#
		output "Setting build variables for package 'spampd' ..."
		pre_pkgs='sys-apps/help2man acct-group/mail acct-user/mail acct-group/spamd acct-user/spamd'
		pre_pkgs+=' sys-devel/gcc'
		extra_pkgs='
			>=dev-perl/Crypt-OpenSSL-DSA-0.150.0
			>=dev-perl/Crypt-OpenSSL-EC-1.10.0
			>=dev-perl/Crypt-OpenSSL-ECDSA-0.60.0
			>=dev-perl/Crypt-OpenSSL-Random-0.100.0
			>=dev-perl/Digest-GOST-0.60.0
			>=mail-filter/spamassassin-3.4.4-r1
			dev-perl/DBD-MariaDB
			dev-perl/Crypt-OpenSSL-RSA
			dev-perl/Geo-IP
			dev-perl/GeoIP2
			dev-perl/IP-Country
			dev-perl/NetAddr-IP
			mail-filter/dcc
			mail-filter/razor
			sys-apps/baselayout
			sys-apps/findutils
			virtual/perl-DB_File
		'

		ports='6276/udp 6276/tcp 6277/udp 6277/tcp'  # razor/dcc
		if [[ "$( # <- Syntax
				printf '2.61\n%s' "${package_version:-}" |
				sort -V |
				head -n 1
		)" == '2.61' ]]; then
			output "Configuring '${package_name##*.}-${package_version:-}' for v2.61 or later ..."
			container_cmd='/usr/sbin/spampd'
		else
			output "Configuring '${package_name##*.}-${package_version:-}' for v2.53 or prior ..."
			container_cmd='/usr/sbin/spampd.pl'
		fi
		;;
	*.subversion)
		output "Setting build variables for package 'svnserve' ..."
		pre_pkgs='sys-apps/help2man acct-group/svnusers acct-user/svn'
		force_python="${python_target}"
		extra_pkgs='dev-lang/python'
		with_use='xml'

		ports='3690/tcp'
		user='svn'
		group='svnusers'
		container_cmd='/usr/bin/svnserve'
		container_cwd='/'
		;;
	*.syslog-ng)
		output "Setting build variables for package 'syslog-ng' ..."
		pre_pkgs='sys-apps/help2man'

		ports='514/udp'
		container_cmd='/usr/sbin/syslog-ng'
		container_cwd='/var/lib/syslog-ng'
		etcdir='syslog-ng'
		;;
	*.unifi-controller-bin)
		output "Setting build variables for package 'unifi-controller-bin' ..."
		output

		export L10N='en'
		case "${package_version}" in
			5.*|6.*|7.0.*|7.1.*|7.2.*)
				extra_pkgs='dev-java/openjdk-bin:8'
				;;
			7.3.*|7.4.*)
				extra_pkgs='dev-java/openjdk:11'
				;;
			#7.5.*)
			*)
				pre_pkgs='dev-java/openjdk-bin:17 dev-java/openjdk:17 sys-devel/gcc'
				extra_pkgs='dev-java/openjdk:17'
				;;
		esac

		case "${service:-}" in
			*unifi-controller-bin-6.*|*unifi-controller-bin-7.[01234]*)
				warn 'This build will fail with a python exception if any new package'
				warn 'has to be built from source. So long as all necessary packages'
				warn 'are available for installation as binaries (which should be the'
				warn 'case for subsequent builds without other changes) then the'
				warn 'process should succeed.'
				output
				#EMERGE_OPTS='--single --swap'  # Merge packages one at a time, for debug purposes

				# shellcheck disable=SC2034
				ECLASS_OVERRIDE='unifi'  # consumed in common/run.sh
				# shellcheck disable=SC2034
				NO_REPO_MASKS='no_repo_masks'  # ... any value will do

				# shellcheck disable=SC2154
				gcc_use="$( replace_flags '-graphite' -- "${use_essential_gcc}" )"
				# Look for "build" gcc USE-flags in package.use only (or use defaults above) ...
				if [ -s /etc/portage/package.use/00_package.use ]; then
					gcc_use="$( # <- Syntax
						sed 's/#.*$//' /etc/portage/package.use/00_package.use |
							tr -s '[:space:]' |
							grep -E -- '^\s?([<>=~]=?)?sys-devel/gcc' |
							cut -f 2- |
							xargs -n 1 echo |
							sort |
							uniq
					)"
				fi

				masked_packages='dev-python/setuptools::unifi sys-apps/sandbox::unifi sys-apps/util-linux::unifi' # sys-apps/file sys-apps/portage
				export CFLAGS="${CFLAGS:+"${CFLAGS} "}${cflags:+"${cflags} "}-w"  # mongodb is *really* noisy...
				pre_use="$( replace_flags 'headless-awt' -- "${gcc_use}" )"
				force_python='python2_7'
				pre_pkgs="${masked_packages} <sys-devel/gcc-11 acct-group/mongodb acct-group/unifi acct-user/mongodb acct-user/unifi"
				extra_pkgs="${extra_pkgs} <dev-db/mongodb-4.2 dev-lang/python:2.7" # app-admin/eselect app-eselect/eselect-python'
				extra_pkgs="${extra_pkgs} app-misc/ca-certificates${ECLASS_OVERRIDE:+"::${ECLASS_OVERRIDE}"}"
				extra_pkgs="${extra_pkgs} ${masked_packages} <sys-devel/gcc-11"
				with_use="lib-only openmp zstd python_single_target_${force_python} python_targets_${force_python}"
				;;
			*)
				pre_pkgs="${pre_pkgs} acct-group/mongodb acct-group/unifi acct-user/mongodb acct-user/unifi"
				extra_pkgs="${extra_pkgs} app-misc/ca-certificates${ECLASS_OVERRIDE:+"::${ECLASS_OVERRIDE}"}"
				;;
		esac

		ports='3478/udp 5514/udp 8080/tcp 8443/tcp 8880/tcp 8843/tcp 6789/tcp 27117/tcp 10001/udp 1900/udp 5656-5699/udp'
		user='unifi'
		group='unifi'
		# As of 5.5.24, logs are written to 'logs/server.log' below the
		# directory from which the class is invoked - so we need to chdir to
		# the installation directory in order for this to work as anticipated.
		container_cwd="/opt/unifi-controller-${package_version}"
		# ace.jar needs to be run within a JVM...
		container_cmd='/usr/bin/java'
		;;
	*.vim)
		output "Setting build variables for package 'vim' ..."
		pre_pkgs='sys-apps/net-tools'
		pre_use='hostname'
		extra_pkgs='app-vim/dhcpd-syntax app-vim/eselect-syntax app-vim/gentoo-syntax app-vim/help-extra-syntax app-vim/info app-vim/json app-vim/nginx-syntax app-vim/ntp-syntax app-vim/vim-spell-en sys-apps/net-tools'

		container_cmd='/usr/bin/vim'
		etcdir='vim'
		;;
	*.watchdog)
		output "Setting build variables for package 'watchdog' ..."

		container_cmd='/usr/sbin/watchdog'
		;;
	*.xmrig)
		output "Setting build variables for package 'xmrig' ..."

		container_cmd='/usr/bin/xmrig'
		etcdir='xmrig'
		;;
	*.zxtm)
		ZEUSHOME='/opt/zeus'
		output "Setting build variables for package 'zxtm' ..."
		pre_pkgs='sys-apps/help2man sys-devel/gcc acct-group/nogroup acct-group/sys'
		extra_pkgs='app-eselect/eselect-iptables net-firewall/iptables sys-apps/iproute2 sys-process/procps'
		extra_pkgs+=' app-shells/bash'

		container_cmd='/opt/zeus/runzeus.sh'
		container_cwd="${ZEUSHOME}"
		;;
	*)
		warn "Package '${package_name}' has no pre-set configuration"
		;;
esac

# Somehow, we're losing CPU_FLAGS_${ARCH} during builds...
pre_use="${use_cpu_flags}${pre_use:+" ${pre_use}"}"
with_use="${use_cpu_flags}${with_use:+" ${with_use}"}"

# If OpenMP is enabled, then utilities such as /bin/login require libgomp.
# FIXME: At this point, this logic should be removed and sys-devel/gcc force-
#        enabled at all times...
#
#        ... although the only affected packages seem to be sys-apps/shadow
#        (/bin/login) and sys-libs/libxcrypt (/lib64/libcrypt.so.1.1.0)
#
if ! echo " ${pre_pkgs:-} " | grep -q -- ' sys-devel/gcc '; then
	if
			echo " ${use_essential:-} ${use_essential_gcc:-}" \
						"${pre_use:-} ${with_use:-} ${post_use:-}" \
						"${gcc_extra_use_flags:-} " |
					grep -q -- ' openmp ' ||
				echo " ${cflags} ${cxxflags} " |
					grep -q -- ' -fopenmp '
	then
		print "Adding pre-installation package 'sys-devel/gcc' due to" \
			"presence of 'openmp' USE flag or C(XX)FLAG"
		pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}sys-devel/gcc"
	fi
fi

for arg in pre_remove pre_use pre_pkgs with_use extra_pkgs post_use post_pkgs \
	post_remove
do
	eval "${arg}=\$( tr $'\n' ' ' <<<\"\${${arg}}\" | tr -s '[:space:]' ' ' | sed 's/^ // ; s/ $//' )"
done
unset arg
#print "Additional USE flags are '${with_use:-"<none>"}'"

declare pkg=''
declare -i warning=0
for pkg in ${post_pkgs:-}; do
	if ! grep -Fq " ${pkg} " <<<" ${package:-} ${extra_pkgs:-} "
	then
		warn "post_pkg entry '${pkg}' will be rebuilt without dependencies," \
			"but does not appear in 'extra_pkgs'"
		warn
		warning=1
	fi
done
unset pkg

case " ${pre_pkgs} " in
	*' dev-util/pkgconf '*)
		pre_use="$( replace_flags 'pkg-config' -- "${pre_use:-}" )"
		;;
esac
case " ${pre_pkgs} " in
	*' dev-util/pkgconfig '*)
		pre_use="$( replace_flags 'internal-glib' -- "${pre_use:-}" )"
		;;
esac
case " ${pre_pkgs} " in
	*' sys-apps/help2man '*)
		pre_use="$( replace_flags 'nls' -- "${pre_use:-}" )"
		;;
esac
case " ${pre_pkgs} " in
	*' sys-devel/gcc '*)
		print "Considering sys-devel/gcc additional flags ..."
		if
				echo " ${use_essential:-} ${use_essential_gcc:-}" \
						"${pre_use:-} ${with_use:-} ${post_use:-}" \
						"${gcc_extra_use_flags:-} " |
					grep -q -- ' openmp '
		then
			print "Force-enabling 'openmp' initial USE flag"
			gcc_extra_use_flags="$( # <- Syntax
				replace_flags 'openmp' -- "${gcc_extra_use_flags:-}"
			)"
		fi
		if echo "${cflags} ${cxxflags}" |
				grep -Fqw -e '-fgraphite' -e '-fgraphite-identity' \
					-e '-floop-nest-optimize' -e '-floop-parallelize-all'
		then
			print "Force-enabling 'graphite' initial USE flag"
			gcc_extra_use_flags="$( # <- Syntax
				replace_flags 'graphite' -- "${gcc_extra_use_flags:-}"
			)"
		fi
		pre_use="$( replace_flags "${use_essential_gcc:-}" "${gcc_extra_use_flags:-}" -- "${pre_use:-}" )" || :
		if ! [[ " ${extra_pkgs:-} " == *' sys-devel/gcc '* ]]; then
			print "Applying settings for containers which don't require a" \
				"functional toolchain ..."
			with_use="$( replace_flags '-lib-only' -- "${with_use}" )"
			pre_use="$( replace_flags 'graphite' '-lib-only' '-openmp' 'zstd' -- "${pre_use:-}" )"
			post_use="$( replace_flags '-graphite' 'lib-only' '-openmp' '-zstd' -- "${post_use:-}" )"
			if [[ " ${gcc_extra_use_flags:-} " == *' openmp '* ]]; then
				pre_use="$( replace_flags 'openmp' -- "${pre_use:-}" )"
				post_use="$( replace_flags 'openmp' -- "${post_use:-}" )"
			fi
		else
			# spamassassin updates require perl and a functioning compiler
			# in the container...
			#if [ "${original_service}" != 'spamassassin-update' ] && [ "${original_service}" != 'sa-update' ] && [ "${original_service}" != 'hpl' ]; then
			print "Applying settings for containers which require a" \
				"functional toolchain ..."
			post_use="$( replace_flags 'lib-only' -- "${post_use}" )"
			if [ -n "${post_pkgs:-}" ]; then
				warn "sys-devel/gcc needs to be rebuilt (without" \
					"dependencies) but 'post_pkgs' is non-empty... suggest" \
					"moving 'post_pkgs' to 'extra_pkgs'"
				warn "post_pkgs contains '${post_pkgs}'"
				warn
				warning=1
			fi
			post_pkgs="${post_pkgs:+"${post_pkgs} "}sys-devel/gcc sys-libs/zlib virtual/libiconv --nodeps"
			#fi
			pre_use="$( replace_flags 'graphite' '-lib-only' '-openmp' -- "${pre_use:-}" )"
			post_use="$( replace_flags '-graphite' '-lib-only' '-openmp' -- "${post_use:-}" )"
			if [[ " ${gcc_extra_use_flags} " == *' openmp '* ]]; then
				pre_use="$( replace_flags 'openmp' -- "${pre_use:-}" )"
				post_use="$( replace_flags 'openmp' -- "${post_use:-}" )"
			fi
			if [[ " ${gcc_extra_use_flags} " == *' graphite '* ]]; then
				post_use="$( replace_flags 'graphite' -- "${post_use:-}" )"
			fi
		fi
		# app-portage/portage-utils includes the 'openmp' USE flag, and
		# causes dependency problems if not kept in sync with other
		# packages with the same flag :(
		#
		pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}app-alternatives/yacc app-crypt/libb2 app-portage/portage-utils"
		post_pkgs="${post_pkgs:+"${post_pkgs} "}app-crypt/libb2 app-portage/portage-utils"

		# *If* we really need app-portage/portage-utils, USE='qmanifest' pulls
		# in app-crypt/gpgme, which we're not handling with the --nodeps final
		# sys-devel/gcc build :(
		#
		pre_use="$( replace_flags '-qmanifest' -- "${pre_use}" )"
		post_use="$( replace_flags '-qmanifest' -- "${post_use}" )"

		#if
		#		echo " ${use_essential:-} ${use_essential_gcc:-}" \
		#				"${pre_use:-} ${with_use:-} ${post_use:-}" \
		#				"${gcc_extra_use_flags:-} " |
		#			grep -q -- ' zstd '
		if
				echo " ${post_use:-}" |
					grep -q -- ' zstd '
		then
			print "Adding post-installation package 'app-arch/zstd' due to" \
				"presence of 'zstd' USE flag"
			post_pkgs="${post_pkgs:+"${post_pkgs} "}app-arch/zstd"
		fi
		;;
esac
(( warning )) && sleep 5

if ! grep -Fq ' sys-devel/gcc ' <<<" ${post_pkgs} "; then
	post_pkgs="${post_pkgs:+"${post_pkgs} "}sys-libs/zlib --nodeps --with-bdeps=n"
	# FIXME: What packages require these updated flags?
	post_use="$( replace_flags '-minizip' 'xml' -- "${post_use}" )"
fi

# Make these additions after the above check, with the intention that user and
# group packages are explicitly included rather than the user relying on the
# group being a dependency...
pkg=''
case " ${pre_pkgs} " in
	*' acct-group/'*|*' acct-user/'*)
		# We need groups before users if we're not enforcing
		# dependencies...
		for pkg in ${pre_pkgs}; do
			case "${pkg}" in
				acct-user/*)
					post_pkgs="${pkg}${post_pkgs:+" ${post_pkgs}"}"
					;;
			esac
		done
		for pkg in ${pre_pkgs}; do
			case "${pkg}" in
				acct-group/*)
					post_pkgs="${pkg}${post_pkgs:+" ${post_pkgs}"}"
					;;
			esac
		done
		;;
esac
unset pkg

# prelink no longer has any effect as it can't run against PIE binaries :(
#pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}net-misc/ethertypes sys-apps/baselayout sys-devel/prelink"
#pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}net-misc/ethertypes sys-apps/baselayout"
# Why were we installing ethertypes, which only net-firewall/iptables depends
# upon?
#pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}net-misc/ethertypes sys-apps/baselayout"
pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}sys-apps/baselayout"

# Ensure we have a shell...
extra_pkgs="${extra_pkgs:+"${extra_pkgs/app-alternatives\/sh} "}app-alternatives/sh sys-apps/busybox"
case " ${extra_pkgs:-} " in
	*' app-shells/bash '*|*' sys-apps/shadow '*)
		extra_pkgs="${extra_pkgs/sys-libs\/readline} sys-libs/readline"
		;;
esac
if [ -n "${build_debug:-}" ]; then
	extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}dev-util/strace"
fi
#extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}sys-devel/prelink"
with_use="$( replace_flags 'make-symlinks' -- "${with_use}" )"

case " ${gcc_extra_use_flags:-} " in
	*' openmp '*)
		post_pkgs="dev-libs/gmp dev-libs/mpfr dev-libs/mpc${post_pkgs:+" ${post_pkgs}"}"
		;;
esac

if [[ -z "${post_use:-}" && -n "${with_use:-}" ]]; then
	post_use="$( replace_flags 'lib-only' 'openmp' -- "${with_use}" )"
fi

if
		echo " ${use_essential:-} ${use_essential_gcc:-}" \
				"${pre_use:-} ${with_use:-} ${post_use:-}" \
				"${gcc_extra_use_flags:-} " |
			grep -Fqe ' compile-locales ' -e ' minimal '
then
	pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}sys-libs/glibc"
	extra_pkgs="${extra_pkgs:+"${extra_pkgs} "}sys-libs/glibc"
	pre_use="$( replace_flags \
		'compile-locales' 'minimal' -- "${pre_use}"
	)"
	with_use="$( replace_flags \
		'compile-locales' 'minimal' -- "${with_use}"
	)"
	post_use="$( replace_flags \
		'compile-locales' 'minimal' -- "${post_use}"
	)"
fi

print 'Final USE-flags:'
print "pre_use: ${pre_use:-"<none>"}"
print "with_use: ${with_use:-"<none>"}"
print "post_use: ${post_use:-"<none>"}"
print
print 'Final packages:'
print "pre_pkgs: ${pre_pkgs:-"<none>"}"
print "extra_pkgs: ${extra_pkgs:-"<none>"}"
print "post_pkgs: ${post_pkgs:-"<none>"}"

if [ -z "${container_cmd:-}" ]; then
	die 'No container command provided'
elif [ "${container_cmd}" = 'podman' ]; then
	die "Invalid container command '${container_cmd}'"
fi

# FIXME: shellcheck wants:
#
#          docker_extra_mounts+=( $( add_mount ... ) )
#
#        ... to be expressed in the form of:
#
#          readarray -O "${#docker_extra_mounts[@]}" -t docker_extra_mounts < <(
#            add_mount ...
#          )
#
# shellcheck disable=SC2207
{
declare -a docker_extra_mounts=()
if [ -n "${etcdir:-}" ]; then
	for dir in ${etcdir}; do
		sudo mkdir -p "/etc/${dir}"
		docker_extra_mounts+=( $( add_mount --print --no-ro \
				"/etc/${dir}/" \
				'/service/...'
			) )
		if [ "${dir}" = 'mail/spamassassin' ]; then
			sudo mkdir -p /var/lib/spamassassin /usr/share/spamassassin
			docker_extra_mounts+=( # <- Syntax
				$( add_mount --print --no-ro \
						'/var/lib/spamassassin/' \
						'/service/...'
					)
				$( add_mount --print --no-ro \
						'/usr/share/spamassassin/' \
						'/service/...'
					)
			)
		fi
	done
	unset dir
fi
for dir in default logrotate.d ssl; do
	sudo mkdir -p "/etc/${dir}/"
	docker_extra_mounts+=( $( add_mount --print --no-ro \
		"/etc/${dir}/"
	) )
done
unset dir

# package.accept_keywords
#
# FIXME: package.accept_keywords.${arch:-} is handled in common/run.sh rather
#        than here - standardise this to do everything in one place or the
#        other!
#
if ! docker_extra_mounts+=( $( add_mount --dir --print \
			'%base%/etc/portage/package.accept_keywords'
		) )
then
	note "No 'package.accept_keywords' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

# package.license
#
if ! docker_extra_mounts+=( $( add_mount --dir --print \
			'%base%/etc/portage/package.license'
		) )
then
	note "No 'package.license' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/'"
fi

declare package_mask_svc_name=''
package_mask_svc_name="${package_name#*"."}"
case "${package_mask_svc_name}-${package_version}" in
	#php-7.3.*) package_mask_svc_name='php73' ;;
	#php-7.4.*) package_mask_svc_name='php74' ;;
	#php-8.0.*) package_mask_svc_name='php80' ;;
	#php-8.1.*) package_mask_svc_name='php81' ;;
	php-8.2.*) package_mask_svc_name='php82' ;;
	#php-8.3.*) package_mask_svc_name='php83' ;;
esac

# package.unmask*
#
if \
		! docker_extra_mounts+=( $( add_mount --print \
				"%base%/etc/portage/package.unmask.svc/${package_mask_svc_name}" \
				"/etc/portage/package.unmask/${package_mask_svc_name}"
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.unmask.svc/package.unmask' \
				'/etc/portage/package.unmask/package.unmask.service'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.unmask.svc' \
				'/etc/portage/package.unmask/package.unmask.service'
			) )
then
	note "No 'package.unmask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.unmask.svc/'"
fi
[[ -z "${arch:-}" ]] || docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.unmask.${arch}" \
		"/etc/portage/package.unmask/${arch}"
	) ) || :
# Error: OCI runtime error: crun: open `/mnt/podman-storage/btrfs/subvolumes/ddc60a734ca210eb4ecc5f20e488b6d0e37064d3368ba80744cab07ef97b7bbd/etc/portage/package.unmask/package.unmask`: Not a directory
docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.unmask' \
		'.../package.unmask'
	) ) || :
#docker_extra_mounts+=( $( add_mount --print \
#		'%base%/etc/portage/package.unmask'
#	) ) || :

# package.mask.svc
#
if \
		! docker_extra_mounts+=( $( add_mount --print \
				"%base%/etc/portage/package.mask.svc/${package_mask_svc_name}" \
				"/etc/portage/package.mask/${package_mask_svc_name}"
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask.svc/package.mask' \
				'/etc/portage/package.mask/package.mask.svc'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask.svc'
			) )
then
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask.svc/'"
fi
unset package_mask_svc_name

# package.mask
#
if \
		! docker_extra_mounts+=( $( add_mount --print \
				"%base%/etc/portage/package.mask/${package_name#*"."}"
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask/package.mask' \
				'/etc/portage/package.mask/package.mask.base'
			) ) &&
		! docker_extra_mounts+=( $( add_mount --print \
				'%base%/etc/portage/package.mask' \
				'.../package.mask.base'
			) )
then
	note "No 'package.mask' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.mask/'"
fi
[[ -z "${arch:-}" ]] || docker_extra_mounts+=( $( add_mount --print \
		"%base%/etc/portage/package.mask.${arch}" \
		"/etc/portage/package.mask/${arch}"
	) ) || :

# host additional package.mask
#if [ -d /etc/portage/package.mask ]; then
#	declare extra_mask='' file=''
#	while read -r extra_mask; do
#		file="$( basename "${extra_mask}" )"
#		docker_extra_mounts+=( $( add_mount --print \
#				"/etc/portage/package.mask/${file}"
#			) )
#	done < <( find /etc/portage/package.mask/ -mindepth 1 -maxdepth 1 -type f -not -name 'package.mask' | grep -v -- "repo-${ECLASS_OVERRIDE:-"__IGNORE__"}-mask" )
#	unset file extra_mask
#fi

# package.use alternatives
#
docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.use.svc/10_alternatives' \
		'/etc/portage/package.use.override/10_alternatives'
	) ) || :

# package.use.svc
#
declare package_use_svc_name='' package_use_svc_name_extra=''
declare -a package_use_svc_name_extras=()
declare -i have_package_use_svc_name=0
package_use_svc_name="${package_name#*"."}"
case "${package_use_svc_name}" in
	lighttpd)
		if [[ -n "${php_default_target:-}" ]]; then
			package_use_svc_name_extras+=( "${php_default_target//-}" )
		fi
		;;
	php)
		case "${package_use_svc_name}-${package_version}" in
			#php-7.3.*) package_use_svc_name_extras+=( 'php73' ) ;;
			#php-7.4.*) package_use_svc_name_extras+=( 'php74' ) ;;
			#php-8.0.*) package_use_svc_name_extras+=( 'php80' ) ;;
			#php-8.1.*) package_use_svc_name_extras+=( 'php81' ) ;;
			php-8.2.*) package_use_svc_name_extras+=( 'php82' ) ;;
			#php-8.3.*) package_use_svc_name_extras+=( 'php83' ) ;;
			*)
				die "Unsupported PHP version '${package_version}'" ;;
		esac
		;;
esac
if [[ -n "${package_use_svc_name:-}" ]] && docker_extra_mounts+=( $( # <- Syntax
			add_mount --print \
				"%base%/etc/portage/package.use.svc/${package_use_svc_name}" \
				"/etc/portage/package.use.override/${package_use_svc_name}"
		) )
then
	have_package_use_svc_name=1
fi
if (( ${#package_use_svc_name_extras[@]} )); then
	for package_use_svc_name_extra in "${package_use_svc_name_extras[@]}"; do
		if docker_extra_mounts+=( $( # <- Syntax
					add_mount --print \
						"%base%/etc/portage/package.use.svc/${package_use_svc_name_extra}" \
						"/etc/portage/package.use.override/${package_use_svc_name_extra}"
				) )
		then
			have_package_use_svc_name=1
		fi
	done
fi
if (( have_package_use_svc_name )); then
	docker_extra_mounts+=( $( add_mount --print \
			'%base%/etc/portage/package.use.svc/00_package.use.header' \
			'/etc/portage/package.use.override/00_package.use.header'
		) ) || :
elif ! docker_extra_mounts+=( $( add_mount --print \
		'%base%/etc/portage/package.use.svc/00_package.use.header' \
		'/etc/portage/package.use.override/00_package.use'
	) )
then
	note "No 'package.use' override found in '${PWD}/${base_dir:+"${base_dir}/"}etc/portage/package.use.svc/'"
fi
unset have_package_use_svc_name package_use_svc_name_extra package_use_svc_name

if [ -n "${arch:-}" ] &&
	[ -s "${base_dir:+"${base_dir}/"}etc/portage/profile/use.mask.${arch}" ]
then
	docker_extra_mounts+=( $( add_mount --print \
			"%base%/etc/portage/profile/use.mask.${arch}" \
			'/etc/portage/profile/use.mask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'%base%/etc/portage/profile/use.mask'
		) ) || :
fi
docker_extra_mounts+=( # <- Syntax
		$( add_mount --print '%base%/etc/portage/profile/package.use.force' )
		$( add_mount --print '%base%/etc/portage/profile/package.use.mask' )
	) || :

export DOCKER_EXTRA_MOUNTS="${docker_extra_mounts[*]:-}"
unset docker_extra_mounts
}

images="$( docker image list --noheading "${container_prefix}-${package_name}:${package_version}" 2>&1 )"
if echo "${images:-}" | grep -q -- "${container_prefix}-${package_name}\s\+${package_version}\s"; then
	output >&2
	# shellcheck disable=SC2154
	output >&2 " ${blue}*${reset} Re-using existing '${package_name}:${package_version}' root image ..."
else
	output >&2
	# shellcheck disable=SC2154
	output >&2 " ${blue}*${reset} Building '${package_name}:${package_version}' root image ..."
	output >&2

	trap '' INT
	docker container stop "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -v 'no such container' || :
	docker container rm --volumes "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -Fv -- 'no such container' || :
	trap - INT

	# Remove glibc dependencies on gzip, grep, awk...
	#build_use="${USE:+"${USE} "}compile-locales minimal -ssp timezone-tools"

	DOCKER_CMD_VARS="${DOCKER_CMD_VARS:+"${DOCKER_CMD_VARS} "}--env VERY_BRAVE_OR_VERY_DUMB=\"yes\""
	# shadow needed for /sbin/nologin; coreutils needed for chmod
	# shellcheck disable=SC2089
	if [[ -n "${L10N:-}" ]]; then
		DOCKER_CMD_VARS+=" --env L10N=\"${L10N}\""
	fi
	# shellcheck disable=SC2090
	export DOCKER_CMD_VARS

	args=()
	for arg in pre_remove force_python pre_pkgs pre_use with_use post_pkgs \
			post_use rebuild post_remove
	do
		# shellcheck disable=2206,SC2191
		[[ -n "${!arg:-}" ]] && args+=( --${arg//_/-}="${!arg}" )
	done
	unset arg

	args+=( --depclean --with-bdeps=n --depclean-exclude="${pre_pkgs} ${extra_pkgs}" )
	[[ -n "${post_remove:-}" ]] && args+=( --post-remove="${post_remove}" )
	args+=(  # <- Syntax
			--no-package-use
			--usepkg=y
			--with-bdeps=n
			--with-bdeps-auto=n
		"=${package}${repo:+"::${repo}"}"
		sys-libs/glibc
	)
	if [[ -n "${extra_pkgs:-}" ]]; then
		declare -a additional_args=()
		read -r -a additional_args <<<"${extra_pkgs}"
		args+=( "${additional_args[@]}" )
		unset additional_args
	fi

			ROOT='/service' \
			name="${container_prefix}-${container_name}" \
			image="${IMAGE}" \
			DOCKER_CMD_VARS="${container_caps[*]:-}" \
	_docker_run "${args[@]}" 2>&1 |
		tee "log/docker.${container_prefix}.${alt_log:-"${container_name}"}.log"
	rc=${?}
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1

	# podman is fragile :(
	#
	# ... more to the point, if we use 'buildah commit --squash' here then the
	# next-stage build fails after the ROOT filesystem contents have been
	# copied across when running 'test -s /usr/libexec/environment.sh'!?
	trap '' INT
	docker container commit \
				"${container_prefix}-${container_name}" \
				"${container_prefix}-${package_name}:${package_version}" \
			2>&1 |
		tee -a "log/docker.${container_prefix}.${alt_log:-"${container_name}"}.log"
	rc=${?}
	trap - INT
	output " -> ${rc}"

	[ "${rc}" = '0' ] || exit 1
fi
unset images

trap '' INT
docker container rm --volumes "${container_prefix}-${container_name}" 2>&1 >/dev/null | grep -Fv -- 'no such container' || :
trap - INT

cd "${base_dir}" || die "chdir() to '${base_dir}' failed: ${?}"

case "${package_name}" in
	*zxtm*)
		file='Dockerfile.service.zxtm'
		;;
	*)
		file='Dockerfile.service'
		;;
esac
dockerfile_tmp="$( mktemp --tmpdir 'Dockerfile.service.XXXXXXXX' )" ||
	die "mktemp() failed: ${?}"
exposedports=''
for port in ${ports:-}; do
	if [[ -n "${port:-}" ]] && (( ${port%"/"*} )); then
		exposedports+="${exposedports:+"\\n"}EXPOSE ${port}"
	fi
done
unset port

if [[ -n "${exposedports:-}" ]]; then
	awk -v p="${exposedports}" '{ gsub( "^EXPOSE .*$", p ) ; print ; }' <"${file}" >"${dockerfile_tmp}"
else
	grep -Fv 'EXPOSE' "${file}" >"${dockerfile_tmp}"
fi
unset exposedports

output >&2
output >&2 " ${blue}*${reset} Building ${package_name}:${package_version} (${container_cmd}) service image ..."
output >&2

args=()
args+=(
	--build-arg SET_TERM="${TERM}"
)
[[ -n "${ZEUSHOME:-}" ]] && args+=( --build-arg ZEUSHOME="${ZEUSHOME}" )
[[ -n "${environment_file:-}" ]] && args+=( --build-arg environment_file="${environment_file}" )
# shellcheck disable=SC2154
args+=(
	--build-arg environment_filter="${environment_filter}"
	--build-arg image_name="${container_prefix}-${package_name}"
	--build-arg service_cmd="${container_cmd}"
)
[[ -n "${container_cwd:-}" ]] && args+=( --build-arg service_cwd="${container_cwd}" )
[[ -n "${fs_name:-}" ]] && args+=( --build-arg service_fs_name="${fs_name}" )
# shellcheck disable=SC2154
args+=(
	--build-arg service_group="${group}"
	--build-arg service_name="${package_name/.//}"
	--build-arg service_name_short="${package_name#*"."}"
	--build-arg service_ports="${ports}"
	--build-arg service_user="${user}"
	--build-arg service_version="${package_version}"
	--build-arg smtp_domain="${mail_domain}"
	--build-arg smtp_smarthost="${mail_mta}"
	--build-arg CHOST="${chost}"
	--build-arg keep_base="${keep_base}"
)
[[ -n "${zxtm_service_version:-}" ]] && args+=( --build-arg zxtm_service_version="${zxtm_service_version}" )
args+=(
	--compress
	--file "${dockerfile_tmp}"
	--squash-all
	--tag "service.${package_name}:${package_version}"
	#--network slirp4netns
)
if [[ -n "${container_caps[*]:-}" ]]; then
	args+=( "${container_caps[@]}" )
fi

# With the addition of the '--squash-all' parameter, the 'build' image is
# re-squashed when 'gentoo-build'-svc.docker invokes 'Dockerfile.*service' to
# produce the service-container image.
#
# shellcheck disable=SC2001  # POSIX sh compatibility
docker ${IMAGE_ROOT:+"--storage-opt='' --root '${IMAGE_ROOT}'"} \
		image build "${args[@]}" . 2>&1 |
	tee "../log/docker.service.${alt_log:-"${container_name}"}.log"
rc=${?}
rm "${dockerfile_tmp}"
unset dockerfile_tmp
output " -> ${rc}"

if [ $(( ${rc:-"1"} )) -eq 0 ]; then
	trap '' INT
	docker image rm "${container_prefix}-${package_name}:${package_version}" 2>/dev/null || :
	case "${package_name}" in
		*eix*)
			docker image tag "service.${package_name}:${package_version}" 'gentoo-helper:latest'
			;;
	esac
	trap - INT
fi

#set +o xtrace

exit ${rc}

# vi: set colorcolumn=80 syntax=bash:
