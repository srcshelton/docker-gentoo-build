#! /usr/bin/env bash

set -eu
set -o pipefail

trace="${TRACE:-}"
debug="${DEBUG:-}"
# With 'debug' enabled, set 'DEBUG_EXTRA_ARGS' to pass additional arguments
# to 'podman build'...

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

# Set by common/vars.sh
docker='docker'
env_name=''
init_name=''
stage3_name=''
base_name=''
build_name=''
environment_filter=''
bold=''
red=''
blue=''
reset=''

# Set by common/run.sh docker_setup()
docker_arch=''
arch=''

native=''

# use_pypy & use_pypy_use are defined in common/vars.sh
use_pypy_pre=''
use_pypy_pre_use=''
use_pypy_post=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

[ -n "${base_dir:-}" ]
[ -d "${base_dir}" ]
[ -e "${base_dir}"/Dockerfile.env ]
[ -e "${base_dir}"/Dockerfile.init ]
[ -e "${base_dir}"/Dockerfile.build ]

[ -d log ] || mkdir log

# shellcheck disable=SC2034
IMAGE="${base_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh

if
	[ -z "${env_name:-}" ] ||
	[ -z "${init_name:-}" ] ||
	[ -z "${stage3_name:-}" ] ||
	[ -z "${base_name:-}" ] ||
	[ -z "${build_name:-}" ]
then
	die "Image names not correctly set in '$( pwd )/common/vars.sh'"
fi

if [ -n "${*:-}" ]; then
	if echo " ${*} " | grep -Eq -- ' -(h|-help) '; then
		output >&2 "Usage: $( basename "${0}" ) [--env] [--stage3] [--init]" \
			"[[--force] --base] [[--force] --build]"
		exit 0
	elif
		! echo "${*}" |
		grep -Eq -- '^(\s*--(env|stage3|init|base|build|force)\s*){1,6}$'
	then
		die "Unknown args '${*}'"
	fi

	if echo " ${*} " | grep -Fq -- ' --force '; then
		if ! echo " ${*} " | grep -Eq -- ' --(base|build) '; then
			die "'--force' is only valid with '--base' or '--build'"
		fi
	fi
fi

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

if ! $docker --version >/dev/null 2>&1; then
	die "'$docker' failed to execute: ${?}"
elif ! $docker image build --help | grep -Fq -- '--platform'; then
	die "'$docker image build' lacks '--platform' support (try podman-3.x or" \
		"later)"
fi

if [ -n "${python_target_override:-}" ]; then
	[[ "${python_target_override}" =~ ^python[[:digit:]]_[[:digit:]]+$ ]] ||
		die "python_target_override value '${python_target_override}'" \
			"doesn't appear to be a valid python version" \
			"(matching 'pythonX_Y', e.g. 'python3_9')"
fi

docker_setup

cd "${base_dir}" || die "chdir() to '${base_dir}' failed; ${?}"

checkids() {
	local name="${1:-}"
	local tag="${2:-}"

	#inherit docker stage3_name env_id bold reset red
	local images='' stage3_env_id='' stage3_src_id=''

	if [ -z "${name}" ]; then
		error "Image name not set"
		return 1
	fi
	if false \
		|| [ -z "${docker:-}" ] \
		|| [ -z "${stage3_name:-}" ] \
		|| [ -z "${env_id:-}" ] \

	then
		error "Required global variable not set"
		return 1
	fi

	relation="inherited by"
	if [ "${name}" = "${stage3_name}" ]; then
		relation="about to be linked to"
	fi

	images="$( $docker image ls \
		"localhost/${name}:${tag:-latest}" 2>/dev/null
	)"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${name}"; then
		stage3_env_id="$(
			$docker image inspect \
					--format='{{.Config.Labels.envrionment_from}}' \
				"localhost/${stage3_name}:${tag:-latest}" 2>/dev/null
		)" || :
		stage3_env_id="$( echo "${stage3_env_id:-}" | cut -d':' -f 2- )"

		# Does our current 'gentoo-env' ID match that encoded in our stage3?
		if [ "${env_id}" != "${stage3_env_id:-}" ]; then
			output >&2 "${bold:-}WARN${reset:-}:  ${red:-}" \
				"The current 'environment' image (${env_id}) differs from" \
				"that used to build the '${name}' image (${stage3_env_id:-})" \
				"${relation} this stage${reset:-}"
		fi

		if [ -n "${stage3_id:-}" ]; then
			stage3_src_id="$(
				$docker image inspect \
						--format='{{.Config.Labels.stage3_from}}' \
					"localhost/${name}:${tag:-latest}" 2>/dev/null
			)" || :
			stage3_src_id="$( echo "${stage3_src_id:-}" | cut -d':' -f 2- )"

			# Does our upstream stage3 ID match that encoded in our stage3?
			if [ "${stage3_id}" != "${stage3_src_id:-}" ]; then
				output >&2 "${bold:-}WARN${reset:-}:  ${red:-}" \
					"The upstream 'stage3' image (${stage3_id}) differs from" \
					"that used to build the '${name}' image" \
					"(${stage3_src_id:-}) ${relation} this stage${reset}"
			fi
		fi
	fi

	# This is a warning rather than an error, so...
	return 0
} # checkids

# Check for environment sanity...
rc=0
while read -r r; do
	# FIXME: Discover default rather than assuming 'gentoo'?
	[ "${r}" == 'gentoo' ] && continue
	while read -r d; do
		if [ -d "${d}"/eclass ]; then
			grep -hR eclass /etc/portage/repos.conf |
					sed 's/#.*//' |
					grep '^eclass-overrides' |
					cut -d '=' -f 2- |
					grep -Fqw -- "${r}" &&
				continue
			warn "ebuild repo '${r}' contains class overrides, but portage isn't configured to allow their use"
			warn "Add/update 'eclass-overrides = ${r}' in /etc/portage/repos.conf"
			rc=1
		fi
	done < <( portageq get_repo_path "${EROOT:-/}" "${r}" )
done < <( portageq get_repos "${EROOT:-/}" | xargs -n 1 )
(( rc )) && sleep 5

# 'cut' separately to emulate 'pipefail' when using /bin/sh
#
# (... which we aren't any longer - but pipefail does seem to cause some
# unexpected behaviour)
#
sum="$( sha1sum entrypoint.sh )"
sum="$( echo "${sum}" | cut -d' ' -f 1 )"

stage3_tag='latest'
case "${docker_arch}" in
	'amd64')
		stage3_tag="${docker_arch}-nomultilib" ;;
	'arm64')
		stage3_tag="${docker_arch}" ;;
	'arm/v7')
		stage3_tag='armv7a_hardfp' ;;
	'arm/v6')
		stage3_tag='armv6j_hardfp' ;;
	'i386')
		stage3_tag='x86' ;;
esac
case "${docker_arch}" in
	'arm'*)
		# See https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/compiler-flags-across-architectures-march-mtune-and-mcpu
		native='-mcpu=native' ;;
esac
env_id="$(
	$docker image ls \
			--format='{{.ID}}' \
		"localhost/${env_name}:latest" 2>/dev/null
)" || :
local_stage3_id="$(
	$docker image ls \
			--format='{{.ID}}' \
		"localhost/${stage3_name}:latest" 2>/dev/null
)" || :

[ -n "${trace:-}" ] && set -o xtrace

# Create empty stage with shared environment variables ...
#
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --env '; then
	output
	output " ${blue}*${reset} Creating image 'localhost/${env_name}:latest' ..."
	output

	# NAME:    env
	# LABELS:
	# USES:
	# USED_BY: stage3 build

	# shellcheck disable=SC2086
	$docker image build \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg PROFILE_PATH="${profile:-}" \
			--build-arg CHOST="${chost:-}" \
			${native:+--build-arg NATIVE="${native}"} \
			--build-arg JOBS="${JOBS:-}" \
			--build-arg MAXLOAD="${MAXLOAD:-}" \
			--build-arg MAIL_FROM="${mail_from}" \
			--build-arg MAIL_TO="${mail_to}" \
			--build-arg MAIL_MTA="${mail_mta}" \
			--build-arg SET_TERM="${TERM:-}" \
			--build-arg SET_USE_ESSENTIAL="${use_essential:-}" \
			--compress \
			--file 'Dockerfile.env' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${env_name}:latest" \
			--rm \
		. 2>&1 | tee ../log/"docker.${env_name}.log"
	output " -> ${?}"

	[ "${*:-}" = '--env' ] && exit 0

	env_id="$( $docker image ls \
			--format='{{.ID}}' \
		"localhost/${env_name}:latest" 2>/dev/null
	)"

	output
	output " ${blue}*${reset} Stage 'env' complete, next is 'stage3' ..."
	output
fi

stage3_image="$(
	grep -- '^ARG stage3_image=' Dockerfile.stage3 |
	cut -d'"' -f 2
)"

if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --stage3 '; then
	if [ -z "${env_id:-}" ]; then
		die "Environment stage not found - please run" \
			"'$( basename "${0}" ) --env'"
	fi

	output
	output " ${blue}*${reset} Creating image" \
		"'localhost/${stage3_name}:latest' ..."
	output

	# We have to 'pull' manually, or else this stage fails ...
	rc=0
	trap '' INT
	if [ "${stage3_tag}" = 'latest' ]; then
		if
			$docker image pull --help |
			grep -Fq -- '--platform'
		then
			$docker image pull "${stage3_image}:latest" \
				--platform "linux/${docker_arch}"
		elif
			$docker image pull --help |
			grep -Fq -- '--override-arch'
		then
			$docker image pull "${stage3_image}:latest" \
				--override-arch "${docker_arch}"
		elif
			$docker image pull --help |
			grep -Fq -- '--arch'
		then
			$docker image pull "${stage3_image}:latest" \
				--arch "${docker_arch}"
		else
			die "Could not determine method to retrieve" \
				"non-native architecture with" \
				"'$docker image pull'"
		fi
	else
		$docker image pull "${stage3_image}:${stage3_tag}" || rc=${?}
	fi
	trap - INT
	[ $(( rc )) -eq 0 ] ||
		die "'$docker image pull' failed to retrieve image '${stage3_image}:latest' for architecture '${docker_arch}'"
	stage3_id="$(
		$docker image ls \
				--format='{{.ID}}' \
			"localhost/${stage3_image}:${stage3_tag}" 2>/dev/null
	)" || :

	# NAME:    stage3
	# LABELS:  envrionment_from stage3_from
	# USES:    [gentoo/stage3-amd64] env
	# USED_BY: init

	# shellcheck disable=SC2086
	$docker image build \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg env_id="${env_id}" \
			--build-arg env_name="${env_name}" \
			--build-arg stage3_id="${stage3_id}" \
			--build-arg stage3_image="${stage3_image}" \
			--build-arg stage3_tag="${stage3_tag}" \
			${python_target_override:+--build-arg python_target_override="${python_target_override}"} \
			--compress \
			--file 'Dockerfile.stage3' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${stage3_name}:latest" \
		. 2>&1 | tee ../log/"docker.${stage3_name}.log"
	output " -> ${?}"

	[ "${*:-}" = '--stage3' ] && exit 0

	local_stage3_id="$(
		$docker image ls \
				--format='{{.ID}}' \
			"localhost/${stage3_name}:latest" 2>/dev/null
	)"

	output
	output " ${blue}*${reset} Stage 'stage3' complete, next is 'init' ..."
	output
else
	stage3_id="$(
		$docker image ls \
				--format='{{.ID}}' \
			"localhost/${stage3_image}:${stage3_tag}" 2>/dev/null
	)" || :
fi

# Create initial image from Gentoo stage3 ...
#
if [ -n "${*:-}" ] && ! echo " ${*} " | grep -Fq -- ' --init '; then
	# Executed individually, `$docker image ls` and `grep` both succeed.
	# With 'pipefail' disabled, the following test does the right thing.
	# However, with pipefail set the statement is interpreted to have
	# failed when run in the same pipeline?!
	#
	images="$( $docker image ls "localhost/${init_name}" 2>/dev/null )"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${init_name}"; then
		imagesum="$(
			$docker image inspect \
					--format='{{.Config.Labels.entrypoint_sum}}' \
				"localhost/${init_name}:latest" 2>/dev/null
		)" || :
		if [ "${imagesum:-}" != "${sum}" ]; then
			if echo " ${*} " | grep -Fq -- ' --force '; then
				output >&2
				output >&2 "${bold}WARN${reset}:  ${red}entrypoint.sh sum from" \
					"'${init_name}:latest' image (${imagesum:-<unknown>})" \
					"does not match file on disk (${sum}) - forcing" \
					"continuation with existing embedded script ...${reset}"
			else
				output >&2
				output >&2 "${bold}WARN${reset}:  ${red}entrypoint.sh sum from" \
					"'${init_name}:latest' image (${imagesum:-<unknown>})" \
					"does not match file on disk (${sum}) - rebuilding" \
					"initial image ...${reset}"
				set --
			fi
		fi
	else
		output >&2 "docker image '${init_name}' not found - rebuilding initial" \
			"image ..."
		set --
	fi
fi

if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --init '; then
	if [ -z "${local_stage3_id:-}" ]; then
		die "Updated Gentoo stage 3 image 'localhost/${stage3_name}:latest'" \
			"not found - please execute '$(
				basename "${0}"
			) --stage3'"
	fi

	output
	output " ${blue}*${reset} Creating image 'localhost/${init_name}:latest' ..."
	output

	checkids "${stage3_name}"

	# NAME:    init
	# LABELS:  stage3_from entrypoint_sum
	# USES:    stage3
	# USED_BY: base

	# shellcheck disable=SC2086
	$docker image build \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg entrypoint_sum="${sum}" \
			--build-arg environment_filter="${environment_filter}" \
			--build-arg stage3_id="${stage3_id}" \
			--build-arg stage3_image="${stage3_image}:${stage3_tag}" \
			--compress \
			--file 'Dockerfile.init' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${init_name}:latest" \
		. 2>&1 | tee ../log/"docker.${init_name}.log"
			#--network slirp4netns \
	output " -> ${?}"

	output
	output " ${blue}*${reset} Stage 'init' complete, next is 'base' ..."
	output
else
	checkids "${stage3_name}"
fi

# Launch initial image and run entrypoint script to install root @system, then
# snapshot the result to create a base image ...
#
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --base '; then
	images="$( $docker image ls "localhost/${init_name}" 2>/dev/null )"
	if ! echo "${images}" | grep -Eq -- "^(localhost/)?${init_name}"; then
		die "Initial stage not found - please execute '$(
			basename "${0}"
		) --init'"
	fi

	output
	output " ${blue}*${reset} Deploying container '${base_name}' from image" \
		"'${init_name}:latest' ..."
	output

	checkids "${init_name}"

	# Handle leftover container from previous run ...
	trap '' INT
	if $docker container ps -a | grep -q -- "${base_name}$"; then
		$docker container stop "${base_name}"
		$docker container rm --volumes "${base_name}"
	fi
	trap - INT

	# NAME:    base
	# LABELS:  (stage3_from) (entrypoint_sum)
	# USES:    (init)
	# USED_BY: build

	# For some reason, installing glibc to a ROOT results in valid libcrypt
	# symlinks being installed, but the actual libraries missing?!
	#
	(
		# Add '@preserved-rebuild' for potential outdated stage3 base-images...
		post='dev-util/pkgconf sys-libs/glibc @preserved-rebuild sys-apps/portage'
		portageq get_repos / | grep -Fq -- 'srcshelton' &&
			post+=' sys-apps/gentoo-functions::srcshelton'
		# shellcheck disable=SC2030
		export name="${base_name}"
		# shellcheck disable=SC2030
		export image="${init_name}:latest"
		export DOCKER_CMD_VARS="--env ARCH=${arch:-${ARCH}}"
		docker_run \
				--post-pkgs="${post}" \
				--usepkg=y \
				--with-bdeps-auto=n \
				--with-bdeps=n \
			virtual/libc 2>&1 |
		tee ../log/"docker.${base_name}.log"
	)
	output " -> ${?}"

	output
	output " ${blue}*${reset} Saving container '${base_name}' as image" \
		"'${base_name}:latest' ..."
	output

	# shellcheck disable=SC2086
	trap '' INT
	$docker container commit "${base_name}" "${base_name}:latest" 2>&1 |
		tee -a ../log/"docker.${base_name}.log"
	$docker container rm --volumes "${base_name}" 2>&1 |
		tee -a ../log/"docker.${base_name}.log"
	trap - INT
	output " -> ${?}"

	output
	output " ${blue}*${reset} Stage 'base' complete, next is 'build' ..."
	output
else
	checkids "${init_name}"
fi

# Ensure that @system is correctly installed to ROOT=/ and snapshot result as
# build image.
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --build '; then
	images="$( $docker image ls "localhost/${base_name}" 2>/dev/null )"
	if ! echo "${images}" | grep -Eq -- "^(localhost/)?${base_name}"; then
		die "Base stage not found - please execute '$(
			basename "${0}"
		) --base'"
	fi

	output
	output " ${blue}*${reset} Deploying container '${build_name}' ..."
	output

	checkids "${base_name}"

	# Handle leftover container from previous run ...
	trap '' INT
	# shellcheck disable=SC2015
	if $docker container ps -a | grep -q -- "${build_name}$"; then
		$docker container stop "${build_name}"
		$docker container rm --volumes "${build_name}"
	fi
	# shellcheck disable=SC2015
	$docker image ls "localhost/${build_name}-root:latest" 2>/dev/null |
	grep -Eq -- "^(localhost/)?${build_name}-root\s+latest\s" && {
		# shellcheck disable=SC2140
		$docker image rm \
				${IMAGE_ROOT:+--storage-opt="overlay.imagestore=${GRAPH_ROOT}" --root "${IMAGE_ROOT}"} \
			"${build_name}-root:latest"
	} || :
	trap - INT

	# NAME:    build
	# LABELS:  envrionment_from
	# USES:    base env
	# USED_BY: service

	python_target="${python_target_override:-$( portageq envvar 'PYTHON_SINGLE_TARGET' )}"

	# shellcheck disable=SC2086,SC2140
	$docker image build \
			${IMAGE_ROOT:+--storage-opt="overlay.imagestore=${GRAPH_ROOT}" --root "${IMAGE_ROOT}"} \
			--platform "linux/${docker_arch}" \
			--build-arg env_id="${env_id}" \
			--build-arg environment_filter="${environment_filter}" \
			--compress \
			--file 'Dockerfile.build' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${build_name}-root:latest" \
		. 2>&1 | tee ../log/"docker.${build_name}.log"
			#--network slirp4netns \

	(
		# dev-libs/icu is needed for circular dependencies on
		#   icu -> python -> sqlite -> icu
		#
		# sys-libs/libeudev is needed to ensure correct dependencies in the
		# build root
		# sys-apps/sed is needed due to use of 'sed -z', which busybox doesn't
		# support
		#
		# Even though we want a minimal set of flags at this point, gcc's flags
		# are significant since they'll affect the compiler facilities
		# available to all packages built later...
		# FIXME: Source these flags from package.use
		#
		# shellcheck disable=SC2031
		export name="${build_name}"
		# shellcheck disable=SC2031
		export image="${build_name}-root:latest"
		# shellcheck disable=SC2030
		if [[ -n "${IMAGE_ROOT:-}" ]]; then
			export DOCKER_VARS="--storage-opt=\"overlay.imagestore=${GRAPH_ROOT}\" --root \"${IMAGE_ROOT}\""
		fi
		# shellcheck disable=SC2086
		if eval $docker ${DOCKER_VARS:-} container exists --external "${name}"; then
			warn "Container with name '${name}' already exists:"
			eval $docker ${DOCKER_VARS:-} container ps --noheading -a | grep -F "${name}"
			eval $docker ${DOCKER_VARS:-} container stop "${name}" || :
			eval $docker ${DOCKER_VARS:-} container rm -v "${name}"
		fi
		docker_run \
				${use_pypy_pre:+--pre-pkgs="${use_pypy_pre}"} \
				${use_pypy_pre_use:+--pre-use="${use_pypy_pre_use}"} \
				--post-pkgs="app-arch/tar${use_pypy_post:+ ${use_pypy_post}}" \
				--post-use="-* ${use_essential:-} xattr ${use_pypy_post_use:-}" \
				--update \
				--usepkg=y \
				--with-bdeps-auto=n \
				--with-bdeps=n \
				--with-use="$( echo \
					"-* -lib-only" \
					"pkg-config ${use_essential:-} curl_ssl_openssl openssl ssl " \
					"python_single_target_${python_target}" \
					"python_targets_${python_target}" \
					"${use_pypy_use:+python_targets_pypy3 ${use_pypy_use:-}}" \
					"graphite nptl openmp pch sanitize ssp vtv zstd"
				)" \
			sys-devel/gcc sys-apps/sed dev-libs/icu dev-util/pkgconf sys-libs/libeudev \
			@system \
			${use_pypy:+sys-apps/portage ${use_pypy:-}} 2>&1 |
		tee -a ../log/"docker.${build_name}.log"
	)
	output " -> ${?}"

	output
	output " ${blue}*${reset} Saving container '${build_name}' as image" \
		"'${build_name}:latest' ..."
	output
	trap '' INT
	# shellcheck disable=SC2031,SC2086,SC2140
	$docker \
			${IMAGE_ROOT:+--storage-opt="overlay.imagestore=${GRAPH_ROOT}" --root "${IMAGE_ROOT}"} 2>&1 \
		container commit "${build_name}" "${build_name}:latest" |
	tee -a ../log/"docker.${build_name}.log"
	# shellcheck disable=SC2031,SC2086,SC2140
	$docker \
			${IMAGE_ROOT:+--storage-opt="overlay.imagestore=${GRAPH_ROOT}" --root "${IMAGE_ROOT}"} 2>&1 \
		container rm --volumes "${build_name}" |
	tee -a ../log/"docker.${build_name}.log"
	# shellcheck disable=SC2031,SC2086,SC2140
	$docker \
			${IMAGE_ROOT:+--storage-opt="overlay.imagestore=${GRAPH_ROOT}" --root "${IMAGE_ROOT}"} 2>&1 \
		image rm "${build_name}-root:latest" |
	tee -a ../log/"docker.${build_name}.log"
	output " -> ${?}"
	trap - INT

	output
	output " ${blue}*${reset} Stage 'build' complete - all done"
	output
else
	checkids "${base_name}"
fi

set +o xtrace

#popd >/dev/null
