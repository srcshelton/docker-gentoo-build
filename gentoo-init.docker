#! /usr/bin/env bash

set -eu
set -o pipefail

trace="${TRACE:-}"
debug="${DEBUG:-}"
# With 'debug' enabled, set 'DEBUG_EXTRA_ARGS' to pass additional arguments
#Â to 'podman build'...

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

docker='docker'
env_name=''
init_name=''
stage3_name=''
base_name=''
build_name=''
environment_filter=''
bold=''
red=''
blue=''
reset=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

[ -d gentoo-base ]
[ -e gentoo-base/Dockerfile.env ]
[ -e gentoo-base/Dockerfile.init ]
[ -e gentoo-base/Dockerfile.build ]

[ -d log ] || mkdir log

# shellcheck disable=SC2034
IMAGE="${base_name}:latest"
# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh

if
	[ -z "${env_name:-}" ] ||
	[ -z "${init_name:-}" ] ||
	[ -z "${stage3_name:-}" ] ||
	[ -z "${base_name:-}" ] ||
	[ -z "${build_name:-}" ]
then
	die "Image names not correctly set in '${pwd}/common/vars.sh'"
fi

if [ -n "${*:-}" ]; then
	if echo " ${*} " | grep -Eq -- ' -(h|-help) '; then
		echo >&2 "Usage: $( basename "${0}" ) [--env] [--stage3] [--init] [[--force] --base] [[--force] --build]"
		exit 0
	elif ! echo "${*}" | grep -Eq -- '^(\s*--(env|stage3|init|base|build|force)\s*){1,6}$'; then
		die "Unknown args '${*}'"
	fi

	if echo " ${*} " | grep -Fq -- ' --force '; then
		if ! echo " ${*} " | grep -Eq -- ' --(base|build) '; then
			die "'--force' is only valid with '--base' or '--build'"
		fi
	fi
fi

if (( EUID )); then
	die "Please re-run '$( basename "${0}" )' as user 'root'"
fi

docker_setup

#pushd >/dev/null gentoo-base
cd gentoo-base || die "chdir() to 'gentoo-base' failed; ${?}"

# Moved to common/run.sh...
#
#case "$( uname -m )" in
#	aarch64)
#		docker_arch='arm64'
#		arch='arm64'
#		profile='17.0'
#		chost='aarch64-pc-linux-gnu'
#		;;
#	arm7l)
#		docker_arch='amd/v7'
#		arch='arm'
#		profile='17.0/armv7a'
#		chost='armv7a-hardfloat-linux-gnueabihf'
#		;;
#	armv6l)
#		docker_arch='amd/v6'
#		arch='arm'
#		profile='17.0/armv6j'
#		chost='armv6j-hardfloat-linux-gnueabihf'
#		;;
#	x86_64)
#		docker_arch='amd64'
#		arch='amd64'
#		profile='17.1/no-multilib'
#		chost='x86_64-pc-linux-gnu'
#		;;
#	*)
#		die "Unknown architecture '$( uname -m )'"
#		;;
#esac

sum="$( sha1sum entrypoint.sh )"
sum="$( echo "${sum}" | cut -d' ' -f 1 )"
env_id="$( $docker image ls --format='{{.ID}}' "${env_name}:latest" 2>/dev/null )" || :
stage3_id="$( $docker image ls --format='{{.ID}}' "${stage3_name}:latest" 2>/dev/null )" || :

[ -n "${trace:-}" ] && set -o xtrace

# Create empty stage with shared environment variables ...
#
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --env '; then
	echo
	echo " ${blue}*${reset} Creating image '${env_name}:latest' ..."
	echo

	# NAME:    env
	# LABELS:  
	# USES:    
	# USED_BY: stage3 build

	# shellcheck disable=SC2086
	$docker build \
			--override-arch "${docker_arch}" \
			--arch "${docker_arch}" \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg PROFILE_PATH="${profile:-}" \
			--build-arg CHOST="${chost:-}" \
			--build-arg JOBS="${JOBS:-}" \
			--build-arg MAXLOAD="${MAXLOAD:-}" \
			--build-arg SET_TERM="${TERM:-}" \
			--build-arg SET_USE_ESSENTIAL="${use_essential:-}" \
			--compress \
			--file 'Dockerfile.env' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${env_name}:latest" \
			--rm \
		. 2>&1 | tee ../log/"docker.${env_name}.log"
			#--network slirp4netns \
	echo " -> ${?}"

	[ "${*:-}" = '--env' ] && exit 0

	env_id="$( $docker image ls --format='{{.ID}}' "${env_name}:latest" 2>/dev/null )"

	echo
	echo " ${blue}*${reset} Stage 'env' complete, next is 'stage3' ..."
	echo
fi

stage3_image="$( grep -- '^ARG stage3_image=' Dockerfile.stage3 )"
stage3_image="$( echo "${stage3_image}" | cut -d'"' -f 2 )"

if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --stage3 '; then
	if [ -z "${env_id:-}" ]; then
		die "Environment stage not found - please run '$( basename "${0}" ) --env'"
	fi

	echo
	echo " ${blue}*${reset} Creating image '${stage3_name}:latest' ..."
	echo

	# We have to 'pull' manually, or else this stage fails ...
	stage3_image="$( grep -- '^ARG stage3_image=' Dockerfile.stage3 | cut -d'"' -f 2 )"
	trap '' INT
	$docker image pull --override-arch "${docker_arch}" -q "${stage3_image}:latest"
	trap - INT
	stage3_id="$( $docker image ls --format='{{.ID}}' "${stage3_image}:latest" 2>/dev/null )" || :

	# NAME:    stage3
	# LABELS:  envrionment_from stage3_from
	# USES:    [gentoo/stage3-amd64] env
	# USED_BY: init

	# shellcheck disable=SC2086
	$docker build \
			--override-arch "${docker_arch}" \
			--arch "${docker_arch}" \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg env_id="${env_id}" \
			--build-arg stage3_id="${stage3_id}" \
			--build-arg stage3_image="${stage3_image}" \
			--compress \
			--file 'Dockerfile.stage3' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${stage3_name}:latest" \
		. 2>&1 | tee -a ../log/"docker.${env_name}.log"
			#--network slirp4netns \
	echo " -> ${?}"

	[ "${*:-}" = '--stage3' ] && exit 0

	stage3_id="$( $docker image ls --format='{{.ID}}' "${stage3_image}:latest" 2>/dev/null )"

	echo
	echo " ${blue}*${reset} Stage 'stage3' complete, next is 'init' ..."
	echo
fi

stage3_image="$( grep -- '^ARG stage3_image=' Dockerfile.stage3 | cut -d'"' -f 2 )"
stage3_id="$( $docker image ls --format='{{.ID}}' "${stage3_image}:latest" )"

# Create initial image from Gentoo stage3 ...
#
if [ -n "${*:-}" ] && ! echo " ${*} " | grep -Fq -- ' --init '; then
	# Executed individually, `$docker image ls` and `grep` both succeed.
	# With 'pipefail' disabled, the following test does the right thing.
	# However, with pipefail set the statement is interpreted to have
	# failed?!
	#
	# Update: Less of an issue now that pipefail has been dropped :)
	#
	images="$( $docker image ls "${init_name}" 2>/dev/null )"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${init_name}"; then
		imagesum="$( $docker image inspect --format='{{.Config.Labels.entrypoint_sum}}' "${init_name}:latest" 2>/dev/null )" || :
		if [ "${imagesum:-}" != "${sum}" ]; then
			if echo " ${*} " | grep -Fq -- ' --force '; then
				echo >&2
				echo >&2 "${bold}WARN${reset}:  ${red}entrypoint.sh sum from '${init_name}:latest' image (${imagesum:-<unknown>}) does not match file on disk (${sum}) - forcing continuation with existing embedded script ...${reset}"
			else
				echo >&2
				echo >&2 "${bold}WARN${reset}:  ${red}entrypoint.sh sum from '${init_name}:latest' image (${imagesum:-<unknown>}) does not match file on disk (${sum}) - rebuilding initial image ...${reset}"
				set --
			fi
		fi
	else
		echo >&2 "docker image '${init_name}' not found - rebuilding initial image ..."
		set --
	fi
fi

if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --init '; then
	if [ -z "${stage3_id:-}" ]; then
		die "Gentoo stage 3 not found - please execute '$( basename "${0}" ) --stage3'"
	fi

	echo
	echo " ${blue}*${reset} Creating image '${init_name}:latest' ..."
	echo

	images="$( $docker image ls "${stage3_name}" 2>/dev/null )"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${stage3_name}"; then
		stage3_env_id="$( $docker image inspect --format='{{.Config.Labels.envrionment_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_env_id="$( echo "${stage3_env_id}" | cut -d':' -f 2- )"
		if [ "${env_id}" != "${stage3_env_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The current 'environment' image differs from that used to build the 'stage3' image about to be linked to this stage${reset}"
		fi
		stage3_src_id="$( $docker image inspect --format='{{.Config.Labels.stage3_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_src_id="$( echo "${stage3_src_id}" | cut -d':' -f 2- )"
		if [ "${stage3_id}" != "${stage3_src_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The upstream 'stage3' image differs from that used to build the 'stage3' image about to be linked to this stage${reset}"
		fi
	fi

	# NAME:    init
	# LABELS:  stage3_from entrypoint_sum
	# USES:    stage3
	# USED_BY: base

	# shellcheck disable=SC2086
	$docker build \
			--override-arch "${docker_arch}" \
			--arch "${docker_arch}" \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg entrypoint_sum="${sum}" \
			--build-arg environment_filter="${environment_filter}" \
			--build-arg stage3_id="${stage3_id}" \
			--build-arg stage3_image="${stage3_image}" \
			--compress \
			--file 'Dockerfile.init' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${init_name}:latest" \
		. 2>&1 | tee ../log/"docker.${init_name}.log"
			#--network slirp4netns \
	echo " -> ${?}"

	echo
	echo " ${blue}*${reset} Stage 'init' complete, next is 'base' ..."
	echo
fi

# Launch initial image and run entrypoint script to install root @system, then
# snapshot the result to create a base image ...
#
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --base '; then
	images="$( $docker image ls "${init_name}" 2>/dev/null )"
	if ! echo "${images}" | grep -Eq -- "^(localhost/)?${init_name}"; then
		#die "base stage: docker image '${init_name}' not found"
		die "Initial stage not found - please execute '$( basename "${0}" ) --init'"
	fi

	echo
	echo " ${blue}*${reset} Deploying container '${base_name}' from image '${init_name}:latest' ..."
	echo

	images="$( $docker image ls "${stage3_name}" 2>/dev/null )"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${stage3_name}"; then
		stage3_env_id="$( $docker image inspect --format='{{.Config.Labels.envrionment_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_env_id="$( echo "${stage3_env_id}" | cut -d':' -f 2- )"
		if [ "${env_id}" != "${stage3_env_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The current 'environment' image differs from that used to build the 'stage3' image inherited by this stage${reset}"
		fi
		stage3_src_id="$( $docker image inspect --format='{{.Config.Labels.stage3_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_src_id="$( echo "${stage3_src_id}" | cut -d':' -f 2- )"
		if [ "${stage3_id}" != "${stage3_src_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The upstream 'stage3' image differs from that used to build the 'stage3' image inherited by this stage${reset}"
		fi
	fi

	# Handle leftover container from previous run ...
	trap '' INT
	if $docker ps -a | grep -q -- "${base_name}$"; then
		$docker stop "${base_name}" 2>&1 | tee -a ../log/"docker.${base_name}.log" || :
		$docker rm --volumes "${base_name}" 2>&1 | tee -a ../log/"docker.${base_name}.log" || :
	fi
	trap - INT

	# NAME:    base
	# LABELS:  (stage3_from) (entrypoint_sum)
	# USES:    (init)
	# USED_BY: build

	# For some reason, installing glibc to a ROOT results in valid libcrypt
	# symlinks being installed, but the actual libraries missing?!
	#
	(
		# Add '@preserved-rebuild' for potential outdated stage3 base-images...
		post='dev-util/pkgconf sys-libs/glibc @preserved-rebuild sys-apps/portage'
		portageq get_repos / | grep -q -- 'srcshelton' &&
			post+=' sys-apps/gentoo-functions::srcshelton'
		# shellcheck disable=SC2030
		export name="${base_name}"
		# shellcheck disable=SC2030
		export image="${init_name}:latest"
		docker_run \
				--post-pkgs="${post}" \
				--usepkg=y \
				--with-bdeps-auto=n \
				--with-bdeps=n \
			virtual/libc 2>&1 |
		tee ../log/"docker.${base_name}.log"
	)
	echo " -> ${?}"

	echo
	echo " ${blue}*${reset} Saving container '${base_name}' as image '${base_name}:latest' ..."
	echo

	# shellcheck disable=SC2086
	trap '' INT
	$docker commit "${base_name}" "${base_name}:latest" 2>&1 | tee -a ../log/"docker.${base_name}.log"
	$docker rm --volumes "${base_name}" 2>&1 | tee -a ../log/"docker.${base_name}.log"
	trap - INT
	echo " -> ${?}"

	echo
	echo " ${blue}*${reset} Stage 'base' complete, next is 'build' ..."
	echo
fi

# Ensure that @system is correctly installed to ROOT=/ and snapshot result as
# build image.
if [ -z "${*:-}" ] || echo " ${*} " | grep -Fq -- ' --build '; then
	images="$( $docker image ls "${base_name}" 2>/dev/null )"
	if ! echo "${images}" | grep -Eq -- "^(localhost/)?${base_name}"; then
		#die "build stage: docker image '${base_name}' not found"
		die "Base stage not found - please execute '$( basename "${0}" ) --base'"
	fi

	echo
	echo " ${blue}*${reset} Deploying container '${build_name}' ..."
	echo

	images="$( $docker image ls "${stage3_name}" 2>/dev/null )"
	if echo "${images}" | grep -Eq -- "^(localhost/)?${stage3_name}";  then
		stage3_env_id="$( $docker image inspect --format='{{.Config.Labels.envrionment_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_env_id="$( echo "${stage3_env_id}" | cut -d':' -f 2- )"
		if [ "${env_id}" != "${stage3_env_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The current 'environment' image differs from that used to build the 'stage3' image inherited by this stage${reset}"
		fi
		stage3_src_id="$( $docker image inspect --format='{{.Config.Labels.stage3_from}}' "${stage3_name}:latest" 2>/dev/null )" || :
		stage3_src_id="$( echo "${stage3_src_id}" | cut -d':' -f 2- )"
		if [ "${stage3_id}" != "${stage3_src_id:-}" ]; then
			echo >&2 "${bold}WARN${reset}:  ${red}The upstream 'stage3' image differs from that used to build the 'stage3' image inherited by this stage${reset}"
		fi
	fi

	# Handle leftover container from previous run ...
	trap '' INT
	# shellcheck disable=SC2015
	if $docker ps -a | grep -q -- "${build_name}$"; then
		$docker stop "${build_name}" 2>&1 | tee -a ../log/"docker.${build_name}.log" || :
		$docker rm --volumes "${build_name}" 2>&1 | tee -a ../log/"docker.${build_name}.log" || :
	fi
	# shellcheck disable=SC2015
	$docker image ls "${build_name}-root:latest" 2>/dev/null | grep -Eq -- "^(localhost/)?${build_name}-root\s+latest\s" &&
		{ $docker image rm "${build_name}-root:latest" 2>&1 | tee -a ../log/"docker.${build_name}.log" ; } || :
	trap - INT

	# NAME:    build
	# LABELS:  envrionment_from
	# USES:    base env
	# USED_BY: service

	python_target="$( portageq envvar 'PYTHON_SINGLE_TARGET' )"

	# shellcheck disable=SC2086
	$docker build \
			--override-arch "${docker_arch}" \
			--arch "${docker_arch}" \
			--platform "linux/${docker_arch}" \
			--build-arg ARCH="${arch}" \
			--build-arg env_id="${env_id}" \
			--build-arg environment_filter="${environment_filter}" \
			--compress \
			--file 'Dockerfile.build' \
			${debug:+--loglevel 3 ${DEBUG_EXTRA_ARGS:-}} \
			--network none \
			--no-cache \
			--tag "${build_name}-root:latest" \
		. 2>&1 | tee ../log/"docker.${build_name}.log"
			#--network slirp4netns \

	(
		# dev-libs/icu is needed for circular dependencies on icu -> python -> sqlite -> icu
		# sys-libs/libeudev is needed to ensure correct dependencies in the build root
		# shellcheck disable=SC2031
		export name="${build_name}"
		# shellcheck disable=SC2031
		export image="${build_name}-root:latest"
		docker_run \
				${use_pypy_pre:+--pre-pkgs="${use_pypy_pre:-}"} \
				${use_pypy_pre_use:+--pre-use="${use_pypy_pre_use:-}"} \
				--post-pkgs="app-arch/tar${use_pypy_post:+ ${use_pypy_post:-}}" \
				--post-use="-* ${use_essential:-} xattr ${use_pypy_post_use:-}" \
				--update \
				--usepkg=y \
				--with-bdeps-auto=n \
				--with-bdeps=n \
				--with-use="-* -lib-only pkg-config ${use_essential:-} python_single_target_${python_target} python_targets_${python_target} ${use_pypy_use:+python_targets_pypy3 ${use_pypy_use:-}}" \
			sys-devel/gcc dev-libs/icu dev-util/pkgconf sys-libs/libeudev @system ${use_pypy:+sys-apps/portage ${use_pypy:-}} 2>&1 | tee -a ../log/"docker.${build_name}.log"
	)
	echo " -> ${?}"

	echo
	echo " ${blue}*${reset} Saving container '${build_name}' as image '${build_name}:latest' ..."
	echo
	trap '' INT
	# shellcheck disable=SC2086
	$docker commit "${build_name}" "${build_name}:latest" 2>&1 | tee -a ../log/"docker.${build_name}.log"
	# shellcheck disable=SC2086
	$docker rm --volumes "${build_name}" 2>&1 | tee -a ../log/"docker.${build_name}.log"
	# shellcheck disable=SC2086
	$docker image rm "${build_name}-root:latest" 2>&1 | tee -a ../log/"docker.${build_name}.log"
	echo " -> ${?}"
	trap - INT

	echo
	echo " ${blue}*${reset} Stage 'build' complete - all done"
	echo
fi

set +o xtrace

#popd >/dev/null
