#! /usr/bin/env bash

set -u

zeushome="/opt/zeus"

[[ -d "${zeushome:-}" ]] || exit 1

#zcli="${zeushome}/zxtm/bin/zcli --formatoutput"
zhttp="${zeushome}/admin/bin/httpclient"
provisionlog='/var/log/zeus/provision.log'
configimport="${zeushome}/zxtm/bin/config-import"
configsnapshot="${zeushome}/zxtm/bin/config-snapshot"
watchdirectory="${zeushome}/zxtm/bin/watch-directory"

plog() {
	local level="${1:-"INFO"}" # INFO WARN ERROR FATAL
	local msg="${2:-}"
	local quiet="${3:-}"

	mkdir -p "$( dirname "${provisionlog}" )"

	if [[ "${quiet}" == 'quiet' ]]; then
		echo "${level}: ${msg}" >> "${provisionlog}"
	else
		echo "${level}: ${msg}" | tee -a "${provisionlog}"
	fi
} # plog

genPasswd() {
	# extern ZEUS_PASS

	local -a chars=()
	local -i length=256 i=0 rnd=0
	local rnd_bytes='' rnd_byte='' rnd='' pass=''

	if [[ "${ZEUS_PASS:-}" =~ (RANDOM|SIMPLE|STRONG) ]]; then
		if [[ "${ZEUS_PASS}" != 'STRONG' ]]; then
			# Default for RANDOM/SIMPLE is alphanumeric with , . - + _
			chars=( a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 \
				A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ',' . - + _ )
			length=9
		else
			# Use Extra Strong Passwords (more symbols)
			chars=( a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 \
				A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ',' . '<' '>' ~ '#' '[' ']' \
				- '=' + _ '*' '&' ^ % $ ';' : '(' ')' )
			length=16
		fi

		rnd_bytes="$( "${zeushome}"/zxtm/bin/zxtmsecret -i <( head -c $(( length << 4 )) /dev/urandom ) -l ${length} -t 'dev-random-container-password' -x )"
		for (( i = 0 ; i < length ; i ++ )); do
			rnd_byte="${rnd_bytes:2*${i}:2}"
			#rnd_byte=`echo $((0x$rnd_byte))`
			(( rnd_byte = $( printf '%d' "0x${rnd_byte}" ) ))
			(( rnd = rnd_byte % ${#chars[@]} ))
			pass+="${chars[${rnd}]}"
		done

		ZEUS_PASS="${pass}"

		plog INFO "Generated random password for vTM: '${ZEUS_PASS}'" quiet
	elif [[ -n "${ZEUS_PASS:-}" ]]; then
		plog INFO "Using environment password for vTM: '${ZEUS_PASS}'" quiet
	fi

	echo "${ZEUS_PASS:-}"
} # genPasswd

#extern ZEUS_EULA ZEUS_PACKAGES ZEUS_PASS ZEUS_LIC ZEUS_LIC_URL ZEUS_CLUSTER_NAME ZEUS_CLUSTER_PORT ZEUS_CLUSTER_FP ZEUS_REGISTER_HOST ZEUS_REGISTER_EMAIL ZEUS_REGISTER_MSG ZEUS_REGISTER_POLICY ZEUS_REGISTER_OWNER ZEUS_REGISTER_SECRET ZEUS_COMMUNITY_EDITION ZEUS_BASE_CONFIG ZEUS_CONFIG_IMPORT_ARGS ZEUS_WATCHED_CONFIG
declare -i retries=1 skipsetup=0
declare join='n' register='n' hostport=''

# Try to fix bad symlinks...
#
# N.B. This will likely only work if we're still running as 'root' at this
#      point in time
declare badlink=''
find /var/ -mindepth 1 -maxdepth 1 -type l ! -exec test -e {} \; -print | while read -r badlink; do
	mkdir -p -m 0755 "$( readlink -f "${badlink}" )" || plog ERROR "Unable to remap broken symlink '${badlink}'"
done
unset badlink

plog INFO 'Container started'

# Check that the user has accepted the licence
if [[ "${ZEUS_EULA:-}" != 'accept' ]]; then
	plog FATAL 'Please accept the vTM EULA by supplying the "ZEUS_EULA=accept" environment variable'
	exit 1
fi

if ! [[ -L "${zeushome}"/zxtm/conf ]]; then
	plog FATAL "Filesystem object '${zeushome}/zxtm/conf' should be a symbolic link, but is actually of type $( stat --format='%F' "${zeushome}"/zxtm/conf 2>/dev/null || echo 'missing' )"
	echo >&2
	echo >&2 "Filesystem contents of '${zeushome}/zxtm':"
	ls -l "${zeushome}"/zxtm/ >&2
	echo >&2
	exit 1
fi

if [[ -s "${zeushome}"/zxtm/conf/users ]] && grep -q -- password "${zeushome}"/zxtm/conf/users; then
	rm -f "${zeushome}"/zconfig.txt
	skipsetup=1
fi

# Configure vTM on the first run of this instance
#
# N.B. If the image is screwed-up and ${zeushome}/zxtm/conf is not a symlink
#      pointing to conf_A in the same directory, the steps below fail with:
#
#        FATAL: No value supplied in replay file, perhaps you need to re-record?
#        ERROR: Configuring vTM failed, retry: 6
#        FATAL: Failed to configure vTM
#
# TODO: Investigate whether this is a result of the incorrect status of 'conf',
#       or whether the process below is now bit-rotten...
#
if (( ! skipsetup )) && [[ ! -f "${zeushome}"/.docker.done ]]; then
	plog INFO 'Container first run: STARTING'

	# Install additional packages if ZEUS_PACKAGES is set.
	# It should be set to a list of ubuntu packages
	#
	#if [[ -n "${ZEUS_PACKAGES:-}" ]]; then
	#	plog INFO "Installing packages: ${ZEUS_PACKAGES} ..."
	#
	#	apt-get update
	#	for package in ${ZEUS_PACKAGES}; do
	#		dpkg -l "${package}" | grep -Eq -- "^ii"
	#		if (( ${?} )); then
	#			DEBIAN_FRONTEND=noninteractive \
	#			apt-get install -y --no-install-recommends "${package}"
	#			if (( ${?} )); then
	#				plog FATAL "Failed to install package '${package}': ${?}"
	#				exit 1
	#			fi
	#		fi
	#	done
	#	rm -rf /var/lib/apt/lists/*
	#fi

	ZEUS_PASS="$( genPasswd )"

	if [[ "${ZEUS_LIC:-}" =~ https?://.* ]]; then
		ZEUS_LIC_URL="${ZEUS_LIC}"
		plog INFO "Downloading licence key from '${ZEUS_LIC_URL}' ..."

		# '--no-verify-host'... could be another ZXTM?
		if $zhttp --no-verify-host -b "${ZEUS_LIC}" > /tmp/fla.lic; then
			ZEUS_LIC=/tmp/fla.lic
		else
			plog FATAL "Failed to download the licence from '${ZEUS_LIC}'"
			exit 1
		fi
	fi

	cat <<-EOF >> "${zeushome}"/zconfig.txt
		accept-license=${ZEUS_EULA:-}
		admin!password=${ZEUS_PASS:-}
		Zeus::ZInstall::Common::get_password:Please choose a password for the admin server=${ZEUS_PASS:-}
		Zeus::ZInstall::Common::get_password:Re-enter=${ZEUS_PASS:-}
		zxtm!license_key=${ZEUS_LIC:-}
	EOF

	if [[ -n "${ZEUS_CLUSTER_NAME:-}" ]]; then
		if [[ -z "${ZEUS_CLUSTER_PORT:-}" ]]; then
			ZEUS_CLUSTER_PORT=9090
		fi

		if [[ -n "${ZEUS_CLUSTER_FP:-}" ]]; then
			plog INFO "Checking cluster fingerprint: '${ZEUS_CLUSTER_FP}' ..."
			if $zhttp --fingerprint="${ZEUS_CLUSTER_FP}" --verify \
				--no-verify-host "https://${ZEUS_CLUSTER_NAME}:${ZEUS_CLUSTER_PORT}" > /dev/null; then
				join='y'
			else
				plog ERROR "Fingerprint does not match - clustering skipped"
			fi
		else
			join='y'
		fi

		if [[ "${join}" == 'y' ]]; then
			plog INFO "Configuring cluster join: ${ZEUS_CLUSTER_NAME}:${ZEUS_CLUSTER_PORT} ..."

			while [[ -n "$( $zhttp --no-verify-host "https://${ZEUS_CLUSTER_NAME}:${ZEUS_CLUSTER_PORT}" >/dev/null )" ]]; do
				# No max-run counter/limit? :o
				sleep 1
			done

			sed -i 's/zxtm!cluster=C/zxtm!cluster=S/' "${zeushome}"/zconfig.txt
			cat <<-EOF >> "${zeushome}"/zconfig.txt
				zlb!admin_hostname=${ZEUS_CLUSTER_NAME}
				zlb!admin_password=${ZEUS_PASS}
				zlb!admin_port=${ZEUS_CLUSTER_PORT}
				zlb!admin_username=admin
				zxtm!clustertipjoin=p
				zxtm!fingerprints_ok=Y
				zxtm!join_new_cluster=Y
			EOF
		fi
	fi

	# Setup the configuration for self registration with SD
	if [[ -n "${ZEUS_REGISTER_HOST:-}" ]]; then

		# This line looks to contain multiple typos:
		#  * should '($(' be '$(('?
		#    * likely not, because 'hostport' appears to be space-separated 'host' and 'port'
		#    * ... in which case, the 'sed' action is run in a sub-shell?
		#  * why the '-r' flag to 'sed' with a simple expression?
		#hostport=($( echo "${ZEUS_REGISTER_HOST}" | sed -re 's/:/ /' ))
		hostport="${ZEUS_REGISTER_HOST/:/ }"

		if [[ -n "${ZEUS_REGISTER_FP:-}" ]]; then
			plog INFO "Checking BSD fingerprint: '${ZEUS_REGISTER_FP}' ..."
			if $zhttp --fingerprint="${ZEUS_REGISTER_FP}" --verify \
				--no-verify-host "https://${ZEUS_REGISTER_HOST}" > /dev/null; then
				register='y'
			else
				plog ERROR "Fingerprint does not match - Services Director registration skipped"
			fi
		else
			register='y'
		fi
		if [[ "${register}" == 'y' ]]; then
			plog INFO "Configuring Services Director registration ..."
			cat <<-EOF >> "${zeushome}"/zconfig.txt
				selfreg!register=y
				selfreg!address=${hostport[0]}
				selfreg!port=${hostport[1]}
				selfreg!fingerprint_ok=y
				selfreg!email_addr=${ZEUS_REGISTER_EMAIL}
				selfreg!message=${ZEUS_REGISTER_MSG}
				selfreg!policy_id=${ZEUS_REGISTER_POLICY}
				selfreg!owner=${ZEUS_REGISTER_OWNER}
				selfreg!owner_secret=${ZEUS_REGISTER_SECRET}
				Zeus::ZInstall::Common::get_password:Enter the secret associated with the chosen Owner=${ZEUS_REGISTER_SECRET}
			EOF
		fi
	fi

	if [[ -n "${ZEUS_COMMUNITY_EDITION:-}" ]]; then
		plog INFO "Accepting Community Edition licence ..."
		echo "zxtm!community_edition_accepted=y" >> "${zeushome}"/zconfig.txt
	fi

	plog INFO "Configuring vTM ..."
	until "${zeushome}"/zxtm/configure --nostart --noninteractive --noloop --replay-from="${zeushome}"/zconfig.txt; do
		sleep 10
		plog ERROR "Configuring vTM failed, retry: ${retries}"

		if (( retries < 4 )); then
			# this might be due to a missing licence.
			# let's try to re-download if provided over HTTP.
			if [[ "${ZEUS_LIC:-}" =~ https?://.* ]]; then
				plog WARN "Retrying licence key download ..."
				if ! $zhttp --no-verify-host -b "${ZEUS_LIC_URL}" > /tmp/fla.lic; then
					plog FATAL "Failed to download the licence from '${ZEUS_LIC}': ${?}"
					exit 1
				fi
			fi
		elif (( 4 == retries )); then
			plog WARN "Disabling licence and clustering requests ..."
			if [[ -n "${ZEUS_CLUSTER_NAME:-}" ]]; then
				plog WARN "Dropping cluster join for final configuration attempt (${retries}) ..."
				sed -i 's/zxtm!join_new_cluster=Y/zxtm!join_new_cluster=N/' "${zeushome}"/zconfig.txt
				sed -i 's/zxtm!cluster=S/zxtm!cluster=C/' "${zeushome}"/zconfig.txt
			fi
			if [[ -n "${ZEUS_LIC:-}" ]]; then
				plog WARN "Dropping licence key for final configuration attempt (${retries}) ..."
				sed -i 's/\/tmp\/fla.lic//' "${zeushome}"/zconfig.txt
			fi
		elif (( retries > 5 )); then
			plog FATAL "Failed to configure vTM"
			exit 1
		fi
		(( retries ++ ))
	done

	# Clear the password
	export ZEUS_PASS=''

	if [[ -n "${ZEUS_BASE_CONFIG:-}" ]]; then
		if [[ ! -x "${configimport:-}" ]]; then
			plog FATAL "Configuration importer not available, unset 'ZEUS_BASE_CONFIG'"
			exit 1
		fi

		if [[ ! -d "${ZEUS_BASE_CONFIG}" ]]; then
			plog FATAL "ZEUS_BASE_CONFIG value '${ZEUS_BASE_CONFIG}' is not a directory"
			exit 1
		fi

		plog INFO "Importing configuration from '${ZEUS_BASE_CONFIG}' ..."

		# shellcheck disable=SC2086
		ZEUSHOME="${zeushome}" \
			"${configimport}" ${ZEUS_CONFIG_IMPORT_ARGS} --chdir "${ZEUS_BASE_CONFIG}" config
		# shellcheck disable=SC2181
		if (( ${?} )); then
			plog FATAL "Failed to import configuration from '${ZEUS_BASE_CONFIG}'"
			exit 1
		else
			plog INFO "Configuration imported"
		fi
	fi

	if [[ -x "${configsnapshot:-}" ]]; then
		ZEUSHOME="${zeushome}" \
			$configsnapshot
	fi

	if [[ -n "${ZEUS_WATCHED_CONFIG:-}" ]]; then
		if [[ ! -x "${watchdirectory:-}" ]]; then
			plog FATAL "Configuration watcher not available, unset 'ZEUS_WATCHED_CONFIG'"
			exit 1
		fi

		if [[ ! -d "${ZEUS_WATCHED_CONFIG:-}" ]]; then
			plog FATAL "ZEUS_WATCHED_CONFIG value '${ZEUS_WATCHED_CONFIG}' is not a directory"
			exit 1
		fi
	fi

	touch "${zeushome}"/.docker.done
	rm "${zeushome}"/zconfig.txt
	plog INFO "Container first run COMPLETE"
fi # (( ! skipsetup )) && [[ ! -f "${zeushome}"/.docker.done ]]

# We'll mount over conf_A, so always link this!
rm "${zeushome}"/zxtm/conf && ln -s conf_A "${zeushome}"/zxtm/conf
# Try to fix-up symlinks...
#rm "${zeushome}"/zxtm/conf && ln -s "$( basename "$( ls -1drt "${zeushome}"/zxtm/conf_* | tail -n 1 )" )" "${zeushome}"/zxtm/conf
# shellcheck disable=SC2012
rm "${zeushome}"/zxtm/global.cfg && ln -s "conf/zxtms/$( ls -1rt "${zeushome}"/zxtm/conf/zxtms/ | tail -n 1 )" "${zeushome}"/zxtm/global.cfg

if type -pf eselect  >/dev/null 2>&1 && [[ -s /usr/share/eselect/modules/iptables.eselect ]]; then
	plog INFO "Setting iptables implementation ..."
	if ! eselect iptables set xtables-nft-multi; then
		plog WARN "Failed to switch to NFT iptables back-end"
		eselect iptables list
	fi
else
	plog WARN "Unable to switch to NFT iptables back-end"
fi
if ! [[ -x /sbin/ip6tables ]] || ! file /sbin/ip6tables 2>&1 | grep -q -- 'File: .* -> xtables-nft-multi'; then
	plog WARN "Creating missing ip6tables symlinks ..."
	ln -sf xtables-nft-multi /sbin/ip6tables
	[[ -x /sbin/ip6tables-restore ]] || ln -sf xtables-nft-multi /sbin/ip6tables-restore
	[[ -x /sbin/ip6tables-save ]] || ln -sf xtables-nft-multi /sbin/ip6tables-save
fi

# Start Zeus
plog INFO "Starting traffic manager ..."
"${zeushome}"/start-zeus

# Start config watcher
if [[ -n "${ZEUS_WATCHED_CONFIG:-}" ]]; then
	plog INFO "Watching configuration in '${ZEUS_WATCHED_CONFIG}' ..."
	# shellcheck disable=SC2086
	ZEUSHOME="${zeushome}" \
	$watchdirectory "${ZEUS_WATCHED_CONFIG}" -- \
		$configimport --chdir "${ZEUS_WATCHED_CONFIG}" \
		${ZEUS_CONFIG_IMPORT_ARGS} config &
fi

# Print the password and wait for SIGTERM
[[ -e "${zeushome}"/.docker.done ]] && grep -i password "${provisionlog}"

trap "plog INFO 'Caught SIGTERM'" SIGTERM
sleep infinity &
wait -n

"${zeushome}"/stop-zeus

plog INFO "Container stopped"

exit 0
