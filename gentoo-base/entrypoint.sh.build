#! /bin/sh
# shellcheck disable=SC2030,SC2031

# entrypoint.sh.build

set -eu

# shellcheck disable=SC2034
debug=${DEBUG:-}
# shellcheck disable=SC2034
trace=${TRACE:-}

DEFAULT_JOBS="${DEFAULT_JOBS:-__JOBS__}"
DEFAULT_MAXLOAD="${DEFAULT_MAXLOAD:-__MAXLOAD__}"
environment_file="${environment_file:-__ENVFILE__}"

die() {
	printf >&2 'FATAL: %s\n' "${*:-Unknown error}"
	exit 1
}  # die

warn() {
	[ -z "${*:-}" ] && echo || printf >&2 'WARN:  %s\n' "${*}"
}  # warn

print() {
	if [ -n "${DEBUG:-}" ]; then
		if [ -z "${*:-}" ]; then
			echo >&2
		else
			printf >&2 'DEBUG: %s\n' "${*}"
		fi
	fi
}  # print

format() {
	# Pad $variable to $padding trailing spaces
	#
	variable="${1:-}"
	padding=${2:-20}

	[ -n "${variable:-}" ] || return 1

	variable="$( echo "${variable}" | xargs -n 1 | sort -d | xargs echo -n )"
	spaces="$( printf "%${padding}s" )"
	string="%-${padding}s= \"%s\"\\n"

	# shellcheck disable=SC2059
	printf "${string}" "${variable}" "$(
		cat - | grep -- "^${variable}=" | cut -d'"' -f 2 | fmt -w $(( ${COLUMNS:-80} - ( padding + 3 ) )) | sed "s/^/   ${spaces}/ ; 1 s/^\s\+//"
	)"
}  # format

check() {
	# Check that a given package (with build result code $crc) is actually installed
	#
	crc=${1:-} ; shift

	[ -n "${crc:-}" ] || return 1

	if [ "${crc}" -eq 0 ]; then
		# Process first package of list only...
		for arg in "${@}"; do
			case "${arg}" in
				-*)	continue ;;
				*)	package="${arg}" ; break ;;
			esac
		done
		package="$( echo "${package}" | sed -r 's/^[^a-z]+([a-z])/\1/' )"
		if echo "${package}" | grep -Fq -- '/'; then
			if ! ls -1d "${ROOT:-}/var/db/pkg/${package%::*}"* >/dev/null 2>&1; then
				die "emerge indicated success but package '${package%::*}' does not appear to be installed"
			fi
		else
			if ! ls -1d "${ROOT:-}/var/db/pkg"/*/"${package%::*}"* >/dev/null 2>&1; then
				die "emerge indicated success but package '${package%::*}' does not appear to be installed"
			fi
		fi
	fi

	# shellcheck disable=SC2086
	return ${crc}
}  # check

checkmissing() {
	# Check that packages passed in as arguments have been removed
	#
	# Process first package of list only...
	for arg in "${@}"; do
		case "${arg}" in
			-*)	continue ;;
			*)	package="${arg}" ; break ;;
		esac
	done
	package="$( echo "${package}" | sed -r 's/^[^a-z]+([a-z])/\1/' )"
	if echo "${package}" | grep -Fq -- '/'; then
		if ls -1d "${ROOT:-}/var/db/pkg/${package%::*}"* >/dev/null 2>&1; then
			warn "emerge indicated success but package '${package%::*}' still appears to be installed under root '${ROOT:-/}'"
			return 1
		fi
	else
		if ls -1d "${ROOT:-}/var/db/pkg"/*/"${package%::*}"* >/dev/null 2>&1; then
			warn "emerge indicated success but package '${package%::*}' still appears to be installed under root '${ROOT:-/}'"
			return 1
		fi
	fi

	return 0
}  # checkmissing

pkg_remove() {
	stage="${1:-}" ; shift
	remove="${*:-}"

	(
		for ROOT in $( echo "${ROOT:-}" '/' | xargs -n 1 | sort | uniq ); do
			export ROOT="${ROOT:-/}"
			export LC_ALL='C'

			[ -d "${ROOT}" ] || continue

			echo
			echo " * Removing specified ${stage:+${stage} }packages '${remove}' from root '${ROOT}'..."

			# shellcheck disable=SC2086
			emerge \
					--ignore-default-opts \
					--color=y \
					--verbose=n \
					--verbose-conflicts \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				--depclean ${remove} || :
			# emerge --depclean exits with code zero even if removal
			# doesn't succeed :(
			# shellcheck disable=SC2086
			checkmissing ${remove} ||
				emerge \
						--ignore-default-opts \
						--color=y \
						--verbose=n \
						--verbose-conflicts \
						--with-bdeps=n \
						--with-bdeps-auto=n \
					--rage-clean ${remove} || :
			# shellcheck disable=SC2086
			checkmissing ${remove} || exit ${?}
			#emerge --depclean -v
			for pkg in ${remove}; do
				rm -vr "${ROOT%/}/var/db/pkg/"*"/${pkg}"* 2>/dev/null ||
					rm -vr "${ROOT%/}/var/db/pkg/${pkg}"* 2>/dev/null || :
				if [ -e "${ROOT%/}/var/lib/portage/world" ]; then
					str="$( echo "${pkg}" | sed 's|/|\\/|g' )"
					if sed -i "/${str}/ d" "${ROOT%/}/var/lib/portage/world"; then
						print "Manually removed '${pkg}' from world profile"
					else
						warn "Failed to remove '${pkg}' from world profile (or package already removed)"
					fi
					unset str
				fi
			done
			unset pkg
		done
	)
}  # pkg_remove

savefailed() {
	# Save failed build logs ...
	# (e.g. /var/tmp/portage/app-misc/mime-types-9/temp/build.log)

	#[ -n "${trace:-}" ] || set -o xtrace
	# shellcheck disable=SC2012 # We can't rely on findutils being present...
	if [ -n "$( ls -1 "${PORTAGE_TMPDIR}"/portage/*/*/temp/build.log 2>/dev/null | head -n 1 )" ]; then
		mkdir -p "${PORTAGE_LOGDIR}"/failed
		for file in "${PORTAGE_TMPDIR}"/portage/*/*/temp/build.log; do
			cat="$( echo "${file}" | rev | cut -d'/' -f 4 | rev )"
			pkg="$( echo "${file}" | rev | cut -d'/' -f 3 | rev )"
			mkdir --parents "${PORTAGE_LOGDIR}/failed/${cat}"
			mv -v "${file}" "${PORTAGE_LOGDIR}/failed/${cat}/${pkg}.log"
			rmdir --parents --ignore-fail-on-non-empty "$( dirname "${file}" )" || :
		done
	fi
	#[ -n "${trace:-}" ] || set +o xtrace
}  # savefailed

# Prelink is no longer supported :(
#
#do_prelink() {
#	# http://www.gentoo.org/doc/en/prelink-howto.xml
#	PRELINK_OPTS='-mRf'
#
#	[ -x /usr/sbin/prelink ] || return 0
#
#	[ -e /etc/prelink.cache] && rm /etc/prelink.cache
#
#	/usr/sbin/prelink -av ${PRELINK_OPTS}
#}  # prelink

if [ -n "${DEV_MODE:-}" ]; then
	cat <<EOF

*******************************************************************************
*                                                                             *
* OPERATING IN DEV_MODE                                                       *
*                                                                             *
* This script is running as it exists on-disk, overriding the Docker image    *
* contents.  Do not use the output of this mode for reliable builds.          *
*                                                                             *
*******************************************************************************

EOF
fi

[ -n "${trace:-}" ] && set -o xtrace

if set | grep -q -- '=__[A-Z]\+__$'; then
	die "Unexpanded variable(s) in environment: $(
		set | grep -- '=__[A-Z]\+__$' | cut -d'=' -f 1 | xargs -r
	)"
fi

# shellcheck disable=SC2015,SC1091,SC1090
[ -s "${environment_file}" ] &&
	. "${environment_file}" ||
		die "gentoo-build:entrypoint.sh Unable to source '${environment_file}': ${?}"

if command -v env-update >/dev/null 2>&1; then
	LC_ALL='C' env-update
fi
if [ -e /usr/gawk ] || [ -e /usr/bin/gawk ]; then
	if [ -e /usr/bin/eselect ] && [ -s /usr/share/eselect/modules/awk.eselect ]; then
		eselect awk set gawk
	fi
fi
[ -d /etc/env.d/gcc ] && ROOT='/' gcc-config 1
[ -d /etc/env.d/binutils ] && command -v binutils-config >/dev/null 2>&1 && ROOT='/' binutils-config 1
# shellcheck disable=SC1091
[ -s /etc/profile ] && . /etc/profile

if printf '%s' " ${*:-} " | grep -Fq -- ' --verbose-build '; then
	parallel='--jobs=1 --quiet-build=n'
else
	if [ -n "${JOBS:-}" ]; then
		case "${JOBS}" in
			0|1)
				parallel=''
				;;
			'*')
				parallel='--jobs'
				;;
			[0-9]*)
				parallel="--jobs=${JOBS}"
				;;
			*)
				parallel="--jobs=${DEFAULT_JOBS}"
				;;
		esac
	else
		parallel="--jobs=${DEFAULT_JOBS}"
	fi
fi

if [ -z "${MAXLOAD:-}" ] || [ "${MAXLOAD:-}" != '0' ]; then
	parallel="${parallel:+${parallel} }--load-average=${MAXLOAD:-${DEFAULT_MAXLOAD}}"
fi

#for f in $( grep -Rl -- 'collision' log/docker.*.log ); do
#		sed '\x1b\[[0-9;]*m//g' "${f}" |
#			awk -v p=0 '/Detected file collision\(s\):$/ { p = 2 } ; /^ \* $/ { p = p - 1 } ; ( 1 == p ) { print $2 }'
#done |
#	xargs -rn 1 dirname |
#		sed 's|/c.i-php.\../|/*/| ; s|/spamassassin/|/*/| ; s|$|/*|' |
#		sort |
#		uniq
COLLISION_IGNORE="${COLLISION_IGNORE:-/lib/modules/*}
	/service/bin/*
	/service/etc/php/*/ext-active/*
	/service/sbin/*
	/service/usr/bin/*
	/service/usr/share/*/*
	/service/var/lib/*/*
	/var/lib/portage/home/*
"
export COLLISION_IGNORE

TUSE='' pkg_use_pkg='' pkg_use_use='' pkg_use_file='' pkg_use_files=''
force_python=''
pre_remove='' pre_pkgs='' pre_use=''
post_pkgs='' post_use='' post_remove=''
rebuild=''
change_sysroot=0 pkg_use=0 no_use=0 rc=0
for arg in "${@}"; do
	#print "Read argument '${arg}'"
	shift
	case "${arg}" in
		--force-python=*)
			force_python="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			if ! echo "${force_python:-}" | grep -q -- '^python[2-9]_[0-9]$'; then
				die "Portage python token '${force_python:-}' is not valid"
			fi
			continue
			;;
		--no-package-use)
			no_use=1
			continue
			;;
		--pre-remove=*)
			pre_remove="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--pre-pkgs=*)
			pre_pkgs="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--pre-use=*)
			pre_use="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--post-pkgs=*)
			post_pkgs="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--post-use=*)
			post_use="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--rebuild=*)
			rebuild="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--post-remove=*)
			post_remove="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--sysroot)
			change_sysroot=1
			continue
			;;
		--verbose-build)
			continue
			;;
		--with-use=*)
			TUSE="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			continue
			;;
		--with-pkg-use=*)
			pkg_use=1
			pkg_use_use="$( printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n' )"
			pkg_use_pkg="$( echo "${pkg_use_use:-}" | cut -d' ' -f 1 )"
			pkg_use_use="$( echo "${pkg_use_use:-}" | cut -d' ' -f 2- )"
			if [ -z "${pkg_use_pkg:-}" ] || [ -z "${pkg_use_use:-}" ]; then
				die "Unable to extract package and USE flags from '${arg}'"
			fi
			mkdir -p /etc/portage/package.use
			pkg_use_file="/etc/portage/package.use/$( echo "${pkg_use_pkg}" | cut -d'/' -f 2- )"
			printf '%s %s\n' "${pkg_use_pkg}" "${pkg_use_use}" >> "${pkg_use_file}"
			warn "Applied override USE flag(s):"
			warn "  ${pkg_use_file}:"
			warn "$( sed 's/^/    /' < "${pkg_use_file}" )"
			pkg_use_files="${pkg_use_files:+"${pkg_use_files} "}${pkg_use_file}"
			unset pkg_use_file pkg_use_pkg pkg_use_use
			continue
			;;
		*)
			set -- "${@}" "${arg}"
			;;
	esac
done

if [ -e /etc/portage/repos.conf.host ]; then
	echo
	warn "Mirroring host repos.conf to container ..."
	if [ -e /etc/portage/repos.conf ]; then
        if [ -d /etc/portage/repos.conf ]; then
            for f in /etc/portage/repos.conf/*; do
                umount -q "${f}" || :
            done
        fi
        umount -q /etc/portage/repos.conf || :
        rm -rf /etc/portage/repos.conf || :

		[ -e /etc/portage/repos.conf ] && mv /etc/portage/repos.conf /etc/portage/repos.conf.disabled
	fi
	cp -a /etc/portage/repos.conf.host /etc/portage/repos.conf || die "Can't copy host repos.conf: ${?}"
fi

if [ $(( no_use )) -ne 0 ]; then
	# My suspicion is that package.use contents are interfering with
	# environment USE flags...
	if [ -e /etc/portage/package.use ]; then
		if [ $(( pkg_use )) -ne 0 ]; then
			warn "'--with-pkg-use' option will be overridden by '--no-package-use'"
		fi
		echo
		warn "Removing default '/etc/portage/package.use' settings"
		mv /etc/portage/package.use /etc/portage/package.use.disabled
	fi
fi

override='' object='' headers='' header='' file='' dest=''
find /etc/portage/ -mindepth 1 -maxdepth 1 -name '*.override' -print | while read -r override; do
	object="$( echo "${override}" | sed 's/\.override$//' )"
	if [ -e "${object}" ]; then
		mv "${object}" "${object}.disabled"
	fi
	# override can be a file or directory
	# header can be in current or override directory (if not a file), but must be a file
	if [ -d "${object}.header" ] || [ -d "${override}.header" ]; then
		[ -d "${object}.header" ] && warn "Override header directories not supported: '${object}.header' not applied"
		[ -d "${override}.header" ] && warn "Override header directories not supported: '${override}.header' not applied"
	fi
	if [ -d "${override}" ]; then
		headers="$( find "${override}"/ -mindepth 1 -maxdepth 1 -name '*.header' -print )"
		if [ -f "${object}.header" ] || [ -f "${override}.header" ] || [ -n "${headers:-}" ]; then
			mkdir -p "${object}"

			for header in "${object}.header" "${override}.header" ${headers}; do
				[ -f "${header}" ] || continue
				find "${override}"/ -mindepth 1 -not -name '*.header' -print | while read -r file; do
					dest="$( echo "${file}" | sed "s|^${override}|${object}|" )"
					mkdir -p "$( dirname "${dest}" )"

					if [ -f "${file}" ]; then
						if [ -f "${dest}" ]; then
							print "Adding override header '${header}' to existing file '${file}' ('${dest}')"
							cat "${header}" "${dest}" > "${dest}.tmp"
							mv "${dest}.tmp" "${dest}"
						else
							print "Applying override header '${header}' to file '${file}' ('${dest}')"
							cat "${header}" "${file}" > "${dest}"
						fi
					elif [ -d "${file}" ]; then
						if ! [ -d "${dest}" ]; then
							# FIXME Support directories?
							warn "Not applying override header '${header}' to directory '${file}' ('${dest}')"
							cp -a "${file}" "${dest}"
						fi
					else
						if ! [ -e "${dest}" ]; then
							warn "Not applying override header '${header}' to non-regular file '${file}' ('${dest}')"
							cp -a "${file}" "${dest}"
						fi
					fi
				done
			done
		else
			# Simply copy $override
			cp -a "${override}" "${object}"
		fi
	elif [ -f "${override}" ]; then
		if [ -f "${object}.header" ] || [ -f "${override}.header" ]; then
			# shellcheck disable=SC2046
			cat > "${object}" \
				$( [ -f "${override}.header" ] && { warn >&2 "Using override '${override}.header' for item '${object}'" ; echo "${override}.header" ; } ) \
				$( [ -f "${object}.header" ] && { warn >&2 "Using override '${object}.header' for item '${object}'" ; echo "${object}.header" ; } ) \
				"${override}"
		else
			# Simply copy $override
			cp -a "${override}" "${object}"
		fi
	fi
done

if command -v pypy3 >/dev/null 2>&1; then
	print "Enabling pypy3 support for portage ..."
	mkdir -p /etc/python-exec
	echo 'pypy3' >> /etc/python-exec/emerge.conf
	print "$( emerge --info | head -n 1 2>&1 )"
fi

#warn >&2 "Inherited USE-flags: '${USE:-}'"

# post_use should be based on the original USE flags, without --with-use
# additions...
if [ -n "${post_use:-}" ]; then
	if ! printf ' %s ' "${post_use:-}" | grep -Fq -- ' -* '; then
		post_use="${USE:+${USE} }${post_use:-}"
	fi
else
	post_use="${USE:-}"
fi
if [ -n "${use_essential:-}" ]; then
	if ! echo "${post_use:-}" | grep -Fq -- "${use_essential}"; then
		post_use="${post_use:+${post_use} }${use_essential}"
	fi
fi
if [ -n "${TUSE:-}" ]; then
	if ! printf '%s' " ${TUSE} " | grep -Fq -- ' -* '; then
		TUSE="${USE:+${USE} }${TUSE}"
	fi
	if
		[ -n "${use_essential:-}" ] &&
		echo "${TUSE}" | grep -Fq -- "${use_essential}"
	then
		USE="${TUSE}"
	else
		USE="${TUSE}${use_essential:+ ${use_essential}}"
	fi
	export USE
	unset TUSE
fi

info="$( LC_ALL='C' emerge --info --verbose )"
echo
echo 'Resolved build variables for build stage:'
echo '----------------------------------------'
echo
#echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
#echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
echo "PORTAGE_CONFIGROOT  = $( echo "${info}" | grep -- '^PORTAGE_CONFIGROOT=' | cut -d'=' -f 2- )"
echo
echo "${info}" | format 'FEATURES'
echo "${info}" | format 'ACCEPT_LICENSE'
echo "${info}" | format 'ACCEPT_KEYWORDS'
echo "${info}" | format 'USE'
echo "MAKEOPTS            = $( echo "${info}" | grep -- '^MAKEOPTS=' | cut -d'=' -f 2- )"
echo
echo "${info}" | format 'EMERGE_DEFAULT_OPTS'
echo
echo "DISTDIR             = $( echo "${info}" | grep -- '^DISTDIR=' | cut -d'=' -f 2- )"
echo "PKGDIR              = $( echo "${info}" | grep -- '^PKGDIR=' | cut -d'=' -f 2- )"
echo "PORTAGE_LOGDIR      = $( echo "${info}" | grep -- '^PORTAGE_LOGDIR=' | cut -d'=' -f 2- )"
echo
unset info

package='app-shells/bash'
opts='--tree'
# shellcheck disable=SC2015
printf ' %s ' "${*}" | grep -Fq -- ' --nodeps ' && opts='' || :

if [ -n "${ECLASS_OVERRIDE:-}" ]; then
	echo
	warn "Applying eclass override for repo '${ECLASS_OVERRIDE}' ..."

	(
		for ROOT in $( echo '/' "${ROOT:-}" | xargs -n 1 | sort | uniq ); do
			if [ -e "${ROOT%/}/etc/portage/repos.conf" ]; then
				if grep -qR -- '^\s*eclass-overrides' "${ROOT%/}/etc/portage/repos.conf"; then
					echo "INFO:  Adding eclass override '${ECLASS_OVERRIDE}' to repos.conf for installation root '${ROOT}' ..."
					if [ -f "${ROOT%/}/etc/portage/repos.conf" ]; then
						sed -e "/^\s*eclass-overrides/ s/\(\s*$\|\s*#.*$\)/ ${ECLASS_OVERRIDE}\1/" \
								-i "${ROOT%/}/etc/portage/repos.conf" ||
							die "Failed to update '${ROOT%/}/etc/portage/repos.conf': ${?}"
					elif [ -f "${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf" ]; then
						sed -e "/^\s*eclass-overrides/ s/\(\s*$\|\s*#.*$\)/ ${ECLASS_OVERRIDE}\1/" \
								-i "${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf" ||
							die "Failed to update '${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf': ${?}"
					else
						die "Could not find repo configuration file to update for installation root '${ROOT}'"
					fi
				else
					echo "Setting eclass override '${ECLASS_OVERRIDE}' in repos.conf for installation root '${ROOT}' ..."
					if [ -f "${ROOT%/}/etc/portage/repos.conf" ]; then
						printf '\neclass-overrides = %s\n' "${ECLASS_OVERRIDE}" \
								>> "${ROOT%/}/etc/portage/repos.conf" ||
							die "Failed to update '${ROOT%/}/etc/portage/repos.conf': ${?}"
					elif [ -f "${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf" ]; then
						printf '\neclass-overrides = %s\n' "${ECLASS_OVERRIDE}" \
								>> "${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf" ||
							die "Failed to update '${ROOT%/}/etc/portage/repos.conf/DEFAULT.conf': ${?}"
					else
						die "Could not find repo configuration file to update for installation root '${ROOT}'"
					fi
				fi
				{
					echo "Active overrides:"
					grep -HR -- '^\s*eclass-overrides' "${ROOT%/}/etc/portage/repos.conf/"
				} | sed 's/^/       /'
			else
				warn "Could not find repo configuration for installation root '${ROOT}'"
			fi
		done
	)
fi


if [ -n "${pre_remove:-}" ]; then
	pkg_remove 'pre-installation' "${pre_remove}"
fi

if [ -n "${force_python:-}" ]; then
	pre_pkgs="${pre_pkgs:+${pre_pkgs} }dev-lang/python:$( echo "${force_python}" | sed 's/^python// ; s/_/./' )"
fi
# Now that we have a patched app-portage/elt-patches which respects ROOT
# directory settings, this package should no longer need a specific pre-build
# step (although the code can remain present but commented until this is proven
# unequivocably):
#
#if
#	echo " ${pre_pkgs:-} ${*:-} ${post_pkgs:-} " |
#		grep -Pq -- ' ([=<>!~][=!]?)?(sys-devel/)?gcc(-[0-9.r-]+)?[*]?(:(?:[*]|[0-9.]*)=?)? '
#then
#	(
#		pre_pkgs_pkgs='>=app-portage/elt-patches-20170815'
#		echo
#		echo " * Building required pre-installation packages '${pre_pkgs_pkgs}' ..."
#
#		for ROOT in '/' '/service'; do
#			export ROOT
#			export FEATURES="${FEATURES:+${FEATURES} }-fail-clean"
#			export LC_ALL='C'
#
#			info="$( emerge --info --verbose )"
#			echo
#			echo 'Resolved build variables for pre-installation packages:'
#			echo '------------------------------------------------------'
#			echo
#			echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
#			echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
#			echo "${info}" | format 'FEATURES'
#			echo "${info}" | format 'USE'
#			unset info
#
#			# shellcheck disable=SC2086
#			if ! emerge \
#					--ignore-default-opts \
#					  ${parallel} \
#					--binpkg-changed-deps=y \
#					--binpkg-respect-use=y \
#					--buildpkg=y \
#					--color=y \
#					--keep-going=y \
#					--quiet-build=y \
#					  ${opts:-} \
#					--usepkg=y \
#					--verbose=y \
#					--verbose-conflicts \
#					--with-bdeps=n \
#					--with-bdeps-auto=n \
#				${pre_pkgs_pkgs}
#			then
#				savefailed
#				exit 1
#			fi
#		done
#	)
#fi
if [ -n "${pre_pkgs:-}" ]; then
	echo
	echo " * Building specified pre-installation packages '${pre_pkgs}' ..."
	(
		if [ -n "${pre_use:-}" ]; then
			if ! printf ' %s ' "${pre_use}" | grep -Fq -- ' -* '; then
				pre_use="${USE:+${USE} }${pre_use}"
			fi
			if [ -n "${use_essential:-}" ] && echo "${pre_use}" | grep -Fq -- "${use_essential}"; then
				USE="${pre_use}"
			else
				USE="${pre_use} ${use_essential}"
			fi
		fi
		if
			echo " ${pre_pkgs} " |
				grep -Pq -- ' ([=<>!~][=!]?)?(sys-devel/)?gcc(-[0-9.r-]+)?[*]?(:(?:[*]|[0-9.]*)=?)? '
		then
			# shellcheck disable=SC2154
			USE="${USE:+${USE} }${use_essential_gcc}"
		fi
		export USE
		export ROOT='/'
		export FEATURES="${FEATURES:+${FEATURES} }-fail-clean"
		export LC_ALL='C'

		info="$( emerge --info --verbose )"
		echo
		echo 'Resolved build variables for pre-installation packages:'
		echo '------------------------------------------------------'
		echo
		echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
		echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'USE'
		unset info

		export VERY_BRAVE_OR_VERY_DUMB='yes'  # for busybox
		# shellcheck disable=SC2086
		if ! emerge \
				--ignore-default-opts \
				  ${parallel} \
				--binpkg-changed-deps=y \
				--binpkg-respect-use=y \
				--buildpkg=y \
				--color=y \
				--keep-going=y \
				--quiet-build=y \
				  ${opts:-} \
				--usepkg=y \
				--verbose=y \
				--verbose-conflicts \
				--with-bdeps=n \
				--with-bdeps-auto=n \
			${pre_pkgs}
				#--binpkg-changed-deps=y \
				#--rebuild-if-new-slot=y \
				#--rebuilt-binaries=y \
		then
			savefailed
			exit 1
		fi
		if [ -n "${force_python:-}" ]; then
			# shellcheck disable=SC2086
			if ! emerge \
					--ignore-default-opts \
					  ${parallel} \
					--buildpkg=n \
					--color=y \
					--keep-going=y \
					--quiet-build=y \
					  ${opts:-} \
					--usepkg=n \
					--verbose=y \
					--verbose-conflicts \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				dev-lang/python-exec
			then
				savefailed
				exit 1
			fi
		fi
	)
fi

if [ -e /usr/gawk ] || [ -e /usr/bin/gawk ]; then
	if [ -e /usr/bin/eselect ] && [ -s /usr/share/eselect/modules/awk.eselect ]; then
		eselect awk set gawk
	fi
fi
[ -d /etc/env.d/gcc ] && ROOT='/' gcc-config 1
[ -d /etc/env.d/binutils ] && command -v binutils-config >/dev/null 2>&1 && ROOT='/' binutils-config 1
# shellcheck disable=SC1091
[ -s /etc/profile ] && . /etc/profile

echo
echo " * Ensuring base packages in '/service/' ROOT are current:"
echo

# Replace default file with patched version
if [ -s /etc/bash/bashrc ]; then
	mkdir -p /service/etc/bash
	cp /etc/bash/bashrc /service/etc/bash/
fi

#time (
(
	export ROOT='/service'
	export FEATURES="${FEATURES:+${FEATURES} }-fail-clean"
	export USE="-* -lib-only make-symlinks openmp timezone-tools"
	export LC_ALL='C'
	export VERY_BRAVE_OR_VERY_DUMB='yes'  # for busybox

	for pkg_use_file in ${pkg_use_files}; do
		if [ -e "${pkg_use_file}" ] && ! [ -e "${ROOT}${pkg_use_file}" ]; then
			mkdir -p "$( dirname "${ROOT}${pkg_use_file}" )"
			cp -v "${pkg_use_file}" "${ROOT}${pkg_use_file}"
		fi
	done
	unset pkg_use_file

	info="$( emerge --info --verbose )"
	echo
	echo 'Resolved build variables for service packages:'
	echo '---------------------------------------------'
	echo
	echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
	echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
	echo "${info}" | format 'FEATURES'
	echo "${info}" | format 'USE'
	unset info

	# sys-apps/shadow is needed for /sbin/nologin
	# sys-apps/coreutils needed for cat/chmod
	#
	#service_pkgs='virtual/libc app-shells/bash sys-apps/shadow sys-apps/coreutils'
	#
	# ... both now superseded by sys-apps/busybox with USE='make-symlinks'
	# (although this does require disabling collision-detection on other
	#  system packages which install the actual, non-bb, binaries)
	#
	# If we don't build libarchive support here (without USE='lz4'), then when
	# the package is updated we hit a dependency issue whereby cmake requires
	# libarchive requires lz4 requires cmake <sigh>).
	#
	# N.B. This block *requires* that package atoms be fully-qualified,
	#      including category names.
	#
	service_pkgs='virtual/libc sys-apps/busybox'
	if [ -n "${pre_remove:-}" ] && ! echo "${pre_remove}" | grep -Fq -- 'dev-libs/openssl'; then
		service_pkgs="${service_pkgs} app-arch/libarchive"
	fi

	service_pkgs="${service_pkgs} dev-lang/python-exec"
	if [ -n "${force_python:-}" ]; then
		service_pkgs="${service_pkgs} dev-lang/python:$( echo "${force_python}" | sed 's/^python// ; s/_/./' )"
	fi

	exclude=''
	if [ -n "${pre_remove}" ]; then
		for pkg in ${pre_remove}; do
			exclude="${exclude:+${exclude} }--exclude ${pkg}"
		done
		unset pkg
	fi

	echo
	echo " * Packages to install: ${service_pkgs}"
	echo " * Packages to exclude: ${pre_remove:-<none>}"

	# shellcheck disable=SC2086,SC2046
	if ! emerge \
			--ignore-default-opts \
			  ${parallel} \
			--binpkg-changed-deps=y \
			--binpkg-respect-use=y \
			--buildpkg=y \
			--color=y \
			--keep-going=y \
			--rebuild-if-new-slot=y \
			--quiet-build=y \
			--update \
			  ${opts:-} \
			--usepkg=y \
			--verbose=y \
			--verbose-conflicts \
			--with-bdeps=n \
			--with-bdeps-auto=n \
			${exclude:-} \
		-- ${service_pkgs}
			#--rebuilt-binaries=y \
	then
		savefailed
		exit 1
	fi

	#echo "Time spent updating build container:"
)

if [ -n "${ROOT:-}" ] && [ "${ROOT}" != '/' ]; then
	if [ ${change_sysroot:-} -eq 1 ]; then
		export SYSROOT="${ROOT}"
	fi

	if [ -e "${ROOT}"/usr/gawk ] || [ -e "${ROOT}"/usr/bin/gawk ]; then
		if [ -e "${ROOT}"/usr/bin/eselect ] && [ -s "${ROOT}"/usr/share/eselect/modules/awk.eselect ]; then
			eselect awk set gawk
		fi
	fi
	[ -d "${ROOT}"/etc/env.d/gcc ] && gcc-config 1
	[ -d "${ROOT}"/etc/env.d/binutils ] && command -v binutils-config >/dev/null 2>&1 && binutils-config 1
	# shellcheck disable=SC1091
	[ -s "${ROOT}"/etc/profile ] && . "${ROOT}"/etc/profile
fi

(
	for ROOT in $( echo '/' "${ROOT:-}" | xargs -n 1 | sort | uniq ); do
		export ROOT
		if [ -x "${ROOT%/}"/usr/bin/eselect ]; then
			if [ -s "${ROOT%/}"/usr/share/eselect/modules/python.eselect ]; then
				echo "Setting python implementation for installation root '${ROOT}' ..."
				mkdir -p "${ROOT%/}"/etc/python-exec

				eselect python cleanup
				eselect python update --if-unset
				if [ -n "${force_python:-}" ]; then
					print "python-exec supported interpreters: $( python-exec2c -l | xargs echo )"
					if [ "${force_python#python2}" != "${force_python}" ]; then
						eselect python set --python2 "$( echo "${force_python}" | tr '_' '.' )"
					else
						eselect python set "$( echo "${force_python}" | tr '_' '.' )"
					fi
				fi
				#eselect python list
				#eselect python --show --python2
				#eselect python --show --python3
			fi
			if [ -s "${ROOT%/}"/usr/share/eselect/modules/java-vm.eselect ]; then
				echo "Setting Java VM for installation root '${ROOT}' ..."
				eselect java-vm set system 1
				[ $(( $( id -u ) )) -eq 0 ] || eselect java-vm set user 1
			fi
		fi
		# python-exec now no longer requires the 'eselect' interface...
		if [ -n "${force_python:-}" ]; then
			if [ -s "${ROOT%/}"/etc/python-exec/python-exec.conf ]; then
				sed -e 's/^\([^#]\)/#\1/' \
					-i "${ROOT%/}"/etc/python-exec/python-exec.conf
			fi
			echo "${force_python}" >> "${ROOT%/}"/etc/python-exec/python-exec.conf
		fi
	done
)
if [ -n "${force_python:-}" ]; then
	export PYTHON_COMPAT_OVERRIDE="${force_python}"
fi

case "${1:-}" in
	sh|/bin/sh)
		[ -n "${2:-}" ] && shift

		exec /bin/sh "${@}"
		;;
	bash|/bin/bash)
		[ -n "${2:-}" ] && shift

		exec /bin/bash "${@}"
		;;

	'')
		echo
		echo " * Building default '${package}' package ..."
		echo

		info="$( LC_ALL='C' emerge --info --verbose )"
		echo
		echo 'Resolved build variables for default package:'
		echo '---------------------------------------------'
		echo
		echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
		echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'USE'
		echo "${info}" | format 'PYTHON_SINGLE_TARGET'
		echo "${info}" | format 'PYTHON_TARGETS'
		echo
		unset info

		print "Running default 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n \"${package}\"'"

		# shellcheck disable=SC2086
		LC_ALL='C' FEATURES='-fail-clean' emerge \
				  ${parallel} \
				  ${opts} \
				--buildpkg=y \
				--usepkg=y \
				--with-bdeps=n \
				--with-bdeps-auto=n \
			"${package}" || rc=${?}
		;;
	*)
		# Extract first package, to pass to check() below...
		for arg in "${@}"; do
			case "${arg}" in
				-*)	continue ;;
				*)	package="${arg}" ; break ;;
			esac
		done

		echo

		if echo " ${*} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark)[ -]'; then
			warn "Adding post-package entry 'net-misc/curl' due to presence of app-containers/netavark ..."
			post_pkgs="${post_pkgs:+${post_pkgs} }net-misc/curl"
		fi
		if [ -z "${post_pkgs:-}" ]; then
			echo " * Building requested '$( printf '%s' "${*}" | sed 's/--[^ ]\+ //g' )' packages ..."
		else
			echo " * Building requested '$( printf '%s' "${*}" | sed 's/--[^ ]\+ //g' )' packages (with post-package list) ..."
		fi
		echo

		if [ -n "${ROOT:-}" ] && [ "${ROOT}" != '/' ] && [ -n "${COLLISION_IGNORE:-}" ]; then
			COLLISION_IGNORE="${COLLISION_IGNORE} $( echo "${COLLISION_IGNORE}" | sed "s|${ROOT%/}||g" )"
		fi
		COLLISION_IGNORE="$( echo "${COLLISION_IGNORE}" | xargs -r printf '%s ' )"
		COLLISION_IGNORE="${COLLISION_IGNORE% }"
		export COLLISION_IGNORE

		info="$( LC_ALL='C' emerge --info --verbose )"
		echo
		if [ -z "${post_pkgs:-}" ]; then
			echo 'Resolved build variables for requested packages:'
		else
			echo 'Resolved build variables for requested packages (with post-package list):'
		fi
		echo '-----------------------------------------------'
		echo
		echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
		echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'ACCEPT_LICENSE'
		echo "${info}" | format 'USE'
		echo "${info}" | format 'COLLISION_IGNORE'
		echo "${info}" | format 'PYTHON_SINGLE_TARGET'
		echo "${info}" | format 'PYTHON_TARGETS'
		#echo
		unset info

		# Do we want to build packages one at a time (indicated via the
		# '--single-build' flag in EMERGE_OPTS)?
		#
		if [ -n "${EMERGE_OPTS:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-build)? '; then
			# Save any command-line flags...
			#
			flags=''
			for arg in "${@}"; do
				case "${arg}" in
					-*)
						flags="${flags:+${flags} }${arg}"
						;;
				esac
			done

			# ... then process any non-flag options as individual packages to
			# rebuild, except when EMERGE_OPTS contains '--swap-build', in
			# which case we instead save the first non-flag argument and come
			# back to it later...
			#
			first=''
			for arg in "${@}"; do
				case "${arg}" in
					-*)	continue ;;
					*)
						if [ -z "${first:-}" ]; then
							first="${arg}"
							if echo " ${EMERGE_OPTS} " | grep -Eq -- ' --swap(-build)? '; then
								continue
							fi
						fi
						echo
						echo " * Building single package '${arg}' from '${*}' ..."
						echo
						(
						if echo " ${arg} " | grep -Eq -- ' ([<>]?=|~)?(gcc|sys-devel/gcc)[ -]'; then
							warn "Activating sys-devel/gcc work-arounds ..."
							print "Before work-around, USE is '${USE}' ..."
							gcc_use="$( echo " ${use_essential_gcc} " | sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//' )"
							USE="${USE:+"$( echo " ${USE} " | sed 's/ lib-only / / ; s/^ //' )"}-lib-only nls ${gcc_use}"
							USE="$( echo "${USE}" | xargs -rn 1 | sort | uniq | xargs -r )"
							export USE
							unset gcc_use
							print "After work-around, USE is '${USE}'"
						fi
						if echo " ${arg} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark|rust|dev-lang/rust)[ -]'; then
							warn "Activating app-containers/netavark work-arounds ..."
							print "Before work-around, USE is '${USE}' ..."
							USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //' )"}http2"
							export USE
							print "After work-around, USE is '${USE}'"
						fi
						# shellcheck disable=SC2016
						print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n ${flags:+${flags} }${arg}'${USE:+ with USE='${USE}'}"
						# shellcheck disable=SC2086
						LC_ALL='C' FEATURES='-fail-clean' emerge \
								  ${parallel} \
								  ${opts} \
								--buildpkg=y \
								--usepkg=y \
								--with-bdeps=n \
								--with-bdeps-auto=n \
								  ${flags:-} \
							"${arg}"
						) || rc=${?}
						;;
				esac
			done

			# ... and finally, if '--swap-build' is in effect, build the first
			# original package specified now, at the end of the process.
			#
			if [ -n "${first:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --swap(-build)? '; then
					echo
					echo " * Building first package '${first}' of '$( printf '%s' "${*}" | sed 's/--[^ ]\+ //g' )' ..."
					echo
					(
					if echo " ${first} " | grep -Eq -- ' ([<>]?=|~)?(gcc|sys-devel/gcc)[ -]'; then
						warn "Activating sys-devel/gcc work-arounds ..."
						print "Before work-around, USE is '${USE}' ..."
						gcc_use="$( echo " ${use_essential_gcc} " | sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//' )"
						USE="${USE:+"$( echo " ${USE} " | sed 's/ lib-only / / ; s/^ //' )"}-lib-only nls ${gcc_use}"
						USE="$( echo "${USE}" | xargs -rn 1 | sort | uniq | xargs -r )"
						export USE
						unset gcc_use
						print "After work-around, USE is '${USE}'"
					fi
					if echo " ${first} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark|rust|dev-lang/rust)[ -]'; then
						warn "Activating app-containers/netavark work-arounds ..."
						print "Before work-around, USE is '${USE}' ..."
						USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //' )"}http2"
						export USE
						print "After work-around, USE is '${USE}'"
					fi
					# shellcheck disable=SC2016
					print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n ${flags:+${flags} }${first}'${USE:+ with USE='${USE}'}"
					# shellcheck disable=SC2086
					LC_ALL='C' FEATURES='-fail-clean' emerge \
							  ${parallel} \
							  ${opts} \
							--buildpkg=y \
							--usepkg=y \
							--with-bdeps=n \
							--with-bdeps-auto=n \
							  ${flags:-} \
						"${first}"
					) || rc=${?}
			fi

		else # ! echo " ${EMERGE_OPTS:-} " | grep -Eq -- ' --single(-build)? '; then
			(
			# We're not performing single-builds, so build everything at the
			# same time (and potentially in parallel)
			#
			if echo " ${*} " | grep -Eq -- ' ([<>]?=|~)?(gcc|sys-devel/gcc)[ -]'; then
				warn "Activating sys-devel/gcc work-arounds ..."
				print "Before work-around, USE is '${USE}' ..."
				gcc_use="$( echo " ${use_essential_gcc} " | sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//' )"
				USE="${USE:+"$( echo " ${USE} " | sed 's/ lib-only / / ; s/^ //' )"}-lib-only nls ${gcc_use}"
				USE="$( echo "${USE}" | xargs -rn 1 | sort | uniq | xargs -r )"
				export USE
				unset gcc_use
				print "After work-around, USE is '${USE}'"
			fi
			if echo " ${*} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark|rust|dev-lang/rust)[ -]'; then
				warn "Activating app-containers/netavark work-arounds ..."
				print "Before work-around, USE is '${USE}' ..."
				USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //' )"}http2"
				export USE
				print "After work-around, USE is '${USE}'"
			fi
			# shellcheck disable=SC2016
			print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n ${*}'${USE:+ with USE='${USE}'}"
			# shellcheck disable=SC2086
			LC_ALL='C' FEATURES='-fail-clean' emerge \
					  ${parallel} \
					  ${opts} \
					--buildpkg=y \
					--usepkg=y \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				"${@}"
			) || rc=${?}
		fi

		if [ -n "${post_pkgs:-}" ]; then
			savefailed
			check ${rc} "${@}"

			echo
			echo " * Building specified post-installation '${post_pkgs}' packages ..."
			echo

			[ -n "${post_use:-}" ] && export USE="${post_use}"

			info="$( LC_ALL='C' emerge --info --verbose )"
			echo
			echo 'Resolved build variables for post-installation packages:'
			echo '-------------------------------------------------------'
			echo
			echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
			echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
			echo "${info}" | format 'FEATURES'
			echo "${info}" | format 'USE'
			echo "${info}" | format 'PYTHON_SINGLE_TARGET'
			echo "${info}" | format 'PYTHON_TARGETS'
			echo
			unset info

			#print "Running 'emerge ${opts:+${opts} }--jobs=1 --quiet-build=n --buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n ${post_pkgs}'${USE:+ with USE='${USE}'}"
			#LC_ALL='C' FEATURES='-fail-clean' emerge \
			#		  ${opts} \
			#		--jobs=1 \
			#		--quiet-build=n \
			#		--buildpkg=y \
			#		--usepkg=y \
			#		--with-bdeps=n \
			#		--with-bdeps-auto=n \
			#	${post_pkgs} || rc=${?}

			# shellcheck disable=SC2016
			print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=n --with-bdeps-auto=n ${post_pkgs}'${USE:+ with USE='${USE}'}"
			# shellcheck disable=SC2086
			LC_ALL='C' FEATURES='-fail-clean' VERY_BRAVE_OR_VERY_DUMB='yes' emerge \
					  ${parallel} \
					  ${opts} \
					--buildpkg=y \
					--usepkg=y \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				${post_pkgs} || rc=${?}
		fi

		if [ -n "${rebuild:-}" ]; then
			echo
			if [ -z "${post_pkgs:-}" ]; then
				echo " * Rebuilding requested '${rebuild}' package(s) ..."
			else
				echo " * Rebuilding requested '${rebuild}' post-package(s) ..."
			fi
			echo

			# See handling of EMERGE_OPTS above for details of logic below, but
			# without the complexity of '--swap-build' and with the (passed-in)
			# value of '${rebuid}' appended to the argument list...
			#
			if [ -n "${EMERGE_OPTS:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-rebuild)? '; then
				flags=''
				for arg in "${@}" ${rebuild}; do
					case "${arg}" in
						-*)
							flags="${flags:+${flags} }${arg}"
							;;
					esac
				done
				for arg in ${rebuild}; do
					case "${arg}" in
						-*)	continue ;;
						*)
							echo
							echo " * Building single package '${arg}' from '${rebuild} ..."
							echo

							(
							# Reinstall package first to maximise dependency re-use...
							#
							if echo " ${arg} " | grep -Eq -- ' ([<>]?=|~)?(gcc|sys-devel/gcc)[ -]'; then
								warn "Activating sys-devel/gcc work-arounds ..."
								print "Before work-around, USE is '${USE}' ..."
								gcc_use="$( echo " ${use_essential_gcc} " | sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//' )"
								USE="${USE:+"$( echo " ${USE} " | sed 's/ lib-only / / ; s/^ //' )"}-lib-only nls ${gcc_use}"
								USE="$( echo "${USE}" | xargs -rn 1 | sort | uniq | xargs -r )"
								export USE
								unset gcc_use
								print "After work-around, USE is '${USE}'"
							fi
							if echo " ${arg} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark|rust|dev-lang/rust)[ -]'; then
								warn "Activating app-containers/netavark work-arounds ..."
								print "Before work-around, USE is '${USE}' ..."
								USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //' )"}http2"
								export USE
								print "After work-around, USE is '${USE}'"
							fi
							# shellcheck disable=SC2016
							print "Running build-dependencies 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=y ${flags:+${flags} }${arg}'${USE:+ with USE='${USE}'}"
							# shellcheck disable=SC2086
							LC_ALL='C' FEATURES='-fail-clean' emerge \
									  ${parallel} \
									  ${opts} \
									--buildpkg=y \
									--usepkg=y \
									--with-bdeps=y \
									  ${flags:-} \
								${arg}
							) || rc=${?}

							# ... then install again without '--usepkg':
							#
							# shellcheck disable=SC2016
							print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=n --with-bdeps=n --with-bdeps-auto=n ${flags:+${flags} }${arg}'${USE:+ with USE='${USE}'}"
							# shellcheck disable=SC2086
							LC_ALL='C' FEATURES='-fail-clean' emerge \
									  ${parallel} \
									  ${opts} \
									--buildpkg=y \
									--usepkg=n \
									--with-bdeps=n \
									--with-bdeps-auto=n \
									  ${flags:-} \
								${arg} || rc=${?}
							;;
					esac
				done
			else # [ -z "${EMERGE_OPTS:-}" ] || ! echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-rebuild)? '; then
				(
				# Reinstall package first to maximise dependency re-use...
				#
				if echo " ${rebuild} " | grep -Eq -- ' ([<>]?=|~)?(gcc|sys-devel/gcc)[ -]'; then
					warn "Activating sys-devel/gcc work-arounds ..."
					print "Before work-around, USE is '${USE}' ..."
					gcc_use="$( echo " ${use_essential_gcc} " | sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//' )"
					USE="${USE:+"$( echo " ${USE} " | sed 's/ lib-only / / ; s/^ //' )"}-lib-only nls ${gcc_use}"
					USE="$( echo "${USE}" | xargs -rn 1 | sort | uniq | xargs -r )"
					export USE
					unset gcc_use
					print "After work-around, USE is '${USE}'"
				fi
				if echo " ${rebuild} " | grep -Eq -- ' ([<>]?=|~)?(netavark|app-containers/netavark|rust|dev-lang/rust)[ -]'; then
					warn "Activating app-containers/netavark work-arounds ..."
					print "Before work-around, USE is '${USE}' ..."
					USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //' )"}http2"
					export USE
					print "After work-around, USE is '${USE}'"
				fi
				# shellcheck disable=SC2016
				print "Running build-dependencies 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=y --with-bdeps=y ${rebuild}'${USE:+ with USE='${USE}'}"
				# shellcheck disable=SC2086
				LC_ALL='C' FEATURES='-fail-clean' emerge \
						  ${parallel} \
						  ${opts} \
						--buildpkg=y \
						--usepkg=y \
						--with-bdeps=y \
					${rebuild}
				) || rc=${?}

				# ... then install again without '--usepkg':
				#
				# shellcheck disable=SC2016
				print "Running 'emerge ${parallel:+${parallel} }${opts:+${opts} }--buildpkg=y --usepkg=n --with-bdeps=n --with-bdeps-auto=n ${rebuild}'${USE:+ with USE='${USE}'}"
				# shellcheck disable=SC2086
				LC_ALL='C' FEATURES='-fail-clean' emerge \
						  ${parallel} \
						  ${opts} \
						--buildpkg=y \
						--usepkg=n \
						--with-bdeps=n \
						--with-bdeps-auto=n \
					${rebuild} || rc=${?}
			fi
		fi
		;;
esac

# We only reach here if we built a package above...

savefailed
check ${rc} "${package}"

if [ -n "${post_remove:-}" ]; then
	pkg_remove 'post-installation' "${post_remove}"
fi

#do_prelink

find /var/db/pkg/ -mindepth 2 -maxdepth 2 -type d -print |
	sed 's|^.*/var/db/pkg/||' > /builddeps.txt

if [ -n "${ROOT:-}" ] && [ "${ROOT:-}" != '/' ]; then
	find "${ROOT}/var/db/pkg/" -mindepth 2 -maxdepth 2 -type d -print |
		sed 's|^.*/var/db/pkg/||' > "${ROOT:-}"/builddeps.txt
fi

exit ${rc}

#[ -n "${trace:-}" ] && set +o xtrace

# vi: set colorcolumn=80 foldmarker=()\ {,}\ \ #\  foldmethod=marker syntax=sh sw=4 ts=4:
