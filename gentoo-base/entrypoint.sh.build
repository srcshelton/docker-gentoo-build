#! /bin/sh
# shellcheck disable=SC2030,SC2031

# entrypoint.sh.build

set -eu

# shellcheck disable=SC2034
debug=${DEBUG:-}
# shellcheck disable=SC2034
trace=${TRACE:-}

DEFAULT_JOBS="${DEFAULT_JOBS:-"__JOBS__"}"
DEFAULT_MAXLOAD="${DEFAULT_MAXLOAD:-"__MAXLOAD__"}"
environment_file="${environment_file:-"__ENVFILE__"}"

die() {
	printf >&2 'FATAL: %s\n' "${*:-"Unknown error"}"
	exit 1
}  # die

warn() {
	[ -z "${*:-}" ] && echo || printf >&2 'WARN:  %s\n' "${*}"
}  # warn

info() {
	[ -z "${*:-}" ] && echo || printf 'INFO:  %s\n' "${*}"
}  # info

print() {
	if [ -n "${DEBUG:-}" ]; then
		if [ -z "${*:-}" ]; then
			echo >&2
		else
			printf >&2 'DEBUG: %s\n' "${*}"
		fi
	fi
}  # print

format() {
	format_spaces='' format_string=''

	# Pad $format_variable to $format_padding trailing spaces
	#
	format_variable="${1:-}"
	format_padding="${2:-"20"}"

	[ -n "${format_variable:-}" ] || return 1

	format_variable="$( # <- Syntax
		echo "${format_variable}" | xargs -rn 1 | sort -d | xargs -r
	)"
	format_spaces="$( printf "%${format_padding}s" )"
	format_string="%-${format_padding}s= \"%s\"\\n"

	# shellcheck disable=SC2059
	printf "${format_string}" "${format_variable}" "$( # <- Syntax
		cat - |
			grep -- "^${format_variable}=" |
			cut -d'"' -f 2 |
			fmt -w $(( ${COLUMNS:-"80"} - ( format_padding + 3 ) )) |
			sed "s/^/   ${format_spaces}/ ; 1 s/^\s\+//"
	)"

	unset format_string format_spaces format_padding format_variable

	return 0
}  # format

check() {
	check_rc="${1:-}" ; shift

	# Check that a given check_pkg (with build result code $check_rc) is actually
	# installed...
	#
	[ -n "${check_rc:-}" ] || return 1

	check_pkg='' check_arg=''

	if [ $(( check_rc )) -eq 0 ]; then
		# Process first package of list only...
		for check_arg in "${@}"; do
			case "${check_arg}" in
				-*)	continue ;;
				*)	check_pkg="${check_arg}" ; break ;;
			esac
		done
		check_pkg="$( echo "${check_pkg}" | sed -r 's/^[^a-z]+([a-z])/\1/' )"
		if echo "${check_pkg}" | grep -Fq -- '/'; then
			if ! ls -1d \
				"${ROOT:-}/var/db/pkg/${check_pkg%"::"*}"* >/dev/null 2>&1
			then
				die "emerge indicated success but package '${check_pkg%"::"*}'" \
					"does not appear to be installed"
			fi
		else
			if ! ls -1d \
				"${ROOT:-}/var/db/pkg"/*/"${check_pkg%"::"*}"* >/dev/null 2>&1
			then
				die "emerge indicated success but package '${check_pkg%"::"*}'" \
					"does not appear to be installed"
			fi
		fi
	fi

	unset check_pkg check_arg

	# shellcheck disable=SC2086
	return ${check_rc}
}  # check

checkmissing() {
	cm_arg='' cm_package=''

	# Check that packages passed in as arguments have been removed
	#
	# Process first package of list only...
	for cm_arg in "${@}"; do
		case "${cm_arg}" in
			-*)	continue ;;
			*)	cm_package="${cm_arg}" ; break ;;
		esac
	done
	cm_package="$( echo "${cm_package}" | sed -r 's/^[^a-z]+([a-z])/\1/' )"
	if echo "${cm_package}" | grep -Fq -- '/'; then
		if ls -1d "${ROOT:-}/var/db/pkg/${cm_package%"::"*}"* >/dev/null 2>&1
		then
			warn "emerge indicated success but package '${cm_package%"::"*}'" \
				"still appears to be installed under root '${ROOT:-"/"}'"
			return 1
		fi
	else
		if ls -1d "${ROOT:-}/var/db/pkg"/*/"${cm_package%"::"*}"* >/dev/null 2>&1
		then
			warn "emerge indicated success but package '${cm_package%"::"*}'" \
				"still appears to be installed under root '${ROOT:-"/"}'"
			return 1
		fi
	fi

	unset cm_package cm_arg
	return 0
}  # checkmissing

pkg_remove() {
	pr_stage="${1:-}" ; shift
	pr_remove="${*:-}"

	(
		for ROOT in $( echo "${ROOT:-}" '/' | xargs -n 1 | sort | uniq ); do
			export ROOT="${ROOT:-"/"}"
			export LC_ALL='C'

			[ -d "${ROOT}" ] || continue

			echo
			echo " * Removing specified ${pr_stage:+"${pr_stage} "}packages" \
				"'${pr_remove}' from root '${ROOT}'..."

			# shellcheck disable=SC2086
			emerge \
					--ignore-default-opts \
					--color=y \
					--verbose=n \
					--verbose-conflicts \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				--depclean ${pr_remove} || :
			# emerge --depclean exits with code zero even if removal
			# doesn't succeed :(
			# shellcheck disable=SC2086
			checkmissing ${pr_remove} ||
				emerge \
						--ignore-default-opts \
						--color=y \
						--verbose=n \
						--verbose-conflicts \
						--with-bdeps=n \
						--with-bdeps-auto=n \
					--rage-clean ${pr_remove} || :
			# shellcheck disable=SC2086
			checkmissing ${pr_remove} || exit ${?}
			#emerge --depclean -v
			for pkg in ${pr_remove}; do
				rm -vr "${ROOT%"/"}/var/db/pkg/"*"/${pkg}"* 2>/dev/null ||
					rm -vr "${ROOT%"/"}/var/db/pkg/${pkg}"* 2>/dev/null || :
				if [ -e "${ROOT%"/"}/var/lib/portage/world" ]; then
					str="$( echo "${pkg}" | sed 's|/|\\/|g' )"
					if sed -i "/${str}/ d" "${ROOT%"/"}/var/lib/portage/world"
					then
						print "Manually removed '${pkg}' from world profile"
					else
						warn "Failed to remove '${pkg}' from world profile" \
							"(or package already removed)"
					fi
					unset str
				fi
			done
			unset pkg
		done
	)

	unset pr_remove pr_stage
}  # pkg_remove

savefailed() {
	# Save failed build logs ...
	# (e.g. /var/tmp/portage/app-misc/mime-types-9/temp/build.log)

	#[ -n "${trace:-}" ] || set -o xtrace
	# shellcheck disable=SC2012 # We can't rely on findutils being present...
	if [ -n "$( # <- Syntax
			ls -1 "${PORTAGE_TMPDIR}"/portage/*/*/temp/build.log 2>/dev/null |
			head -n 1
	)" ]; then
		mkdir -p "${PORTAGE_LOGDIR}"/failed
		for file in "${PORTAGE_TMPDIR}"/portage/*/*/temp/build.log; do
			cat="$( echo "${file}" | rev | cut -d'/' -f 4 | rev )"
			pkg="$( echo "${file}" | rev | cut -d'/' -f 3 | rev )"
			mkdir --parents "${PORTAGE_LOGDIR}/failed/${cat}"
			mv --verbose "${file}" "${PORTAGE_LOGDIR}/failed/${cat}/${pkg}.log"
			rmdir --parents --ignore-fail-on-non-empty "$( dirname "${file}" )" || :
		done
	fi
	#[ -n "${trace:-}" ] || set +o xtrace
}  # savefailed

applyworkarounds() {
	aw_arg="${1:-}"
	aw_pkgs='' aw_list='' aw_pkg=''
	#inherit use_essential_gcc USE

	# N.B. Ensure any status/user-information output goes to &2!
	#

	[ -n "${aw_arg:-}" ] || return 1
	if [ -n "${2:-}" ]; then
		shift
		if [ "${USE:-}" != "${*}" ]; then
			USE="${USE:+"${USE} "}${*}"
		fi
	fi

	aw_pkgs='sys-devel/gcc'
	info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	aw_list=''
	for aw_pkg in ${aw_pkgs}; do
		aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	done
	#print "Matching ' ${aw_arg} ' against ' ([<>]?=|~)?(${aw_list})(-[^ ]+)? '"
	if echo " ${aw_arg} " |
			sed 's/ /  /g' |
			grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	then
		aw_gcc_use=''
		warn "Activating sys-devel/gcc work-arounds ..."
		print "Before work-around, USE is '${USE}' ..."
		# We want to abort with an unbound variable error if
		# ${use_essential_gcc} is referenced unassigned here...
		# shellcheck disable=SC2154
		aw_gcc_use="$( # <- Syntax
			echo " ${use_essential_gcc} " |
				sed 's/ graphite / -graphite /g ; s/^ // ; s/ $//'
		)"
		USE="${USE:+"$( # <- Syntax
			echo " ${USE} " |
				sed 's/ lib-only / / ; s/^ //'
		)"}-lib-only nls ${aw_gcc_use}"
		unset aw_gcc_use
		print "After work-around, USE is '${USE}'"
	fi

	aw_pkgs='app-containers/podman app-containers/netavark app-containers/aardvark-dns virtual/rust dev-lang/rust dev-util/bindgen'
	info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	aw_list=''
	for aw_pkg in ${aw_pkgs}; do
		aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	done
	#print "Matching ' ${aw_arg} ' against ' ([<>]?=|~)?(${aw_list})(-[^ ]+)? '"
	if echo " ${aw_arg} " |
			sed 's/ /  /g' |
			grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	then
		warn "Activating app-containers/netavark work-arounds ..."
		print "Before work-around, USE is '${USE}' ..."
		USE="${USE:+"$( echo " ${USE} " | sed 's/ -http2 / / ; s/^ //')"}http2"
		print "After work-around, USE is '${USE}'"
	fi

	aw_pkgs='dev-lang/php media-libs/freetype media-libs/harfbuzz'
	info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	aw_list=''
	for aw_pkg in ${aw_pkgs}; do
		aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	done
	#print "Matching ' ${aw_arg} ' against ' ([<>]?=|~)?(${aw_list})(-[^ ]+)? '"
	if echo " ${aw_arg} " |
			sed 's/ /  /g' |
			grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	then
		warn "Activating media-libs/harfbuzz work-arounds ..."
		print "Before work-around, USE is '${USE}' ..."
		USE="${USE:+"$( echo " ${USE} " | sed 's/ harfbuzz / / ; s/^ //')"}-harfbuzz"
		print "After work-around, USE is '${USE}'"
	fi

	aw_pkgs='sys-libs/llvm-libunwind sys-devel/clang sys-devel/clang-common'
	info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	aw_list=''
	for aw_pkg in ${aw_pkgs}; do
		aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	done
	#print "Matching ' ${aw_arg} ' against ' ([<>]?=|~)?(${aw_list})(-[^ ]+)? '"
	if echo " ${aw_arg} " |
			sed 's/ /  /g' |
			grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	then
		warn "Activating sys-libs/llvm-libunwind work-arounds ..."
		print "Before work-around, USE is '${USE}' ..."
		USE="${USE:+"$( echo " ${USE} " | sed 's/ default-compiler-rt / / ; s/^ //')"}-default-compiler-rt"
		#USE="${USE:+"$( echo " ${USE} " | sed 's/ default-libcxx / / ; s/^ //')"}-default-libcxx"
		#USE="${USE:+"$( echo " ${USE} " | sed 's/ default-lld / / ; s/^ //')"}-default-lld"
		USE="${USE:+"$( echo " ${USE} " | sed 's/ llvm-libunwind / / ; s/^ //')"}-llvm-libunwind"
		print "After work-around, USE is '${USE}'"
	fi

	#aw_pkgs='app-containers/buildah'
	#info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	#aw_list=''
	#for aw_pkg in ${aw_pkgs}; do
	#	aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	#done
	#if echo " ${aw_arg} " |
	#		sed 's/ /  /g' |
	#		grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	#then
	#	warn "Activating app-containers/buildah work-arounds ..."
	#	print "Before work-around, USE is '${USE}' ..."
	#	USE="${USE:+"$( echo " ${USE} " | sed 's/ -gold / / ; s/^ //' )"}gold"
	#	export USE
	#	print "After work-around, USE is '${USE}'"
	#fi

	#aw_pkgs='sys-apps/busybox sys-libs/libxcrypt virtual/libcrypt'
	#info >&2 "Checking for ${aw_pkgs} work-arounds ..."
	#aw_list=''
	#for aw_pkg in ${aw_pkgs}; do
	#	aw_list="${aw_list:+"${aw_list}|"}${aw_pkg#*"/"}|${aw_pkg}"
	#done
	#if echo " ${aw_arg} " |
	#		sed 's/ /  /g' |
	#	grep -Eq -- " ([<>]?=|~)?(${aw_list})(-[^ ]+)? "
	#then
	#	if ! command -V equery >/dev/null 2>&1; then
	#		warn "Unable to activate sys-apps/busybox, sys-libs/libxcrypt &" \
	#			"virtual/libcrypt work-arounds due to 'equery' missing"
	#	else
	#		if
	#			equery --no-color uses --ignore-l10n sys-apps/busybox |
	#				grep -q -- '^+static'
	#		then
	#			warn "Activating sys-apps/busybox work-arounds ..."
	#			printf '%s %s\n' 'virtual/libcrypt' '-static-libs' \
	#				>> /etc/portage/package.use/aw_busybox
	#			printf '%s %s\n' 'sys-libs/libxcrypt' '-static-libs' \
	#				>> /etc/portage/package.use/aw_busybox
	#		fi
	#	fi
	#fi

	# We actually don't want to re-order arguments...
	#USE="$( echo "${USE}" | xargs -rn 1 | sort -V | uniq | xargs -r )"
	export USE

	unset aw_pkg aw_list aw_pkgs aw_arg

	echo "${USE:-}"
}  # applyworkarounds

clearworkarounds() {
	rm -rf /etc/portage/package.use/aw_* 2>/dev/null || :
}  # clearworkarounds

git_safedirectory_markall() {
	# Silence 'safe-directory' warnings...
	if command -v git >/dev/null 2>&1; then
		# We don't know when (if at all) we might find that 'git' is installed,
		# so we'll end up needing to call this multiple times - so let's see if
		# the required directive is already present, and only make changes
		# (which git will accumulate rather than deduplicate) if needed...
		#
		grep -q -- '^\s*directory\s*=\s*\*$' ~/.gitconfig 2>/dev/null ||
			git config --global --add safe.directory '*'
	fi
}  # git_safedirectory_markall

# Prelink is no longer supported :(
#
#do_prelink() {
#	# http://www.gentoo.org/doc/en/prelink-howto.xml
#	PRELINK_OPTS='-mRf'
#
#	[ -x /usr/sbin/prelink ] || return 0
#
#	[ -e /etc/prelink.cache] && rm /etc/prelink.cache
#
#	/usr/sbin/prelink -av ${PRELINK_OPTS}
#}  # prelink

do_locale_gen() {
	if command -v locale-gen >/dev/null 2>&1; then
		case "${JOBS:-}" in
			0|1|'*')
				ROOT='' locale-gen --update
				;;
			[0-9]*)
				ROOT='' locale-gen --update --jobs "${JOBS}"
				;;
			''|*)
				ROOT='' locale-gen --update --jobs "${DEFAULT_JOBS}"
				;;
		esac
	fi
}  # do_locale_gen

do_container_setup() {
	do_locale_gen
	echo
	if command -v env-update >/dev/null 2>&1; then
		LC_ALL='C' env-update 2>/dev/null
	fi
	if [ -e /usr/gawk ] || [ -e /usr/bin/gawk ]; then
		# Superseded by app-alternatives/awk...
		#
		if [ -e /usr/bin/eselect ] && [ -s /usr/share/eselect/modules/awk.eselect ]
		then
			eselect awk set gawk
		fi
	fi
	# shellcheck disable=SC2015
	[ -d /etc/env.d/binutils ] &&
		command -v binutils-config >/dev/null 2>&1 &&
			ROOT='' binutils-config 1 2>/dev/null |
				grep -v -- '^\s*$' || :
	echo
	[ -d /etc/env.d/gcc ] &&
		command -v gcc-config >/dev/null 2>&1 &&
			ROOT='' gcc-config 1
	echo

	# shellcheck disable=SC2015
	command -v etc-update >/dev/null 2>&1 &&
		etc-update --automode -5 2>/dev/null |
			grep -Fv -- 'Nothing left to do; exiting' || :
}  # do_container_setup

if echo " ${*:-} " | grep -Fq -- ' --finalise-container '; then
	print "Finalising container image ..."
	do_container_setup
	rm -r /var/db/repo
	exit ${?}
fi

if [ -n "${DEV_MODE:-}" ]; then
	cat <<EOF

*******************************************************************************
*                                                                             *
* OPERATING IN DEV_MODE                                                       *
*                                                                             *
* This script is running as it exists on-disk, overriding the container image *
* contents.  Do not use the output of this mode for reliable builds.          *
*                                                                             *
*******************************************************************************

EOF
fi

[ -n "${trace:-}" ] && set -o xtrace

if set | grep -q -- '=__[A-Z]\+__$'; then
	die "Unexpanded variable(s) in environment: $( # <- Syntax
		set | grep -- '=__[A-Z]\+__$' | cut -d'=' -f 1 | xargs -r
	)"
fi

# shellcheck disable=SC2015,SC1091,SC1090
[ -s "${environment_file}" ] &&
	. "${environment_file}" ||
		die "gentoo-build:entrypoint.sh Unable to source" \
			"'${environment_file}': ${?}"

# shellcheck disable=SC1091
[ -s /etc/profile ] && . /etc/profile

if printf '%s' " ${*:-} " | grep -Fq -- ' --verbose-build '; then
	parallel='--jobs=1 --quiet-build=n'
else
	if [ -n "${JOBS:-}" ]; then
		case "${JOBS}" in
			0|1)
				parallel=''
				;;
			'*')
				parallel='--jobs'
				;;
			[0-9]*)
				parallel="--jobs=${JOBS}"
				;;
			*)
				parallel="--jobs=${DEFAULT_JOBS}"
				;;
		esac
	else
		parallel="--jobs=${DEFAULT_JOBS}"
	fi
fi

if [ -z "${MAXLOAD:-}" ] || [ "${MAXLOAD:-}" != '0' ]; then
	parallel="${parallel:+"${parallel} "}--load-average=${MAXLOAD:-"${DEFAULT_MAXLOAD}"}"
fi

#for f in $( grep -Rl -- 'collision' log/docker.*.log ); do
#		sed '\x1b\[[0-9;]*m//g' "${f}" |
#			awk --assign p=0 '/Detected file collision\(s\):$/ { p = 2 } ; /^ \* $/ { p = p - 1 } ; ( 1 == p ) { print $2 }'
#done |
#	xargs -rn 1 dirname |
#		sed 's|/c.i-php.\../|/*/| ; s|/spamassassin/|/*/| ; s|$|/*|' |
#		sort |
#		uniq
COLLISION_IGNORE="${COLLISION_IGNORE:-"/lib/modules/*"}
	/service/bin/*
	/service/etc/php/*/ext-active/*
	/service/sbin/*
	/service/usr/bin/*
	/service/usr/share/*/*
	/service/var/lib/*/*
	/var/lib/portage/home/*
"
export COLLISION_IGNORE

TUSE='' pkg_use_pkg='' pkg_use_use='' pkg_use_file=''
pkg_mask_pkg='' pkg_mask_file='' extra_file='' extra_files=''
force_python=''
pre_remove='' pre_pkgs='' pre_use=''
post_pkgs='' post_use='' post_remove=''
rebuild='' depclean_extra='' depclean_exclude=''
depclean=0 change_sysroot=0 pkg_use=0 pkg_mask=0 no_use=0 rc=0
for arg in "${@}"; do
	#print "Read argument '${arg}'"

	shift
	case "${arg}" in
		--force-python=*)
			force_python="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			if ! echo "${force_python:-}" |
					grep -q -- '^python[2-9]_[0-9]$'
			then
				die "Portage python token '${force_python:-}' is not valid"
			fi
			continue
			;;
		--no-package-use)
			no_use=1
			continue
			;;
		--pre-remove=*)
			pre_remove="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--pre-pkgs=*)
			pre_pkgs="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--pre-use=*)
			pre_use="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--post-pkgs=*)
			post_pkgs="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--post-use=*)
			post_use="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--rebuild=*)
			rebuild="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--post-remove=*)
			post_remove="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--depclean)
			depclean=1
			continue
			;;
		--depclean-extra=*)
			depclean_extra="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--depclean-exclude=*)
			depclean_exclude="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--sysroot)
			change_sysroot=1
			continue
			;;
		--verbose-build)
			continue
			;;
		--with-use=*)
			TUSE="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			continue
			;;
		--with-pkg-use=*|--with-package-use=*)
			# e.g. --with-pkg-use='sys-apps/coreutils -hostname'
			#
			pkg_use=1
			pkg_use_use="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			pkg_use_pkg="$( # <- Syntax
				echo "${pkg_use_use:-}" | cut -d' ' -f 1
			)"
			pkg_use_use="$( # <- Syntax
				echo "${pkg_use_use:-}" | cut -d' ' -f 2-
			)"
			if [ -z "${pkg_use_pkg:-}" ] || [ -z "${pkg_use_use:-}" ]; then
				die "Unable to extract package and USE flags from '${arg}'"
			fi
			mkdir -p /etc/portage/package.use
			pkg_use_file="/etc/portage/package.use/$( # <- Syntax
				echo "${pkg_use_pkg}" | cut -d'/' -f 2-
			)"
			printf '%s %s\n' \
				"${pkg_use_pkg}" \
				"${pkg_use_use}" >> "${pkg_use_file}"
			warn "Applied override USE flag(s):"
			warn "  ${pkg_use_file}:"
			warn "$( sed 's/^/    /' < "${pkg_use_file}" )"
			extra_files="${extra_files:+"${extra_files} "}${pkg_use_file}"
			pkg_use_file='' pkg_use_pkg='' pkg_use_use=''
			continue
			;;
		--with-pkg-mask=*|--with-package-mask=*)
			pkg_mask=1
			pkg_mask_pkg="$( # <- Syntax
				printf '%s' "${arg}" | sed -z 's/^[^=]*=//' | tr -d '\n'
			)"
			mkdir -p /etc/portage/package.mask
			#pkg_mask_file="/etc/portage/package.mask/$( # <- Syntax
			#	echo "${pkg_mask_pkg}" | cut -d'/' -f 2-
			#)"
			pkg_mask_file="/etc/portage/package.mask/extra.mask"
			printf '%s\n' "${pkg_mask_pkg}" >> "${pkg_mask_file}"
			#warn "Applied package mask(s):"
			#warn "  ${pkg_mask_file}:"
			##warn "$( sed 's/^/    /' < "${pkg_mask_file}" )"
			#line=''
			#cat "${pkg_mask_file}" | while read -r line; do
			#	warn "    ${line}"
			#done
			#unset line
			if ! echo " ${extra_files:-} " | grep -Fq " ${pkg_mask_file} "
			then
				extra_files="${extra_files:+"${extra_files} "}${pkg_mask_file}"
			fi
			pkg_mask_pkg=''
			continue
			;;
		*)
			set -- "${@}" "${arg}"
			;;
	esac
done
unset pkg_mask_pkg pkg_use_file pkg_use_pkg pkg_use_use arg

if [ -e /etc/portage/repos.conf.host ]; then
	echo
	info "Mirroring host repos.conf to container ..."
	if [ -e /etc/portage/repos.conf ]; then
		if [ -d /etc/portage/repos.conf ]; then
			for f in /etc/portage/repos.conf/*; do
				umount -q "${f}" || :
			done
		fi
		umount -q /etc/portage/repos.conf || :
		rm -rf /etc/portage/repos.conf || :

		[ -e /etc/portage/repos.conf ] &&
			mv /etc/portage/repos.conf /etc/portage/repos.conf.disabled
	fi
	cp -a /etc/portage/repos.conf.host /etc/portage/repos.conf ||
		die "Can't copy host repos.conf: ${?}"
fi

if [ $(( no_use )) -ne 0 ]; then
	# My suspicion is that package.use contents are interfering with
	# environment USE flags...
	#
	if [ -e /etc/portage/package.use ]; then
		if [ $(( pkg_use )) -ne 0 ]; then
			warn "'--with-pkg-use' option will be overridden by '--no-package-use'"
		fi
		echo
		warn "Removing default '/etc/portage/package.use' settings"
		mv /etc/portage/package.use /etc/portage/package.use.disabled
	fi
fi
if [ $(( pkg_mask )) -ne 0 ]; then
	warn "Applied package mask(s):"
	warn "  ${pkg_mask_file}:"
	#warn "$( sed 's/^/    /' < "${pkg_mask_file}" )"
	line=''
	while read -r line; do
		warn "    ${line}"
	done < "${pkg_mask_file}"
	unset line pkg_mask_file
fi

override='' object='' headers='' header='' file='' dest=''
find /etc/portage/ -mindepth 1 -maxdepth 1 -name '*.override' -print | while read -r override; do
	object="$( echo "${override}" | sed 's/\.override$//' )"
	if [ -e "${object}" ]; then
		mv "${object}" "${object}.disabled"
	fi

	# override can be a file or directory
	# header can be in current or override directory (if not a file), but must be a file
	#
	if [ -d "${object}.header" ] || [ -d "${override}.header" ]; then
		[ -d "${object}.header" ] && warn "Override header directories not supported: '${object}.header' not applied"
		[ -d "${override}.header" ] && warn "Override header directories not supported: '${override}.header' not applied"
	fi
	if [ -d "${override}" ]; then
		headers="$( find "${override}"/ -mindepth 1 -maxdepth 1 -name '*.header' -print )"
		if [ -f "${object}.header" ] || [ -f "${override}.header" ] || [ -n "${headers:-}" ]; then
			mkdir -p "${object}"

			for header in "${object}.header" "${override}.header" ${headers}; do
				[ -f "${header}" ] || continue
				find "${override}"/ -mindepth 1 -not -name '*.header' -print | while read -r file; do
					dest="$( echo "${file}" | sed "s|^${override}|${object}|" )"
					mkdir -p "$( dirname "${dest}" )"

					if [ -f "${file}" ]; then
						if [ -f "${dest}" ]; then
							print "Adding override header '${header}' to existing file '${file}' ('${dest}')"
							cat "${header}" "${dest}" > "${dest}.tmp"
							mv "${dest}.tmp" "${dest}"
						else
							print "Applying override header '${header}' to file '${file}' ('${dest}')"
							cat "${header}" "${file}" > "${dest}"
						fi
					elif [ -d "${file}" ]; then
						if ! [ -d "${dest}" ]; then
							# FIXME: Support directories?
							#
							warn "Not applying override header '${header}' to directory '${file}' ('${dest}')"
							cp -a "${file}" "${dest}"
						fi
					else
						if ! [ -e "${dest}" ]; then
							warn "Not applying override header '${header}' to non-regular file '${file}' ('${dest}')"
							cp -a "${file}" "${dest}"
						fi
					fi
				done
			done
		else
			# Simply copy $override...
			#
			cp -a "${override}" "${object}"
		fi
	elif [ -f "${override}" ]; then
		if [ -f "${object}.header" ] || [ -f "${override}.header" ]; then
			# shellcheck disable=SC2046
			cat > "${object}" \
				$( [ -f "${override}.header" ] && { warn >&2 "Using override '${override}.header' for item '${object}'" ; echo "${override}.header" ; } ) \
				$( [ -f "${object}.header" ] && { warn >&2 "Using override '${object}.header' for item '${object}'" ; echo "${object}.header" ; } ) \
				"${override}"
		else
			# Simply copy $override...
			#
			cp -a "${override}" "${object}"
		fi
	fi
done

if command -v pypy3 >/dev/null 2>&1; then
	print "Enabling pypy3 support for portage ..."
	mkdir -p /etc/python-exec
	echo 'pypy3' >> /etc/python-exec/emerge.conf
	print "$( emerge --info | head -n 1 2>&1 )"
fi

#warn >&2 "Inherited USE-flags: '${USE:-}'"

# post_use should be based on the original USE flags, without --with-use
# additions...
#
if [ -n "${post_use:-}" ]; then
	if ! printf ' %s ' "${post_use:-}" | grep -Fq -- ' -* '; then
		post_use="${USE:+"${USE} "}${post_use:-}"
	fi
else
	post_use="${USE:-}"
fi
if [ -n "${use_essential:-}" ]; then
	if ! echo "${post_use:-}" |
			grep -Fq -- "${use_essential}"
	then
		post_use="${post_use:+"${post_use} "}${use_essential}"
	fi
fi
if [ -n "${TUSE:-}" ]; then
	if ! printf '%s' " ${TUSE} " | grep -Fq -- ' -* '; then
		TUSE="${USE:+"${USE} "}${TUSE}"
	fi
	if
		[ -n "${use_essential:-}" ] &&
			echo "${TUSE}" | grep -Fq -- "${use_essential}"
	then
		USE="${TUSE}"
	else
		USE="${TUSE}${use_essential:+" ${use_essential}"}"
	fi
	export USE
fi
unset TUSE

info="$( # <- Syntax
	LC_ALL='C' emerge --info --verbose=y
)"
echo
echo 'Resolved build variables for build stage:'
echo '----------------------------------------'
echo
#echo "ROOT                = $( # <- Syntax
#	echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2-
#)"
#echo "SYSROOT             = $( # <- Syntax
#	echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2-
#)"
echo "PORTAGE_CONFIGROOT  = $( # <- Syntax
	echo "${info}" | grep -- '^PORTAGE_CONFIGROOT=' | cut -d'=' -f 2-
)"
echo
echo "${info}" | format 'FEATURES'
echo "${info}" | format 'ACCEPT_LICENSE'
echo "${info}" | format 'ACCEPT_KEYWORDS'
echo "${info}" | format 'USE'
echo "MAKEOPTS            = $( # <- Syntax
	echo "${info}" | grep -- '^MAKEOPTS=' | cut -d'=' -f 2-
)"
echo
echo "${info}" | format 'EMERGE_DEFAULT_OPTS'
echo
echo "DISTDIR             = $( # <- Syntax
	echo "${info}" | grep -- '^DISTDIR=' | cut -d'=' -f 2-
)"
echo "PKGDIR              = $( # <- Syntax
	echo "${info}" | grep -- '^PKGDIR=' | cut -d'=' -f 2-
)"
echo "PORTAGE_LOGDIR      = $( # <- Syntax
	echo "${info}" | grep -- '^PORTAGE_LOGDIR=' | cut -d'=' -f 2-
)"
echo
unset info

package='app-shells/bash'
opts='--tree'
# shellcheck disable=SC2015
printf ' %s ' "${*}" | grep -Fq -- ' --nodeps ' && opts='' || :

if [ -n "${ECLASS_OVERRIDE:-}" ]; then
	echo
	warn "Applying eclass override for repo '${ECLASS_OVERRIDE}' ..."

	(
		for ROOT in $( echo '/' "${ROOT:-}" | xargs -n 1 | sort | uniq ); do
			if [ -e "${ROOT%"/"}/etc/portage/repos.conf" ]; then
				if grep -qR -- '^\s*eclass-overrides' "${ROOT%"/"}/etc/portage/repos.conf"; then
					echo "INFO:  Adding eclass override '${ECLASS_OVERRIDE}' to repos.conf for installation root '${ROOT}' ..."
					if [ -f "${ROOT%"/"}/etc/portage/repos.conf" ]; then
						sed -e "/^\s*eclass-overrides/ s/\(\s*$\|\s*#.*$\)/ ${ECLASS_OVERRIDE}\1/" \
								-i "${ROOT%"/"}/etc/portage/repos.conf" ||
							die "Failed to update '${ROOT%"/"}/etc/portage/repos.conf': ${?}"
					elif [ -f "${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf" ]; then
						sed -e "/^\s*eclass-overrides/ s/\(\s*$\|\s*#.*$\)/ ${ECLASS_OVERRIDE}\1/" \
								-i "${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf" ||
							die "Failed to update '${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf': ${?}"
					else
						die "Could not find repo configuration file to update for installation root '${ROOT}'"
					fi
				else
					echo "Setting eclass override '${ECLASS_OVERRIDE}' in repos.conf for installation root '${ROOT}' ..."
					if [ -f "${ROOT%"/"}/etc/portage/repos.conf" ]; then
						printf '\neclass-overrides = %s\n' "${ECLASS_OVERRIDE}" \
								>> "${ROOT%"/"}/etc/portage/repos.conf" ||
							die "Failed to update '${ROOT%"/"}/etc/portage/repos.conf': ${?}"
					elif [ -f "${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf" ]; then
						printf '\neclass-overrides = %s\n' "${ECLASS_OVERRIDE}" \
								>> "${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf" ||
							die "Failed to update '${ROOT%"/"}/etc/portage/repos.conf/DEFAULT.conf': ${?}"
					else
						die "Could not find repo configuration file to update for installation root '${ROOT}'"
					fi
				fi
				{
					echo "Active overrides:"
					grep -HR -- '^\s*eclass-overrides' "${ROOT%"/"}/etc/portage/repos.conf/"
				} | sed 's/^/       /'
			else
				warn "Could not find repo configuration for installation root '${ROOT}'"
			fi
		done
	)
fi


if [ -n "${pre_remove:-}" ]; then
	pkg_remove 'pre-installation' "${pre_remove}"
fi

if [ -n "${force_python:-}" ]; then
	pre_pkgs="${pre_pkgs:+"${pre_pkgs} "}dev-lang/python:$( echo "${force_python}" | sed 's/^python// ; s/_/./' )"
fi
if [ -n "${pre_pkgs:-}" ]; then
	echo
	echo " * Building specified pre-installation packages '${pre_pkgs}' ..."
	(
		if [ -n "${pre_use:-}" ]; then
			if ! printf ' %s ' "${pre_use}" | grep -Fq -- ' -* '; then
				pre_use="${USE:+"${USE} "}${pre_use}"
			fi
			if [ -n "${use_essential:-}" ] && echo "${pre_use}" | grep -Fq -- "${use_essential}"; then
				USE="${pre_use}"
			else
				USE="${pre_use} ${use_essential}"
			fi
		fi
		if
			echo " ${pre_pkgs} " |
				grep -Pq -- ' ([=<>!~][=!]?)?(sys-devel/)?gcc(-[0-9.r-]+)?[*]?(:(?:[*]|[0-9.]*)=?)? ' >dev/null 2>&1
		then
			# shellcheck disable=SC2154
			USE="${USE:+"${USE} "}${use_essential_gcc}"
		fi
		export ROOT='/'
		export USE
		export FEATURES="${FEATURES:+"${FEATURES} "}-fail-clean"
		export LC_ALL='C'

		info="$( emerge --info --verbose=y )"
		echo
		echo 'Resolved build variables for pre-installation packages:'
		echo '------------------------------------------------------'
		echo
		echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
		echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'USE'
		unset info

		export VERY_BRAVE_OR_VERY_DUMB='yes'  # for (old) busybox
		# shellcheck disable=SC2086
		if ! emerge \
				--ignore-default-opts \
				  ${parallel} \
				--binpkg-changed-deps=y \
				--binpkg-respect-use=y \
				--buildpkg=y \
				--color=y \
				--keep-going=y \
				--quiet-build=y \
				  ${opts:-} \
				--usepkg=y \
				--verbose-conflicts \
				--verbose=y \
				--with-bdeps-auto=n \
				--with-bdeps=n \
			${pre_pkgs}
				#--binpkg-changed-deps=y \
				#--rebuild-if-new-slot=y \
				#--rebuilt-binaries=y \
		then
			savefailed
			exit 1
		fi

		git_safedirectory_markall

		if [ -n "${force_python:-}" ]; then
			# shellcheck disable=SC2086
			if ! emerge \
					--ignore-default-opts \
					  ${parallel} \
					--buildpkg=n \
					--color=y \
					--keep-going=y \
					--quiet-build=y \
					  ${opts:-} \
					--usepkg=n \
					--verbose-conflicts \
					--verbose=y \
					--with-bdeps-auto=n \
					--with-bdeps=n \
				dev-lang/python-exec
			then
				savefailed
				exit 1
			fi
		fi # [ -n "${force_python:-}" ]
	)
fi # [ -n "${pre_pkgs:-}" ]

if [ -e /usr/gawk ] || [ -e /usr/bin/gawk ]; then
	# Superseded by app-alternatives/awk...
	#
	if [ -e /usr/bin/eselect ] && [ -s /usr/share/eselect/modules/awk.eselect ]
	then
		eselect awk set gawk
	fi
fi
[ -d /etc/env.d/gcc ] && ROOT='/' gcc-config 1
[ -d /etc/env.d/binutils ] &&
	command -v binutils-config >/dev/null 2>&1 &&
	ROOT='/' binutils-config 1
# shellcheck disable=SC1091
[ -s /etc/profile ] && . /etc/profile

echo
echo " * Ensuring base packages in '/service/' ROOT are current:"
echo

# Replace default file with patched version
#
if [ -s /etc/bash/bashrc ]; then
	mkdir -p /service/etc/bash
	cp /etc/bash/bashrc /service/etc/bash/
fi

# Try not to use too much time building additional locales
#
if [ -s /etc/locale.gen ]; then
	mkdir -p /service/etc
	cp /etc/locale.gen /service/etc/
fi

#time (
(
	ROOT='/service'
	FEATURES="${FEATURES:+"${FEATURES} "}-fail-clean"
	USE="-* -lib-only make-symlinks mdev openmp timezone-tools"
	# Since app-alternatives/* packages are now mandatory, the USE flags these
	# packages rely upon must also be set in order to avoid REQUIRED_USE
	# errors.
	#
	# TODO: Fix this better...
	#
	USE="${USE:-} gawk gnu reference"
	# ... we also need 'http2' if any rust packages need to be updated...
	#
	USE="${USE:-} http2"
	LC_ALL='C'
	VERY_BRAVE_OR_VERY_DUMB='yes'  # for (old) busybox
	export ROOT FEATURES USE LC_ALL VERY_BRAVE_OR_VERY_DUMB

	for extra_file in ${extra_files}; do
		if [ -e "${extra_file}" ] && ! [ -e "${ROOT}${extra_file}" ]; then
			mkdir -p "$( dirname "${ROOT}${extra_file}" )"
			cp --verbose "${extra_file}" "${ROOT}${extra_file}"
		fi
	done
	unset extra_file

	info="$( emerge --info --verbose=y )"
	echo
	echo 'Resolved build variables for service packages:'
	echo '---------------------------------------------'
	echo
	echo "ROOT                = $( # <- Syntax
		echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2-
	)"
	echo "SYSROOT             = $( # <- Syntax
		echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2-
	)"
	echo "${info}" | format 'FEATURES'
	echo "${info}" | format 'USE'
	unset info

	# sys-apps/shadow is needed for /sbin/nologin;
	#
	# sys-apps/coreutils needed for cat/chmod;
	#
	#service_pkgs='virtual/libc app-shells/bash sys-apps/shadow sys-apps/coreutils'
	#
	# ... both now superseded by sys-apps/busybox with USE='make-symlinks'
	# (although this does require disabling collision-detection on other
	#  system packages which install the actual, non-bb, binaries)
	#
	# If we don't build libarchive support here (without USE='lz4'), then when
	# the package is updated we hit a dependency issue whereby cmake requires
	# libarchive requires lz4 requires cmake <sigh>).
	#
	# N.B. This block *requires* that package atoms be fully-qualified,
	#      including category names.
	#
	service_pkgs='virtual/libc sys-apps/busybox'
	if [ -n "${pre_remove:-}" ]; then
		if ! echo "${pre_remove}" |
				grep -Fq -- 'dev-libs/openssl'
		then
			service_pkgs="${service_pkgs} app-arch/libarchive"
		fi
	fi

	service_pkgs="${service_pkgs} dev-lang/python-exec"
	if [ -n "${force_python:-}" ]; then
		service_pkgs="${service_pkgs} dev-lang/python:$( # <- Syntax
			echo "${force_python}" | sed 's/^python// ; s/_/./'
		)"
	fi

	exclude=''
	if [ -n "${pre_remove}" ]; then
		for pkg in ${pre_remove}; do
			exclude="${exclude:+"${exclude} "}--exclude ${pkg}"
		done
		unset pkg
	fi

	echo
	echo " * Packages to install: ${service_pkgs}"
	echo " * Packages to exclude: ${pre_remove:-"<none>"}"

	# 'minimal' required to avoid sys-libs/glibc -> sys-apps/gentoo-functions -> sys-apps/busybox -> virtual/libc -> sys-libs/glibc circular dependency...
	#
	# shellcheck disable=SC2086,SC2046
	if ! USE="${USE:+"${USE} "}minimal" emerge \
			--ignore-default-opts \
			  ${parallel} \
			--binpkg-changed-deps=y \
			--binpkg-respect-use=y \
			--buildpkg=y \
			--color=y \
			--keep-going=y \
			--rebuild-if-new-slot=y \
			--quiet-build=y \
			--update \
			  ${opts:-} \
			--usepkg=y \
			--verbose=y \
			--verbose-conflicts \
			--with-bdeps=n \
			--with-bdeps-auto=n \
			${exclude:-} \
		-- ${service_pkgs}
			#--rebuilt-binaries=y \
	then
		savefailed
		exit 1
	fi

	git_safedirectory_markall

	# Tallies against 'time' call immediately before subshell invocation...
	#echo "Time spent updating build container:"
)

if [ -n "${ROOT:-}" ] && [ "${ROOT}" != '/' ]; then
	if [ $(( change_sysroot )) -ne 0 ]; then
		export SYSROOT="${ROOT}"
	fi

	if [ -e "${ROOT}"/usr/gawk ] || [ -e "${ROOT}"/usr/bin/gawk ]; then
		# Superseded by app-alternatives/awk...
		#
		if [ -e "${ROOT}"/usr/bin/eselect ] && [ -s "${ROOT}"/usr/share/eselect/modules/awk.eselect ]; then
			eselect awk set gawk
		fi
	fi
	[ -d "${ROOT}"/etc/env.d/gcc ] && gcc-config 1
	[ -d "${ROOT}"/etc/env.d/binutils ] && command -v binutils-config >/dev/null 2>&1 && binutils-config 1
	# shellcheck disable=SC1091
	[ -s "${ROOT}"/etc/profile ] && . "${ROOT}"/etc/profile
fi

(
	for ROOT in $( # <- Syntax
			echo '/' "${ROOT:-}" |
				xargs -n 1 |
				sort |
				uniq
	); do
		export ROOT
		if [ -x "${ROOT%"/"}"/usr/bin/eselect ]; then
			if [ -s "${ROOT%"/"}"/usr/share/eselect/modules/python.eselect ]; then
				echo "Setting python implementation for installation root '${ROOT}' ..."
				mkdir -p "${ROOT%"/"}"/etc/python-exec

				eselect python cleanup
				eselect python update --if-unset
				if [ -n "${force_python:-}" ]; then
					print "python-exec supported interpreters: $( python-exec2c -l | xargs echo )"
					if [ "${force_python#"python2"}" != "${force_python}" ]; then
						eselect python set --python2 "$( echo "${force_python}" | tr '_' '.' )"
					else
						eselect python set "$( echo "${force_python}" | tr '_' '.' )"
					fi
				fi
				#eselect python list
				#eselect python --show --python2
				#eselect python --show --python3
			fi
			if [ -s "${ROOT%"/"}"/usr/share/eselect/modules/java-vm.eselect ]; then
				echo "Setting Java VM for installation root '${ROOT}' ..."
				eselect java-vm set system 1
				[ $(( $( id -u ) )) -eq 0 ] || eselect java-vm set user 1
			fi
		fi
		# python-exec now no longer requires the 'eselect' interface...
		#
		if [ -n "${force_python:-}" ]; then
			if [ -s "${ROOT%"/"}"/etc/python-exec/python-exec.conf ]; then
				sed -e 's/^\([^#]\)/#\1/' \
					-i "${ROOT%"/"}"/etc/python-exec/python-exec.conf
			fi
			echo "${force_python}" >> "${ROOT%"/"}"/etc/python-exec/python-exec.conf
		fi
	done
)
if [ -n "${force_python:-}" ]; then
	export PYTHON_COMPAT_OVERRIDE="${force_python}"
fi

case "${1:-}" in
	sh|/bin/sh)
		[ -n "${2:-}" ] && shift

		exec /bin/sh "${@}"
		;;

	bash|/bin/bash)
		[ -n "${2:-}" ] && shift

		exec /bin/bash "${@}"
		;;

	'')
		echo
		echo " * Building default '${package}' package ..."
		echo

		info="$( LC_ALL='C' emerge --info --verbose=y )"
		echo
		echo 'Resolved build variables for default package:'
		echo '---------------------------------------------'
		echo
		echo "ROOT                = $( # <- Syntax
			echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2-
		)"
		echo "SYSROOT             = $( # <- Syntax
			echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2-
		)"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'USE'
		echo "${info}" | format 'PYTHON_SINGLE_TARGET'
		echo "${info}" | format 'PYTHON_TARGETS'
		echo
		target=''
		for target in $( # <- Syntax
			echo "${info}" |
				grep -o ' [^ ]*TARGET[^ ]* ' |
				cut -d'=' -f 1 |
				sed 's/ //g' |
				sort |
				uniq |
				grep -Ev '^(AMDGPU|PYTHON|QEMU)_'
		); do
			echo "${info}" | format "${target}"
		done
		unset target
		echo
		unset info

		print "Running default 'emerge" \
			"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
			"--usepkg=y --with-bdeps=n --with-bdeps-auto=n \"${package}\"'" \
			"with ROOT='${ROOT}'"

		# shellcheck disable=SC2086
		LC_ALL='C' FEATURES='-fail-clean' emerge \
				  ${parallel} \
				  ${opts} \
				--buildpkg=y \
				--usepkg=y \
				--with-bdeps=n \
				--with-bdeps-auto=n \
			"${package}" || rc=${?}

		git_safedirectory_markall
		;;
	*)
		# If 'locale-gen' is initially present, then we *should* already have
		# run it... but then, we're invoking it with '--update' and so
		# re-running should be a no-op?
		#
		has_locale_gen=0
		if command -v locale-gen >/dev/null 2>&1; then
			has_locale_gen=1
		fi

		# Extract first package, to pass to check() below...
		#
		for arg in "${@}"; do
			case "${arg}" in
				-*)	continue ;;
				*)	package="${arg}" ; break ;;
			esac
		done
		unset arg

		echo

		# '--nodeps' should only ever be set when finalising service-builds,
		# whereas the flags required for llvm/clang/llvm-libunwind to work
		# as intended should only be needed for kernel and individual package
		# builds...
		#
		if ! echo " ${post_pkgs:-} " | grep -Fq -- ' --nodeps '; then
			# curl work-arounds... keep in sync with applyworkarounds()
			curl_pkgs='app-containers/podman app-containers/netavark app-containers/aardvark-dns virtual/rust dev-lang/rust dev-util/bindgen'
			curl_list=''
			for curl_pkg in ${curl_pkgs}; do
				curl_list="${curl_list:+"${curl_list}|"}${curl_pkg#*"/"}|${curl_pkg}"
			done
			if curl_pkg="$( # <- Syntax
					echo " ${*} " |
						sed 's/ /  /g' |
						grep -Eo -- " ([<>]?=|~)?(${curl_list})(-[^ ]+)? "
			)" && [ -n "${curl_pkg:-}" ]; then
				curl_pkg="$( echo "${curl_pkg}" | xargs -r )"
				warn "Adding post-package entry 'net-misc/curl' due to presence" \
					"of ${curl_pkg} ..."
				post_pkgs="${post_pkgs:+"${post_pkgs} "}net-misc/curl"
			fi
			unset curl_pkg curl_list curl_pkgs

			# harfbuzz work-arounds... keep in sync with applyworkarounds()
			harfbuzz_pkgs='dev-lang/php media-libs/freetype media-libs/harfbuzz'
			harfbuzz_list=''
			for harfbuzz_pkg in ${harfbuzz_pkgs}; do
				harfbuzz_list="${harfbuzz_list:+"${harfbuzz_list}|"}${harfbuzz_pkg#*"/"}|${harfbuzz_pkg}"
			done
			if harfbuzz_pkg="$( # <- Syntax
					echo " ${*} " |
						sed 's/ /  /g' |
						grep -Eo -- " ([<>]?=|~)?(${harfbuzz_list})(-[^ ]+)? "
			)" && [ -n "${harfbuzz_pkg:-}" ]; then
				harfbuzz_pkg="$( echo "${harfbuzz_pkg}" | xargs -r )"
				warn "Adding post-package entry 'media-libs/freetype' due to presence" \
					"of ${harfbuzz_pkg} ..."
				post_pkgs="${post_pkgs:+"${post_pkgs} "}media-libs/freetype"
			fi
			unset harfbuzz_pkg harfbuzz_list harfbuzz_pkgs

			# llvm-libunwind work-arounds... keep in sync with applyworkarounds()
			llvm_libunwind_pkgs='sys-libs/llvm-libunwind sys-devel/clang sys-devel/clang-common'
			llvm_libunwind_list=''
			for llvm_libunwind_pkg in ${llvm_libunwind_pkgs}; do
				llvm_libunwind_list="${llvm_libunwind_list:+"${llvm_libunwind_list}|"}${llvm_libunwind_pkg#*"/"}|${llvm_libunwind_pkg}"
			done
			if llvm_libunwind_pkg="$( # <- Syntax
					echo " ${*} " |
						sed 's/ /  /g' |
						grep -Eo -- " ([<>]?=|~)?(${llvm_libunwind_list})(-[^ ]+)? "
			)" && [ -n "${llvm_libunwind_pkg:-}" ]; then
				llvm_libunwind_pkg="$( echo "${llvm_libunwind_pkg}" | xargs -r )"
				# 'default-compiler-rt' is a USE-flag for sys-devel/clang:14 but
				# for sys-devel/clang-common thereafter...
				warn "Adding post-package entries 'sys-devel/clang' and" \
					"'sys-devel/clang-common' due to presence of" \
					"${llvm_libunwind_pkg} ..."
				post_pkgs="${post_pkgs:+"${post_pkgs} "}sys-devel/clang sys-devel/clang-common"
				warn "Adding post-package USE flags 'default-compiler-rt" \
					"default-libcxx default-lld llvm-libunwind' due to presence" \
					"of ${llvm_libunwind_pkg} ..."
				post_use="${post_use:+"${post_use} "}default-compiler-rt default-libcxx default-lld llvm-libunwind"
				if echo " ${USE} " | grep -Fq -- ' python_single_target_python'; then
					flag=''
					for flag in ${USE}; do
						if echo "${flag}" | grep -Fq 'python_single_target_python'; then
							post_use="${post_use:+"${post_use} "}${flag}"
						fi
					done
					unset flag
				fi
			fi
			unset llvm_libunwind_pkg llvm_libunwind_list llvm_libunwind_pkgs
		fi # ! echo " ${post_pkgs:-} " | grep -Fq -- ' --nodeps '

		echo " * Building requested '$( # <- Syntax
			printf '%s' "${*}" | sed 's/--[^ ]\+ //g'
		)' packages ${post_pkgs:+"(with post-package list) "}..."
		echo

		if [ -n "${ROOT:-}" ] && [ "${ROOT}" != '/' ] && [ -n "${COLLISION_IGNORE:-}" ]; then
			COLLISION_IGNORE="${COLLISION_IGNORE} $( # <- Syntax
				echo "${COLLISION_IGNORE}" |
					sed "s|${ROOT%"/"}||g"
			)"
		fi
		COLLISION_IGNORE="$( # <- Syntax
			echo "${COLLISION_IGNORE}" |
				xargs -r printf '%s '
		)"
		COLLISION_IGNORE="${COLLISION_IGNORE%" "}"
		export COLLISION_IGNORE

		info="$( LC_ALL='C' emerge --info --verbose=y )"
		echo
		echo "Resolved build variables for requested packages${post_pkgs:+" (with post-package list)"}:"
		echo '-----------------------------------------------'
		echo
		echo "ROOT                = $( echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2- )"
		echo "SYSROOT             = $( echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2- )"
		echo "${info}" | format 'FEATURES'
		echo "${info}" | format 'ACCEPT_LICENSE'
		echo "${info}" | format 'USE'
		echo "${info}" | format 'COLLISION_IGNORE'
		echo "${info}" | format 'PYTHON_SINGLE_TARGET'
		echo "${info}" | format 'PYTHON_TARGETS'
		echo
		target=''
		for target in $( # <- Syntax
			echo "${info}" |
				grep -o ' [^ ]*TARGET[^ ]* ' |
				cut -d'=' -f 1 |
				sed 's/ //g' |
				sort |
				uniq |
				grep -Ev '^(AMDGPU|PYTHON|QEMU)_'
		); do
			echo "${info}" | format "${target}"
		done
		unset target
		#echo
		unset info

		# Do we want to build packages one at a time (indicated via the
		# '--single-build' flag in EMERGE_OPTS)?
		#
		if [ -n "${EMERGE_OPTS:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-build)? '; then
			# Save any command-line flags...
			#
			flags=''
			for arg in "${@}"; do
				case "${arg}" in
					-*)
						flags="${flags:+"${flags} "}${arg}"
						;;
				esac
			done
			unset arg

			# ... then process any non-flag options as individual packages to
			# rebuild, except when EMERGE_OPTS contains '--swap-build', in
			# which case we instead save the first non-flag argument and come
			# back to it later...
			#
			first=''
			for arg in "${@}"; do
				case "${arg}" in
					-*)	continue ;;
					*)
						if [ -z "${first:-}" ]; then
							first="${arg}"
							if echo " ${EMERGE_OPTS} " | grep -Eq -- ' --swap(-build)? '; then
								continue
							fi
						fi

						echo
						echo " * Building single package '${arg}' from '${*}' ..."
						echo
						(
							USE="$( applyworkarounds "${arg}" "${USE}" )"
							export USE
							# shellcheck disable=SC2016
							print "Running 'emerge" \
								"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
								"--usepkg=y --with-bdeps=n" \
								"--with-bdeps-auto=n" \
								"${flags:+"${flags} "}${arg}'${USE:+" with USE='${USE}'"}" \
								"with ROOT='${ROOT}'"
							# shellcheck disable=SC2086
							LC_ALL='C' FEATURES='-fail-clean' emerge \
									  ${parallel} \
									  ${opts} \
									--buildpkg=y \
									--usepkg=y \
									--with-bdeps=n \
									--with-bdeps-auto=n \
									  ${flags:-} \
								"${arg}"
						) || rc=${?}
						clearworkarounds
						;;
				esac

				git_safedirectory_markall
			done
			unset arg

			# ... and finally, if '--swap-build' is in effect, build the first
			# original package specified now, at the end of the process.
			#
			if [ -n "${first:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --swap(-build)? '; then
					echo
					echo " * Building first package '${first}' of '$( printf '%s' "${*}" | sed 's/--[^ ]\+ //g' )' ..."
					echo
					(
						USE="$( applyworkarounds "${first}" "${USE}" )"
						export USE
						# shellcheck disable=SC2016
						print "Running 'emerge" \
							"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
							"--usepkg=y --with-bdeps=n --with-bdeps-auto=n" \
							"${flags:+"${flags} "}${first}'${USE:+" with USE='${USE}'"}" \
							"with ROOT='${ROOT}'"
						# shellcheck disable=SC2086
						LC_ALL='C' FEATURES='-fail-clean' emerge \
								  ${parallel} \
								  ${opts} \
								--buildpkg=y \
								--usepkg=y \
								--with-bdeps=n \
								--with-bdeps-auto=n \
								  ${flags:-} \
							"${first}"
					) || rc=${?}
					clearworkarounds
			fi
			unset first

		else # ! echo " ${EMERGE_OPTS:-} " | grep -Eq -- ' --single(-build)? '; then
			echo
			echo " * Building packages '$( printf '%s' "${*}" | sed 's/--[^ ]\+ //g' )' ..."
			echo
			(
				# We're not performing single-builds, so build everything at the
				# same time (and potentially in parallel)
				#
				USE="$( applyworkarounds "${*}" "${USE}" )"
				export USE
				# shellcheck disable=SC2016
				print "Running 'emerge" \
					"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
					"--usepkg=y --with-bdeps=n --with-bdeps-auto=n" \
					"${*}'${USE:+" with USE='${USE}'"} with ROOT='${ROOT}'"
				# shellcheck disable=SC2086
				LC_ALL='C' FEATURES='-fail-clean' emerge \
						  ${parallel} \
						  ${opts} \
						--buildpkg=y \
						--usepkg=y \
						--with-bdeps=n \
						--with-bdeps-auto=n \
					"${@}"
			) || rc=${?}
			clearworkarounds
		fi

		git_safedirectory_markall

		if [ -n "${post_pkgs:-}" ]; then
			savefailed
			check ${rc} "${@}"

			echo
			echo " * Building specified post-installation '${post_pkgs}'" \
				"packages ..."
			echo

			[ -n "${post_use:-}" ] && export USE="${post_use}"

			info="$( LC_ALL='C' emerge --info --verbose=y )"

			echo
			echo 'Resolved build variables for post-installation packages:'
			echo '-------------------------------------------------------'
			echo
			echo "ROOT                = $( # <- Syntax
				echo "${info}" | grep -- '^ROOT=' | cut -d'=' -f 2-
			)"
			echo "SYSROOT             = $( # <- Syntax
				echo "${info}" | grep -- '^SYSROOT=' | cut -d'=' -f 2-
			)"
			echo "${info}" | format 'FEATURES'
			echo "${info}" | format 'USE'
			echo "${info}" | format 'PYTHON_SINGLE_TARGET'
			echo "${info}" | format 'PYTHON_TARGETS'
			echo
			target=''
			for target in $( # <- Syntax
				echo "${info}" |
					grep -o ' [^ ]*TARGET[^ ]* ' |
					cut -d'=' -f 1 |
					sed 's/ //g' |
					sort |
					uniq |
					grep -Ev '^(AMDGPU|PYTHON|QEMU)_'
			); do
				echo "${info}" | format "${target}"
			done
			unset target
			echo
			unset info

			#print "Running 'emerge ${opts:+"${opts} "}--jobs=1" \
			#	"--quiet-build=n --buildpkg=y --usepkg=y --with-bdeps=n" \
			#	"--with-bdeps-auto=n" \
			#	"${post_pkgs}'${USE:+" with USE='${USE}'"} with ROOT='${ROOT}'"
			#LC_ALL='C' FEATURES='-fail-clean' emerge \
			#		  ${opts} \
			#		--jobs=1 \
			#		--quiet-build=n \
			#		--buildpkg=y \
			#		--usepkg=y \
			#		--with-bdeps=n \
			#		--with-bdeps-auto=n \
			#	${post_pkgs} || rc=${?}

			# In case we're building with --nodeps, extract acct-* packages
			# first...
			#
			if echo "${post_pkgs}" | grep -q -- 'acct-'; then
				post_acct_pkgs="$( # <- Syntax
					echo "${post_pkgs}" |
						xargs -rn 1 |
						grep '^acct-' |
						sort |
						xargs -r
				)"
				if [ -n "${post_acct_pkgs:-}" ]; then
					# shellcheck disable=SC2016
					print "Running 'emerge" \
						"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
						"--usepkg=y --with-bdeps=n --with-bdeps-auto=n" \
						"${post_acct_pkgs}'${USE:+" with USE='${USE}'"} with" \
						"ROOT='${ROOT}'"
					# shellcheck disable=SC2086
					LC_ALL='C' FEATURES='-fail-clean' VERY_BRAVE_OR_VERY_DUMB='yes' emerge \
							  ${parallel} \
							  ${opts} \
							--buildpkg=y \
							--usepkg=y \
							--with-bdeps=n \
							--with-bdeps-auto=n \
						${post_acct_pkgs} || rc=${?}
				fi
				post_pkgs="$( # <- Syntax
					echo "${post_pkgs}" |
						xargs -rn 1 |
						grep --invert-match '^acct-' |
						xargs -r
				)"
			fi

			# First build any post_pkgs which will be installed without
			# dependencies on the base-system, to ensure that the right binary
			# package is available to the ROOT installation...
			#
			if echo " ${post_pkgs:-} " | grep -q ' --nodeps '; then
				# shellcheck disable=SC2016
				print "Running 'emerge" \
						"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
						"--usepkg=y --with-bdeps=y --with-bdeps-auto=y $( # <- Syntax
					echo " ${post_pkgs} " | sed 's/ --nodeps / /g ; s/^ // ; s/ $//'
				)'${USE:+" with USE='${USE}'"} with ROOT='${ROOT}'"
				# shellcheck disable=SC2046,SC2086
				ROOT='/' SYSROOT='/' PORTAGE_CONFIGROOT='/' \
				LC_ALL='C' FEATURES='-fail-clean' VERY_BRAVE_OR_VERY_DUMB='yes' emerge \
						  ${parallel} \
						  ${opts} \
						--buildpkg=y \
						--usepkg=y \
						--with-bdeps=y \
						--with-bdeps-auto=y \
					$( # <- Syntax
						echo " ${post_pkgs} " | sed 's/ --nodeps / /g ; s/^ // ; s/ $//'
					) || rc=${?}
			fi # echo " ${post_pkgs:-} " | grep -q ' --nodeps '

			git_safedirectory_markall

			gcc_exclude=''
			if echo " ${post_pkgs} " | grep -q -- '\s--nodeps\s' &&
				echo " ${post_pkgs} " |
					grep -Eq -- '\s([<>]?=?sys-devel/)?gcc([-:][^\s]+)?\s'
			then
				gcc_exclude='--exclude=sys-devel/gcc'
			fi
			# shellcheck disable=SC2016
			print "Running 'emerge" \
				"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
				"--usepkg=y --with-bdeps=n" \
				"--with-bdeps-auto=n${gcc_exclude:+" ${gcc_exclude}"}" \
				"${post_pkgs}'${USE:+" with USE='${USE}'"} with" \
				"ROOT='${ROOT}'"
			# shellcheck disable=SC2086
			LC_ALL='C' FEATURES='-fail-clean' VERY_BRAVE_OR_VERY_DUMB='yes' emerge \
					  ${parallel} \
					  ${opts} \
					--buildpkg=y \
					  ${gcc_exclude:-} \
					--usepkg=y \
					--with-bdeps=n \
					--with-bdeps-auto=n \
				${post_pkgs} || rc=${?}

			if [ -n "${gcc_exclude:-}" ]; then
				gcc_pkgs="$( # <- Syntax
					echo " ${post_pkgs} " |
						grep -Eo -- '\s([<>]?=?sys-devel/)?gcc([-:][^\s]+)?\s' |
						awk '{ print $1 }'
				)"
				if [ -n "${gcc_pkgs:-}" ]; then
					# shellcheck disable=SC2016
					print "Running 'emerge" \
						"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
						"--usepkg=y --with-bdeps=n --with-bdeps-auto=n --nodeps" \
						"${gcc_pkgs}'${USE:+" with USE='${USE}'"} with" \
						"ROOT='${ROOT}'"
					# shellcheck disable=SC2086
					LC_ALL='C' FEATURES='-fail-clean' VERY_BRAVE_OR_VERY_DUMB='yes' emerge \
							  ${opts} \
							  ${parallel} \
							--buildpkg=y \
							--nodeps \
							--usepkg=y \
							--with-bdeps-auto=n \
							--with-bdeps=n \
						"${gcc_pkgs}" || rc=${?}
				fi # [ -n "${gcc_pkgs:-}" ]
				unset gcc_pkgs
			fi # [ -n "${gcc_exclude:-}" ] && echo "${post_pkgs}" | grep -Fq -- 'gcc'
			unset gcc_exclude
		fi # [ -n "${post_pkgs:-}" ]

		if [ -n "${rebuild:-}" ]; then
			echo
			#if [ -z "${post_pkgs:-}" ]; then
				echo " * Rebuilding requested '${rebuild}' package(s) ..."
			#else
			#	echo " * Rebuilding requested '${rebuild}' post-package(s) ..."
			#fi
			echo

			# See handling of EMERGE_OPTS above for details of logic below, but
			# without the complexity of '--swap-build' and with the (passed-in)
			# value of '${rebuid}' appended to the argument list...
			#
			if [ -n "${EMERGE_OPTS:-}" ] && echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-rebuild)? '; then
				flags=''
				for arg in "${@}" ${rebuild}; do
					case "${arg}" in
						-*)
							flags="${flags:+"${flags} "}${arg}"
							;;
					esac
				done
				unset arg

				for arg in ${rebuild}; do
					case "${arg}" in
						-*)	continue ;;
						*)
							echo
							echo " * Building single package '${arg}'" \
								"from '${rebuild} ..."
							echo

							(
								# Reinstall package first to maximise dependency re-use...
								#
								USE="$( applyworkarounds "${arg}" "${USE}" )"
								export USE
								# shellcheck disable=SC2016
								print "Running build-dependencies 'emerge" \
									"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
									"--usepkg=y --with-bdeps=y" \
									"${flags:+"${flags} "}${arg}'${USE:+" with USE='${USE}'"}" \
									"with ROOT='${ROOT}'"
								# shellcheck disable=SC2086
								LC_ALL='C' FEATURES='-fail-clean' emerge \
										  ${parallel} \
										  ${opts} \
										--buildpkg=y \
										--usepkg=y \
										--with-bdeps=y \
										  ${flags:-} \
									${arg}
							) || rc=${?}
							clearworkarounds

							git_safedirectory_markall

							# ... then install again without '--usepkg':
							#
							# shellcheck disable=SC2016
							#set -x
							#print "Running 'emerge" \
							#	"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
							#	"--usepkg=n --with-bdeps=n --with-bdeps-auto=n" \
							#	"${flags:+"${flags} "}${arg}'${USE:+" with USE='${USE}'"}" \
							#	"with ROOT='${ROOT}'"
							#set +x
							#/usr/libexec/entrypoint.sh: line 1566: arithmetic syntax error
							printf "Running 'emerge %s%s--buildpkg=y --usepkg=n --with-bdeps=n --with-bdeps-auto=n %s%s'%s with ROOT='%s'" \
								"${parallel:+"${parallel} "}" \
								"${opts:+"${opts} "}" \
								"${flags:+"${flags} "}" \
								"${arg}" \
								"${USE:+" with USE='${USE}'"}" \
								"${ROOT}"
							# shellcheck disable=SC2086
							LC_ALL='C' FEATURES='-fail-clean' emerge \
									  ${parallel} \
									  ${opts} \
									--buildpkg=y \
									--usepkg=n \
									--with-bdeps=n \
									--with-bdeps-auto=n \
									  ${flags:-} \
								${arg} || rc=${?}
							;;
					esac
				done
				unset arg

			else # [ -z "${EMERGE_OPTS:-}" ] || ! echo " ${EMERGE_OPTS} " | grep -Eq -- ' --single(-rebuild)? '; then
				(
					# Reinstall package first to maximise dependency re-use...
					#
					USE="$( applyworkarounds "${rebuild}" "${USE}" )"
					export USE
					# shellcheck disable=SC2016
					print "Running build-dependencies 'emerge" \
						"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
						"--usepkg=y --with-bdeps=y" \
						"${rebuild}'${USE:+" with USE='${USE}'"} with ROOT='${ROOT}'"
					# shellcheck disable=SC2086
					LC_ALL='C' FEATURES='-fail-clean' emerge \
							  ${parallel} \
							  ${opts} \
							--buildpkg=y \
							--usepkg=y \
							--with-bdeps=y \
						${rebuild}
				) || rc=${?}

				git_safedirectory_markall

				# ... then install again without '--usepkg':
				#
				# shellcheck disable=SC2016
				print "Running 'emerge" \
					"${parallel:+"${parallel} "}${opts:+"${opts} "}--buildpkg=y" \
					"--usepkg=n --with-bdeps=n --with-bdeps-auto=n" \
					"${rebuild}'${USE:+" with USE='${USE}'"} with ROOT='${ROOT}'"
				# shellcheck disable=SC2086
				LC_ALL='C' FEATURES='-fail-clean' emerge \
						  ${parallel} \
						  ${opts} \
						--buildpkg=y \
						--usepkg=n \
						--with-bdeps=n \
						--with-bdeps-auto=n \
					${rebuild} || rc=${?}
				clearworkarounds
			fi
		fi # [ -n "${rebuild:-}" ]

		if [ $(( has_locale_gen )) -eq 0 ]; then
			do_locale_gen
		fi
		;;
esac

# We only reach here if we built a package above...
#

savefailed
check ${rc} "${package}"

if [ -n "${post_remove:-}" ]; then
	pkg_remove 'post-installation' "${post_remove}"
fi

if [ $(( depclean )) -ne 0 ]; then
	echo
	echo " * Running 'depclean' against ROOT '${ROOT:-"/"}' ..."

	mkdir -p /etc/portage/profile
	if [ -s /etc/portage/profile/package.provided ]; then
		mv /etc/portage/profile/package.provided \
			/etc/portage/profile/package.provided.backup
	fi

	# This list must be kept in sync with sys-devel/gcc dependencies!
	#
	cat >> /etc/portage/profile/package.provided <<-EOF
		dev-libs/gmp-4.3.2
		dev-libs/mpc-0.8.1
		dev-libs/mpfr-2.4.2
		sys-devel/gcc-config-2.3
	EOF

	# 'emerge --exclude' has unhelpful syntax requirements in that it won't
	# accept initial comparators or versions, so we need to strip these in a
	# sensible way <sigh>.
	#
	# We're also unable to use the (bash) functions from eapi7-ver.eclass in
	# this (POSIX sh) script.
	#
	# ... so let's just do the best we can.
	#
	filtered_depclean_exclude=''
	for arg in ${depclean_exclude}; do
		filtered_depclean_exclude="${filtered_depclean_exclude:+"${filtered_depclean_exclude} "}$( # <- Syntax
			echo "${arg}" | sed 's/^[<>]\?=\?// ; s/-[0-9].*$// ; s/::.*$//'
		)"
	done
	unset arg
	depclean_exclude="${filtered_depclean_exclude:-}"
	unset filtered_depclean_exclude

	# FIXME: This may be overkill, but some containers which don't use perl
	# seem to have it pulled-in regardless...
	#
	# ...and we're still getting some build-time dependencies retained...
	#
	# shellcheck disable=SC2046
	LC_ALL='C' emerge \
			--depclean \
			  ${depclean_exclude:+"--exclude=${depclean_exclude}"} \
			--verbose=y \
			--with-bdeps=n \
		'perl-core/*' 'virtual/perl-*' \
		$( echo "${package} ${post_pkgs}" | grep -Fq -- 'dev-lang/perl' || echo "dev-lang/perl" ) \
		app-alternatives/yacc sys-devel/bison \
		app-alternatives/awk sys-apps/gawk \
		app-alternatives/gzip app-arch/gzip \
		sys-apps/grep \
		dev-libs/isl || :

	if [ -n "${depclean_extra:-}" ]; then
		# shellcheck disable=SC2086
		LC_ALL='C' emerge \
				--depclean \
				--verbose=y \
				--with-bdeps=n \
			${depclean_extra} || :
	fi
	LC_ALL='C' emerge \
			--depclean \
			--exclude="dev-libs/libffi sys-apps/gentoo-functions${depclean_exclude:+" ${depclean_exclude}"}" \
			--verbose=y \
			--with-bdeps=n || :

	if [ -s /etc/portage/profile/package.provided.backup ]; then
		mv /etc/portage/profile/package.provided.backup \
			/etc/portage/profile/package.provided
	else
		rm /etc/portage/profile/package.provided
	fi

	rmdir --ignore-fail-on-non-empty /etc/portage/profile
fi

#do_prelink

if [ -d "${ROOT}"/usr/lib/gcc ]; then
	if ! [ -d "${ROOT}/usr/lib/gcc/${CHOST:-"__chost_not_set__"}" ]; then
		warn "Directory '${ROOT}/usr/lib/gcc' exists but '${ROOT}/usr/lib/gcc/${CHOST:-"__chost_not_set__"}' doesn't"
		print "$( ls -1AF "${ROOT}/usr/lib/gcc" )"
	else
		if ! grep -Fqm 1 '/gcc/' "${ROOT}/etc/ld.so.conf"; then
			find "${ROOT}/usr/lib/gcc/${CHOST:-"__chost_not_set__"}" \
						-mindepth 1 \
						-maxdepth 1 \
						-type d \
					-print0 |
				xargs -0rn 1 |
				sed "s|^${ROOT}||" >> "${ROOT}/etc/ld.so.conf"
			ldconfig ${ROOT:+"-r"} ${ROOT:+"${ROOT}"} -f "${ROOT:-}/etc/ld.so.conf"
		fi
	fi
fi

find /var/db/pkg/ -mindepth 2 -maxdepth 2 -type d -print |
	sed 's|^.*/var/db/pkg/||' > /builddeps.txt

if [ -n "${ROOT:-}" ] && [ "${ROOT:-}" != '/' ]; then
	find "${ROOT}/var/db/pkg/" -mindepth 2 -maxdepth 2 -type d -print |
		sed 's|^.*/var/db/pkg/||' > "${ROOT:-}"/builddeps.txt
fi

if command -v eselect >/dev/null 2>&1; then
	# Avoid, e.g. '!!! Warning: News item "2021-07-20-perl-5_34-upgrade" no longer exists'
	eselect news read new 2>&1 |
		grep -Fv \
				-e 'No news is good news.' \
				-e '!!! Warning: News item "' \
			|| :
fi

exit ${rc}

#[ -n "${trace:-}" ] && set +o xtrace

# vi: set colorcolumn=80 foldmarker=()\ {,}\ \ #\  foldmethod=marker syntax=sh sw=4 ts=4:
