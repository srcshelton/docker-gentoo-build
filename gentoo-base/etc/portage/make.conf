# These settings were set by the catalyst build script that automatically
# built this stage.
#
# Please consult /usr/share/portage/config/make.conf.example for a more
# detailed example.
#

# Avoid a dependency on app-portage/getuto...
#
# (N.B. 'true' is a substitute command, not a boolean value!)
#
PORTAGE_TRUST_HELPER=true

# This sets the language of build output to English.
# Please keep this setting intact when reporting bugs.
#
LC_MESSAGES=C

# Non target-specific optimisation options:
#
# Inherited from gentooLTO/sys-config/ltoize/files/make.conf.lto.defines in
# https://github.com/InBetweenNames/gentooLTO/ ...
#

# _CC_GRAPHITE contains Graphite specific optimizations and other optimizations
# that are disabled at O3 but don't influence the compiler's judgement.
#
# NOTE: Since GCC 8.1.0, -ftree-loop-distribution is enabled by default at -O3.
# NOTE: To use graphite, make sure you have gcc compiled with graphite support
#       (add graphite to your USE).
#
#_CC_GRAPHITE_O2="-ftree-loop-distribution -floop-interchange -floop-unroll-and-jam -funswitch-loops"
#
# Unclear from https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html whether
# '-floop-nest-optimize' is identical to one or all of '-ftree-loop-linear',
# '-floop-strip-mine', and/or '-floop-block'...
_CC_GRAPHITE="-fgraphite-identity -floop-nest-optimize"
#
# '-ftree-vectorize' may only enable '-O2'+ optimisations?
_CC_LOOP="-fivopts -ftree-loop-im -ftree-loop-ivcanon -ftree-vectorize"

# LLVM loop-nest optimisations requires llvm-core/polly and a number of
# additional flags:
_LLVM_LOOP="-fplugin=LLVMPolly.so -mllvm=-polly -mllvm=-polly-vectorizer=stripmine -mllvm=-polly-omp-backend=LLVM -mllvm=-polly-parallel -mllvm=-polly-scheduling=dynamic" # -mllvm=-polly-num-threads=7

# _CC_IPAPTA contains -fipa* opts that are disabled by default in GCC.  These
# are interprocedural optimizations.  For now this is only -fipa-pta.
#
# This option increases compile times, but can potentially produce better
# binaries, especially with LTO. Essentially, it allows the compiler to look
# into called function bodies when performing alias analysis.
#
_CC_IPAPTA="-fipa-pta"

# With -fno-semantic-interposition the compiler assumes that if interposition
# happens for functions the overwriting function will have precisely the same
# semantics (and side effects). Similarly if interposition happens for
# variables, the constructor of the variable will be the same.
#
# The flag has no effect for functions explicitly declared inline (where it is
# never allowed for interposition to change semantics) and for symbols
# explicitly declared weak.
#
# Disabled at '-Ofast' regardless:
#
#_CC_INTERPOSITION="-fno-semantic-interposition"

# This option only affects C code.  Only non-conformant C code needs -fcommon,
# which was enabled by default.  Clear Linux leaves this flag off by default.
# It is disabled by default with GCC 10 and is kept here only for documentation
# purposes.  Use `-fcommon` to restore GCC 9.x and prior behaviour:
#
#_CC_COMMON="-fno-common"

# Clear Linux uses these options in lieu of full -ffast-math optimizations.
# They DO break compliance with ISO C++.
#
# Relevant discussion: https://gcc.gnu.org/ml/gcc/2017-09/msg00079.html
#
# '-ffast-math' (and '-Ofast') set __FAST_MATH__ and enable
# '-fcx-limited-range', '-fexcess-precision=fast', '-ffinite-math-only',
# '-fno-math-errno', '-fno-rounding-math', '-fno-signaling-nans' and
# '-funsafe-math-optimizations';
#
# '-funsafe-math-optimizations' enables '-fassociative-math',
# '-freciprocal-math', '-fno-signed-zeros' and '-fno-trapping-math';
#
# '-fassociative-math' requires 'fno-signed-zeros' and '-fno-trapping-math'
# (at which point it is enabled by default for Fortran), but not
# '-frounding-math'.
#
#_CC_SAFE_FAST_MATH="-fno-math-errno -fno-trapping-math"
#_CC_UNSAFE_FAST_MATH="-fassociative-math -freciprocal-math -fno-signed-zeros"
#_CC_COMBI_UNSAFE_FAST_MATH="-fno-math-errno -funsafe-math-optimizations"
#_CC_FAST_MATH="${_CC_COMBI_UNSAFE_FAST_MATH} -fcx-limited-range -fexcess-precision=fast -ffinite-math-only -fno-rounding-math -fno-signaling-nans"
_CC_FAST_MATH="-ffp-contract=fast -ffast-math"

# This allows GCC to perform devirtualization across object file boundaries
# using LTO.
#
_CC_VIRTLTO="-fdevirtualize-at-ltrans"

# This option omits the PLT from the executable, making calls go through the
# GOT directly.
# It inhibits lazy binding, so this is not enabled by default.  If you use
# prelink, this is strictly better than lazy binding.
#
_CC_NOPLT="-fno-plt"

# Update alignment (from a default of '16') for modern (Sandy Bridge and later)
# Intel processors which benefit from a wider alignment:
#
_CC_INTEL="-falign-functions=32"

# Number of hardware-threads, or 'auto' with GCC10+:
#
#_CC_NTHREADS="8"

# These warnings indicate likely runtime problems with LTO, so promote them
# to errors. If a package fails to build with these, LTO should not be used
# there.
#
# N.B. With clang, -Wstrict-aliasing is a no-op and -Wlto-type-mismatch is not
#      implemented
#
_LLVM_W="-Werror=odr -Werror=strict-aliasing"
_GCC_W="${_LLVM_W} -Werror=lto-type-mismatch"

# Enable OpenMP support.
#
_CC_OMP="-fopenmp"

# _CC_LTO is of the form -flto[=n] where 'n' is the number of threads to use
# during linking:
#
# See https://wiki.gentoo.org/wiki/LTO
#
_LLVM_LTO="${_LLVM_W} -flto=thin -fuse-ld=lld"
_GCC_LTO="${_GCC_W} -flto ${_CC_IPAPTA} ${_CC_VIRTLTO} -fuse-linker-plugin"

# https://doc.rust-lang.org/rustc/linker-plugin-lto.html - only available with
# clang/llvm toolchain, and with specific version requirements (see end of
# aforementioned link, which only list versions up to rust-1.78)
#
# See also https://github.com/rust-lang/rust/issues/60059
#
_RUSTC_LTO="-Clinker-plugin-lto"
_LLVM_RUSTC_LTO="-Clinker=clang -Clink-arg=-fuse-ld=lld ${_RUSTC_LTO}"

# Enable hardening, rather than performance enhancements:
#
#_CC_HARDEN="-ftrivial-auto-var-init=zero -fzero-call-used-regs=zero_call_used_regs"

# Additional optimisations:
#
_CC_EXTRA="-fdevirtualize-speculatively -fgcse-las -fgcse-sm -fisolate-erroneous-paths-attribute -flive-range-shrinkage -fmodulo-sched -fmodulo-sched-allow-regmoves -fomit-frame-pointer -fsched-pressure -fstdarg-opt"
_CC_EXTRA_X86="-malign-data=cacheline -mtls-dialect=gnu2"

# Pre-processor options:
#
_CP="-Wp,-D_REENTRANT"

# Assembler options:
#
#_AS="-Wa,..."

# Default LDFLAGS (set by Gentoo profile):
#
#LDFLAGS="-Wl,-O1 -Wl,--as-needed"
#
# ... with several platforms (x86, amd64, ppc64) extending this to:
#
#LDFLAGS="${LDFLAGS} -Wl,-z,pack-relative-relocs"
#
#_LD="-Wl,-O1 -Wl,--as-needed"
_LD_X86PPC="-Wl,-z,pack-relative-relocs"
_LLVM_LD="-Wl,-O2 -Wl,--as-needed"
_LD_LTO="-Wl,-z,now -Wl,-z,relro"
_LD_EXTRA="-Wl,--enable-new-dtags -Wl,--sort-common -Wl,-z,separate-code"

# clang is deprecating -Ofast for -O3 -ffast-math, for the sake of clarity
# (although with gcc, -Ofast also enables -fallow-store-data-races and
# -fno-semantic-interposition, plus for Fortran -fno-protect-parens and also
# -fstack-arrays but only if -fmax-stack-var-size is *not* specified... which
# is a bit more complicated)
#
#_CC_O="-Ofast"
_CC_O="-O3 -fallow-store-data-races -ffast-math -fno-semantic-interposition"
_FC_O="-fno-protect-parens -fstack-arrays"

# From https://wiki.gentoo.org/wiki/Rust#Optimization_level, "There is no need
# [to] specify... 'RUSTFLAGS="-C opt-level=3"' explicitly, [since] official
# Rust documentation[1] states that default optimization level on [the] Release
# profile is set to 3 already.
#
# [1] https://doc.rust-lang.org/book/ch14-01-release-profiles.html
#
# We can't automatically expand arguments from LDFLAGS here, unfortunately...
#
_RUST_FLAGS="-C strip=debuginfo -C opt-level=3 -C link-arg=-Wl,-O1 -C link-arg=-Wl,--as-needed -C link-arg=-Wl,-z,now -C link-arg=-Wl,-z,relro -C link-arg=-Wl,--enable-new-dtags -C link-arg=-Wl,--sort-common -C link-arg=-Wl,-z,separate-code"
_RUST_FLAGS_X86PPC="-C link-arg=-Wl,-z,pack-relative-relocs"

# Enable above flags with, e.g.:
#
#CFLAGS="-O3 ${_CC_GRAPHITE} ${_CC_INTERPOSITION} ${_CC_LTO}"
#
# [CF].*FLAGS will have architecture-specifc target optimisations added and be
# placed in the environment during the container-build process, overriding any
# values specified here.
#
# Default:
#
#CFLAGS="-O2 -pipe"
#CXXFLAGS="-O2 -pipe"
#FFLAGS="-O2 -pipe"
#FCFLAGS="-O2 -pipe"

CPPFLAGS="${_CP}"

#CCASFLAGS="${_AS}"

LDFLAGS="${LDFLAGS} ${_LD_LTO} ${_LD_EXTRA}"
FLFLAGS="${LDFLAGS}"

# N.B.: Target-specific flags (such as -march=...) are automagically added
#       during the container-build process, so don't need to appear here...
#
# For Intel processors:
#
#CFLAGS="${_CC_O} ${_CC_GRAPHITE} ${_CC_LOOP} ${_CC_NOPLT} ${_CC_INTEL} ${_CC_EXTRA} ${_CC_EXTRA_X86} ${_CC_FAST_MATH} ${_CC_OMP} ${_GCC_LTO} ${CPPFLAGS} ${LDFLAGS} -pipe"
#CXXFLAGS="${_CC_O} ${_CC_GRAPHITE} ${_CC_LOOP} ${_CC_NOPLT} ${_CC_INTEL} ${_CC_EXTRA} ${_CC_EXTRA_X86} ${_CC_FAST_MATH} ${_CC_OMP} ${_GCC_LTO} ${CPPFLAGS} ${LDFLAGS} -pipe"
#RUSTFLAGS="${_RUST_FLAGS} ${_RUST_FLAGS_X86PPC}"
#
# For non-Intel processors:
#
CFLAGS="${_CC_O} ${_CC_GRAPHITE} ${_CC_LOOP} ${_CC_NOPLT} ${_CC_EXTRA} ${_CC_FAST_MATH} ${_CC_OMP} ${_GCC_LTO} ${CPPFLAGS} ${LDFLAGS} -pipe"
CXXFLAGS="${_CC_O} ${_CC_GRAPHITE} ${_CC_LOOP} ${_CC_NOPLT} ${_CC_EXTRA} ${_CC_FAST_MATH} ${_CC_OMP} ${_GCC_LTO} ${CPPFLAGS} ${LDFLAGS} -pipe"
RUSTFLAGS="${_RUST_FLAGS}"

FFLAGS="${CFLAGS} ${_FC_O}"  #Â F77
FCFLAGS="${CFLAGS} ${_FC_O}"  # F90+

CGO_CFLAGS="${CFLAGS}"
CGO_CXXFLAGS="${CXXFLAGS}"
CGO_FFLAGS="${FCFLAGS}"


# Package repos are mounted in the same directory within the container as they
# were mounted on the host, according the the paths set
# in /etc/portage/repos.conf - 'PORTDIR' should be set to the same common root
# as on the host for this to work:
#
#PORTDIR="/var/db/repo/gentoo"

# DISTDIR and PKGDIR are likewise paths within the container, but the host
# directories are independent as they are mapped by adding
# a volume/bind-mount with fixed container paths.
#
# There should be no need to change these values:
#
DISTDIR="/var/cache/portage/dist"
PKGHOST="docker"
PKGDIR="/var/cache/portage/pkg/${ARCH}/${PKGHOST}"

# BINPKG_FORMAT sets the format used for tar binary packages. Possible values
# are xpak or gpkg. If BINPKG_FORMAT is set to xpak, packages will have the
# file extension .tbz2 for any compression type for historical reasons. If
# BINPKG_FORMAT is set to xpak,  and  FEATURES="binpkg-multi-instance" is set,
# packages will have the file extension .xpak. If BINPKG_FORMAT is set to gpkg,
# packages will have the file extension .gpkg.
#
BINPKG_FORMAT="gpkg"

# Only package microcode for the system processor(s)
#
MICROCODE_SIGNATURES="-S"

# This sets the language of build output to English.
# Please keep this setting intact when reporting bugs.
#
LC_MESSAGES=C

# Specify the language files which should be installed.
#
# N.B. Unset means all language files, whereas an empty string means _no_
#      language files!
# N.B. LINGUAS uses underscores to separate languages and variants
#      (e.g. 'en_GB'), whereas L10N uses USE flag style hyphens (e.g. 'en-GB').
#
LINGUAS="en en_GB en_US"

# vi: set colorcolumn=80:
