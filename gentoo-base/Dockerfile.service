
# service:
#   Extract a ROOT-installed service.

ARG image_name
ARG service_name
ARG service_name_short
ARG service_version

ARG service_ports
ARG service_user="root"
ARG service_group="root"
ARG service_cmd="/bin/sh"
ARG service_cwd="/"
ARG service_fs_name
ARG timezone="GB"

ARG ROOT="/service"
ARG environment_file="/usr/libexec/environment.sh"
ARG environment_filter="^(declare -x|export) (EDITOR|GENTOO_PROFILE|HOME|HOSTNAME|LESS(OPEN)?LS_COLORS|(MAN)?PAGER|(OLD)?PWD|PATH|(|SYS|PORTAGE_CONFIG)ROOT|SHLVL|TERM)="

ARG smtp_smarthost="localhost"
ARG smtp_domain="localhost"

ARG CHOST="x86_64-pc-linux-gnu"


# -----------------------------------------------------------------------------

# Import system image
#
FROM "localhost/${image_name}:${service_version}" AS base

ARG ROOT
ARG environment_file
ARG environment_filter


RUN test -s "${environment_file}"

# linter ignore=SC2015,ER0001
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    set -u ; \
    mkdir -p "${ROOT}"/usr/libexec && \
    printf "#FILTER: '%s'\n\n" "${environment_filter}" > "${ROOT}${environment_file}" && \
    export -p | \
            grep -- '=' | \
            grep -Ev -- "${environment_filter}" | \
            sed -r 's/\s+/ /g ; s/^(export [a-z][a-z0-9_]+=")\s+/\1/i' | \
            grep -v -e '^export [a-z_]' -e '=""$' \
        >>"${ROOT}${environment_file}" && \
    grep >&2 -- ' ROOT=' "${ROOT}${environment_file}" && { \
            printf >&2 "Invalid 'ROOT' directive in '%s':\n\n%s\n\n" "${ROOT%/}${environment_file}" "$( <"${ROOT}${environment_file}" )" ; \
            exit 1 ; \
        } || : ; \
    if [ -s /builddeps.txt ] && ! [ -s "${ROOT}/builddeps.txt" ]; then \
        mv /builddeps.txt "${ROOT}/builddeps.txt" ; \
    fi
#RUN printf >&2 " * 'service' stage propagated environment:\n\n%s\n\n" "$( <"${ROOT}${environment_file}" )"


# -----------------------------------------------------------------------------

# Create a new container
#
FROM scratch

ARG image_name
ARG service_name
ARG service_name_short
ARG service_version

ARG service_ports
ARG service_user
ARG service_group
ARG service_cmd
ARG service_cwd
ARG service_fs_name
ARG timezone="GB"

ARG ROOT
ARG environment_file

ARG smtp_smarthost
ARG smtp_domain

ARG CHOST

ENV service_cmd="${service_cmd}"
ENV fs_name="${service_fs_name}"
ENV CHOST="${CHOST}"


# Copy the installed tree into the current image
#
COPY --from=base "${ROOT}" /
RUN test -s "${environment_file}"

ENV ROOT="/"

COPY --from=base /etc/group /etc/base/
#COPY --from=base /etc/gshadow /etc/base/  # Doesn't exist in source image
COPY --from=base /etc/passwd /etc/base/
COPY --from=base /etc/shadow /etc/base/
COPY --from=base /etc/ethertypes /etc/base/
COPY --from=base /etc/networks /etc/base/
COPY --from=base /etc/protocols /etc/base/
COPY --from=base /etc/services /etc/base/
COPY --from=base /etc/shells /etc/base/
#COPY --from=base /usr/share/zoneinfo /usr/share/zoneinfo/
COPY --from=base "/usr/share/zoneinfo/${timezone}" /etc/localtime
COPY etc/msmtprc /etc/

LABEL maintainer="stuart@shelton.me"
LABEL description="Gentoo ${service_name}-${service_version} service"

# Try to get nice colours ...
#
ARG SET_TERM="${TERM:-xterm}"
ENV TERM="${SET_TERM}"

#RUN cat "/var/db/pkg/${service_name}-${service_version}/CONTENTS"

# linter ignore=ER0001
RUN i="${image_name}:${service_version}" ; \
    for f in /etc/base/*; do \
        f="$( basename "${f}" )" ; \
        if ! [ -s "/etc/${f}" ]; then \
            echo "INFO:  Adding new file '${f}' from base image '${i}' ..." ; \
            mv "/etc/base/${f}" /etc/ ; \
        elif ! diff -q "/etc/base/${f}" "/etc/${f}" >/dev/null; then \
            echo "WARN:  Files '/etc/base/${f}' and '/etc/${f}' differ ..." ; \
            diff -u "/etc/base/${f}" "/etc/${f}" | sed 's/^/    /' ; \
            echo "WARN:  ... keeping file '${f}' from base image '${i}'" ; \
            mv "/etc/base/${f}" /etc/ ; \
        fi ; \
    done ; \
    rm -r /etc/base ; \
    sed -i \
        -e "s/__SMTP_SMARTHOST__/${smtp_smarthost}/" \
        -e "s/__DOMAIN__/${smtp_domain}/" \
            /etc/msmtprc ; \
    if [ -d "${ROOT}"/usr/lib/gcc ]; then \
        if ! [ -d "${ROOT}/usr/lib/gcc/${CHOST:-__chost_not_set__}" ]; then \
            echo "WARN:  Directory '${ROOT}/usr/lib/gcc' exists but '${ROOT}/usr/lib/gcc/${CHOST:-__chost_not_set__}' doesn't" ; \
            ls -1AF "${ROOT}/usr/lib/gcc" | sed 's/^/DEBUG: /' ; \
        else \
            if ! grep -Fqm 1 '/gcc/' /etc/ld.so.conf; then \
                find "/usr/lib/gcc/${CHOST:-__chost_not_set__}" \
                        -mindepth 1 \
                        -maxdepth 1 \
                        -type d \
                    -print0 | xargs -0rn 1 >> /etc/ld.so.conf ; \
                ldconfig ; \
            fi ; \
        fi ; \
    fi

# linter ignore=SC2174
RUN for d in 'empty' 'log' 'run' 'lock'; do \
        if test -e "/var/${d}" && { test -L "/var/${d}" || ! test -d "/var/${d}"; }; then \
            rm "/var/${d}" ; \
        fi ; \
        mkdir -p -m 0755 "/var/${d}" ; \
    done && \
    if [ -n "${fs_name:-}" ]; then \
        for d in 'log' 'run'; do \
            mkdir -p -m 0755 "/var/${d}/${fs_name}" ; \
        done ; \
    fi ; \
    for d in \
            etc/conf.d etc/init.d etc/portage \
            usr/include usr/lib64/pkgconfig usr/share/awk usr/share/udhcpc \
            var/cache/edb var/db/Makefile var/lib/gentoo ; \
    do \
        [ -e "${d}" ] && rm -rf "/${d}" ; \
    done ; \
    if [ -d usr/share/gcc-data ]; then \
        rm -rf "/usr/share/gcc-data/*/*/man" "/usr/share/gcc-data/*/*/info" ; \
    fi

# Setup entrypoint script to perform a one-time copy of binary system packages
# to the (hopefully) host-mounted packages directory ...
#
COPY entrypoint.sh.service /usr/libexec/entrypoint.sh
COPY entrypoint.d/ /usr/libexec/entrypoint.d/
RUN test -s /usr/libexec/entrypoint.sh && \
    chmod 0755 /usr/libexec/entrypoint.sh && \
    sed -i \
        -e "s|__ENVFILE__|${environment_file}|" \
            /usr/libexec/entrypoint.sh && \
    test -x /usr/libexec/entrypoint.sh ; \
    chmod 0755 /usr/libexec/entrypoint.d/*.sh || :

RUN echo "${service_cmd}" ; \
    test -x "${service_cmd}" && \
    if ! [ "$( head -n 1 "${service_cmd}" | sed 's/\(..\).*$/\1/' )" = '#!' ] ; \
    then \
    ldd "${service_cmd}" | tee /dev/stdout | grep -qv 'not found' ; \
    fi

# No longer needed, since 'service_cmd' is exposed as an ENV ...
#RUN sed -i "s|^exec |exec '${service_cmd}' |" /usr/libexec/entrypoint.sh && \
#    sh -n /usr/libexec/entrypoint.sh

RUN mkdir -p "/srv/${service_name_short}/usr/share" ; \
    if [ -d /usr/share/doc ]; then \
        mv /usr/share/doc "/srv/${service_name_short}/usr/share/" && \
        ln -s "../../srv/${service_name_short}/usr/share/doc" /usr/share/ ; \
    fi ; \
    if [ -d /usr/share/info ]; then \
        mv /usr/share/info "/srv/${service_name_short}/usr/share/" && \
        ln -s "../../srv/${service_name_short}/usr/share/info" /usr/share/ ; \
    fi ; \
    if [ -d /usr/share/man ]; then \
        mv /usr/share/man "/srv/${service_name_short}/usr/share/" && \
        ln -s "../../srv/${service_name_short}/usr/share/man" /usr/share/ ; \
    fi

# Create /var/cache/man/index.db when man-db is installed...
RUN test ! -x /usr/bin/mandb || \
    nice mandb --create

# Run eselect for dependent components...
RUN if [ -x /usr/bin/eselect ]; then \
        if [ -s /usr/share/eselect/modules/python.eselect ]; then \
            if [ $(( ${EUID:-$( id -u )} )) -eq 0 ]; then \
                echo "Setting python implementation ..." ; \
                mkdir -p /etc/python-exec ; \
                eselect python cleanup ; \
                eselect python update --if-unset ; \
            fi ; \
        fi ; \
        if [ -s /usr/share/eselect/modules/java-vm.eselect ]; then \
            echo "Setting Java VM as initial user ..." ; \
            if [ $(( ${EUID:-$( id -u )} )) -eq 0 ]; then \
                eselect java-vm set --if-unset system 1 ; \
            else \
                eselect java-vm set --if-unset user 1 ; \
            fi ; \
        fi ; \
    fi

# http://www.gentoo.org/doc/en/prelink-howto.xml
RUN if [ -x /usr/sbin/prelink ]; then \
        /usr/sbin/prelink -av -m -R -f && \
        /usr/sbin/prelink -p ; \
    fi

EXPOSE "${service_ports}"

# linter ignore=EW0001
WORKDIR "${service_cwd}"

USER "${service_user}:${service_group}"

RUN if [ -x /usr/bin/eselect ]; then \
        if [ -s /usr/share/eselect/modules/java-vm.eselect ]; then \
            echo "Setting Java VM as '${service_user:-root}' ..." ; \
            if [ $(( ${EUID:-$( id -u )} )) -eq 0 ]; then \
                eselect java-vm set --if-unset system 1 ; \
            else \
                eselect java-vm set --if-unset user 1 ; \
            fi ; \
        fi ; \
    fi

VOLUME ["/srv/${service_name_short}","/var/db/pkg"]

ENTRYPOINT ["/usr/libexec/entrypoint.sh"]

# Must be in shell-form to interpolate ARG/ENV values...
# linter ignore=EJ0002
CMD "${service_cmd}"

# vi: set syntax=dockerfile expandtab sw=4 ts=4 nowrap colorcolumn=80:
