
# stage3:
#    This is the *only way* to persist variables across docker stages, without
#    having to write files within containers :(
#
#    We're embedding the image IDs of parent containers into their dependents,
#    but in this case the only thing that can change through this image is the
#    upstream 'env' or 'stage3' contents - so we'll store their IDs rather than
#    the ID of this container.

ARG ARCH

ARG env_name="localhost/gentoo-env"
ARG env_id=""

# gentoo/stage3 supports 386, amd64, arm-v5, arm-v6, arm-v7, arm64, ppc64le, s390x
ARG gentoo_stage3_image="docker.io/gentoo/stage3"
# ... however, it's not currently being updated, whereas this image is!
#ARG gentoo_stage3_image="docker.io/ksmanis/stage3"
ARG gentoo_stage3_tag="latest"
ARG gentoo_stage3_id=""

ARG stage3_flags_file="/usr/libexec/stage3_flags.sh"


# -----------------------------------------------------------------------------

# linter ignore=EF0003
FROM "${gentoo_stage3_image}:${gentoo_stage3_tag}" AS stage3

ARG ARCH
ARG stage3_flags_file

# Save initial environment...
# linter ignore=ER0001
RUN pe="$( \
        find /var/db/pkg/dev-lang/ \
                -mindepth 1 \
                -maxdepth 1 \
                -type d \
                -name 'python-exec-*' \
                -print \
    )" ; \
    if [ -n "${pe:-}" ] && [ -e "${pe}/USE" ]; then \
        mv "${pe}/USE" "${pe}/USE-ignore" || : ; \
    fi ; \
    echo "STAGE3_USE=\"$( \
        cat /var/db/pkg/*/*/USE | \
        xargs -rn 1 echo | \
        sort | \
        uniq | \
        grep -v \
            -e '^abi_' -e "^${ARCH}$" -e 'elibc_glibc' -e 'kernel_linux' \
            -e 'userland_GNU' -e '^python_' -e 'udev' -e '^static' | \
        xargs -r echo -n \
    )\"" >"${stage3_flags_file}" 2>/dev/null && \
    echo "STAGE3_PYTHON_SINGLE_TARGET=\"$( \
        cat /var/db/pkg/*/*/USE | \
        xargs -rn 1 echo | \
        sort | \
        uniq | \
        grep '^python_single_target_' | \
        sed 's/^python_single_target_//' | \
        xargs -r echo -n \
    )\"" >>"${stage3_flags_file}" 2>/dev/null && \
    echo "STAGE3_PYTHON_TARGETS=\"$( \
        cat /var/db/pkg/*/*/USE | \
        xargs -rn 1 echo | \
        sort | \
        uniq | \
        grep '^python_targets_' | \
        sed 's/^python_targets_//' | \
        xargs -r echo -n \
    )\"" >>"${stage3_flags_file}" 2>/dev/null ; \
    if [ -n "${pe:-}" ] && [ -e "${pe}/USE-ignore" ]; then \
        mv "${pe}/USE-ignore" "${pe}/USE" || : ; \
    fi


# -----------------------------------------------------------------------------

# linter ignore=EF0003
FROM "${env_name}:latest"

ARG env_name
ARG env_id

ARG gentoo_stage3_image
ARG gentoo_stage3_id


LABEL environment-from="${env_name}:${env_id}"
LABEL stage3-from="${gentoo_stage3_image}:${gentoo_stage3_id}"

COPY --from=stage3 / /

# We can't use 'RUN [ -d ... ]' because this is interpreted as being
# exec-form...
# Double-negative so that 'set -e' doesn't trip over a false result
RUN test ! -e /var/db/repos || rm -r /var/db/repos

# vi: set syntax=dockerfile colorcolumn=80 expandtab nowrap shiftwidth=4 tabstop=4:
