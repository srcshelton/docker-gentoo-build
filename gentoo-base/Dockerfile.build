
# build:
#   A docker container containing an installed system image built from a local
#   package repo, extracted from the stage3 environment ROOT.


ARG base_name="localhost/gentoo-base"
ARG env_name="localhost/gentoo-env"
ARG env_id=""

ARG environment_file="/usr/libexec/environment.sh"
ARG environment_filter="^(declare -x|export) (EDITOR|GENTOO_PROFILE|HOME|HOSTNAME|LESS(OPEN)?LS_COLORS|(MAN)?PAGER|(OLD)?PWD|PATH|(|SYS|PORTAGE_CONFIG)ROOT|SHLVL|TERM)="

ARG ROOT="/build"
ARG SYSROOT="${ROOT}"
ARG PORTAGE_CONFIGROOT="${SYSROOT}"


# -----------------------------------------------------------------------------

# Import system image
#
# linter ignore=EF0003
FROM "${base_name}:latest" AS base

ARG ROOT
ARG environment_file

RUN test -s "${ROOT}${environment_file}"


# -----------------------------------------------------------------------------

# Create a new container
#
# linter ignore=EF0003
FROM "${env_name}:latest"

ARG env_name
ARG env_id

ARG environment_file
ARG environment_filter

ARG ROOT
ARG SYSROOT
ARG PORTAGE_CONFIGROOT

ENV SKIP_KERNEL_CHECK=1


# Copy the portage tree into the current stage
#
COPY --from=base "${ROOT}" /
RUN test -s "${environment_file}"

# The acct-* packages don't appear to account for situations when ROOT != /,
# and so without this we have packages registered as installed, without the
# requisite system changes having occurred.
#COPY --from=base /etc/group /etc/
##COPY --from=base /etc/gshadow /etc/ # Doesn't exist in source image
#COPY --from=base /etc/passwd /etc/
#COPY --from=base /etc/shadow /etc/
#
# ... alternatively (using -f so as not to error if either of the arguments
# doesn't exist):
RUN rm -rf /var/db/pkg/acct-* /var/empty/.keep_acct-user_sshd-0

#RUN printf >&2 " * 'build' stage imported environment:\n\n%s\n\n" "$( <"${environment_file}" )"

LABEL maintainer="stuart@shelton.me"
LABEL description="Gentoo base @system image"

LABEL environment-from="${env_name}:${env_id}"


# Further clean-up to minimise image size ...
#
# We can't use 'RUN [ -d ... ]' because this is interpreted as being
# exec-form...
# linter ignore=SC2015,SC1091,ER0001
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    test -s "${environment_file}" && \
        . "${environment_file}" || \
        { \
            echo >&2 "FATAL: Unable to source '${environment_file}': ${?}" ; \
            exit 1 ; \
        } ; \
    set -u ; \
    etc-update --quiet --preen 2>/dev/null && \
    find /etc/ -type f -regex '.*\._\(cfg\|mrg\)[0-9]+_.*' -delete ; \
    test -d /var/db/repo && \
        find /var/db/repo/ -mindepth 1 -maxdepth 1 -type d | while read -r d; do \
            rm -r -- "${d}" && mkdir -p -- "${d}" ; \
        done ; \
    test ! -d "${PORTAGE_TMPDIR}/portage" || rm -r "${PORTAGE_TMPDIR}/portage" ; \
    test ! -d "${PORTAGE_LOGDIR}" || rm -r "${PORTAGE_LOGDIR}" ; \
    test ! -d "${DISTDIR}" || rm -r "${DISTDIR}" ; \
    test ! -d "${PKGDIR}" || rm -r "${PKGDIR}" ; \
    test ! -d "${ROOT}" || rm -r "${ROOT}" ; \
    mkdir -p -- "${PORTAGE_LOGDIR}" "${DISTDIR}" "${PKGDIR}" ; \
    find /tmp/ -type f -delete ; \
    find /tmp/ -mindepth 1 -type d -delete ; \
    find /var/tmp/ -type f -delete ; \
    find /var/tmp/ -mindepth 1 -type d -delete ; \
    find /var/log/ -type f -delete ; \
    find /var/log/ -mindepth 1 -type d -delete ; \
    test -d /root || mkdir -m 0700 -- /root ; \
    test -d /boot || mkdir -- /boot

RUN test -d /etc/portage/package.use.build && \
    rm -r /etc/portage/package.use && \
    mv /etc/portage/package.use.build /etc/portage/package.use

# Reset ROOT to install packages directly into container ...
#
ENV ROOT="/"
ENV SYSROOT="${ROOT}"
ENV PORTAGE_CONFIGROOT="${SYSROOT}"

# Rewrite filtered environment.sh with new values ...
#
# linter ignore=SC2015,SC1091,ER0001
RUN { set -o pipefail 2>/dev/null || true ; } ; \
    test -s "${environment_file}" && \
        . "${environment_file}" || \
        { \
            echo >&2 "FATAL: Unable to source '${environment_file}': ${?}" ; \
            exit 1 ; \
        } ; \
    gcc-config 1 2>/dev/null ; \
    test -s /etc/profile && . /etc/profile ; \
    if [ -n "${JOBS:-}" ] && [ $(( JOBS )) -gt 1 ]; then \
        locale-gen -k -u ${JOBS:+-j ${JOBS}} ; \
    else \
        locale-gen -k -u ; \
    fi ; \
    printf "#FILTER: '%s'\n\n" "${environment_filter}" >"${environment_file}" && \
    export -p | \
            grep -- '=' | \
            grep -Ev -- "${environment_filter}" | \
            sed -r 's/\s+/ /g ; s/^(export [a-z][a-z0-9_]+=")\s+/\1/i' | \
            grep -v -e '^export [a-z_]' -e '=""$' \
        >>"${environment_file}" && \
    grep >&2 -- ' ROOT=' "${environment_file}" && { \
            printf >&2 "Invalid 'ROOT' directive in '${environment_file}':\n\n%s\n\n" "$( <"${environment_file}" )" ; \
            exit 1 ; \
        } || :
#RUN printf >&2 " * 'build' stage propagated environment:\n\n%s\n\n" "$( <"${environment_file}" )"


# Setup entrypoint script to perform a one-time copy of binary system packages
# to the (hopefully) host-mounted packages directory ...
#
COPY entrypoint.sh.build /usr/libexec/entrypoint.sh
RUN test -s /usr/libexec/entrypoint.sh

# linter ignore=SC2015,SC1091
RUN test -s "${environment_file}" && \
        . "${environment_file}" || \
        { \
            echo >&2 "FATAL: Unable to source '${environment_file}': ${?}" ; \
            exit 1 ; \
        } ; \
    set -u ; \
    sed -i \
        -e "s/__JOBS__/${JOBS}/" \
        -e "s/__MAXLOAD__/${MAXLOAD}/" \
        -e "s|__ENVFILE__|${environment_file}|" \
            /usr/libexec/entrypoint.sh && \
    chmod 0755 /usr/libexec/entrypoint.sh && \
    sh -n /usr/libexec/entrypoint.sh

RUN test -x /usr/sbin/locale-gen && /usr/sbin/locale-gen

# This container is anticipated to be inherited rather than run, or run with
# (a) package atom(s) - but let's (re)emerge bash if executed directly without
# parameters ...
#
ENTRYPOINT ["/usr/libexec/entrypoint.sh"]
CMD ["app-shells/bash"]

# vi: set syntax=dockerfile expandtab nowrap colorcolumn=80:
