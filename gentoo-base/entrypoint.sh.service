#! /bin/sh

set -eu

# shellcheck disable=SC2034
debug=${DEBUG:-}
# shellcheck disable=SC2034
trace=${TRACE:-}

environment_file='__ENVFILE__'

print() {
	if [ -n "${debug:-}" ]; then
		if [ -n "${*:-}" ]; then
			echo >&2 "DEBUG: ${*}"
		else
			echo >&2
		fi
	fi
}  # print

if [ -n "${DEV_MODE:-}" ]; then
	cat <<EOF

*******************************************************************************
*                                                                             *
* OPERATING IN DEV_MODE                                                       *
*                                                                             *
* This script is running as it exists on-disk, overriding the container image *
* contents.  Do not use the output of this mode for reliable builds.          *
*                                                                             *
*******************************************************************************

EOF
fi

[ -n "${trace:-}" ] && set -o xtrace

if [ -z "${service_cmd:-}" ]; then
	echo >&2 "FATAL: Required 'service_cmd' environment variable not set"
	exit 1
fi

if set | grep -q -- '=__[A-Z]\+__$'; then
	echo >&2 "FATAL: Unexpanded variable(s) in environment: $( # <- Syntax
		set |
			grep -- '=__[A-Z]\+__$' |
			cut -d'=' -f 1 |
			xargs -r
	)"
	exit 1
fi

if [ -d /usr/libexec/entrypoint.d ]; then
	bin="$( basename "${service_cmd}" )"
	if [ -n "${bin:-}" ] && [ -s "/usr/libexec/entrypoint.d/${bin}.pre" ]
	then
		# shellcheck disable=SC1090
		. "/usr/libexec/entrypoint.d/${bin}.pre"
	fi
fi

if [ -s "${environment_file}" ]; then
	print "Sourcing environment ..."
	# shellcheck disable=SC1090
	. "${environment_file}"
fi

print "Checking for root access ..."
# shellcheck disable=SC2039
if [ -z "${EUID:-}" ]; then
	EUID="$( id -u )"
	export EUID
fi

if [ $(( EUID )) -eq 0 ]; then
	command -V ldconfig >/dev/null 2>&1 && ldconfig

	if hostname="$( hostname -s 2>/dev/null )"; then
		if ! grep -qw -- "${hostname}" /etc/hosts; then
			print "Adding hostname alias '${hostname}' to /etc/hosts ..."
			sed -e "/^[1-9:]/ s/\([[:space:]]\)localhost\([[:space:]]\|$\)/\1localhost ${hostname}\2/g" \
					-i /etc/hosts 2>/dev/null ||
				printf '%s\n%s\n' \
						"127.0.0.1 localhost ${hostname}" \
						"::1 localhost ${hostname}" \
					>> /etc/hosts 2>/dev/null || :
		fi
	fi
	unset hostname

	print "Creating service directories  ..."

	for d in empty log run; do
		mkdir -p "/var/${d}/" || continue
		chmod 0755 "/var/${d}" 2>/dev/null || :
	done

	if [ -n "${fs_name:-}" ]; then
		print "Creating '${fs_name}'  directories  ..."
		for d in log run; do
			mkdir -p "/var/${d}/${fs_name}/" || continue
			chmod 0755 "/var/${d}/${fs_name}" || :
		done
	fi
fi

# Run eselect for dependent components...
if [ -x /usr/bin/eselect ]; then
	if [ -s /usr/share/eselect/modules/python.eselect ]; then
		if [ $(( EUID )) -eq 0 ]; then
			print "Setting python implementation ..."
			mkdir -p /etc/python-exec

			eselect python cleanup
			eselect python update --if-unset
			#eselect python list
		fi
	fi
	if [ -s /usr/share/eselect/modules/java-vm.eselect ]; then
		print "Setting Java VM ..."
		if [ $(( EUID )) -eq 0 ]; then
			eselect java-vm set --if-unset system 1
		else
			eselect java-vm set --if-unset user 1
		fi
		#eselect java-vm list
	fi
fi

# Prepare man/info, if mounted to this container...
if [ -x /usr/bin/install-info ]; then
	echo >&2 "Synchronising info pages ..."
	s='' f=''
	find /srv/ -mindepth 1 -maxdepth 1 -type d -print | while read -r s; do
		if [ -d "${s}"/usr/share/info ]; then
			find "${s}"/usr/share/info/ -type f | while read -r f
			do
				echo "${f}" | grep -q '/dir$' &&
					continue
				[ -e "/usr/share/info/$( basename "${f}" )" ] ||
					cp -v "${f}" /usr/share/info/
			done
		fi
	done
	unset s
	find /usr/share/info/ -type f | while read -r f; do
		echo "${f}" | grep -q '/dir$' &&
			continue
		install-info --keep-old "${f}" /usr/share/info/dir
	done
fi

if [ "${service_cmd}" = '/usr/bin/man' ] && [ -x /usr/bin/mandb ] &&
		getent passwd man >/dev/null && getent group man >/dev/null
then
	rc=0

	# Use same perms/settings as the ebuild
	cachedir="/var/cache/man"
	if [ ! -d "${cachedir}" ]; then
		mkdir -p "${cachedir}"
	fi
	chown man:man "${cachedir}"
	chmod 0755 "${cachedir}"

	echo >&2 "Synchronising man pages ..."
	s='' f='' d='' last_d=''
	find /srv/ -mindepth 1 -maxdepth 1 -type d -print |
			while read -r s
	do
		if [ -d "${s}"/usr/share/man ]; then
			echo >&2 "  Synchronising man pages for '$( basename "${s}" )' ..."
			if command -v rsync >/dev/null 2>&1; then
				rsync \
						--atimes \
						--checksum \
						--devices \
						--exclude 'index.db' \
						--group \
						--hard-links \
						--links \
						--numeric-ids \
						--one-file-system \
						--owner \
						--perms \
						--preallocate \
						--prune-empty-dirs \
						--quiet \
						--recursive \
						--size-only \
						--sparse \
						--specials \
						--super \
						--times \
					"${s}"/usr/share/man/* \
					/usr/share/man/
			else
				find "${s}"/usr/share/man/ -type f |
						sort -V |
						while read -r f
				do
					echo "${f}" | grep -q '/index.db' &&
						continue
					d="$( basename "$( dirname "${f}" )" )"
					if ! [ "${last_d:-}" = "${d}" ]; then
						echo >&2 "    ${d}"
						last_d="${d}"
					fi
					mkdir -p "/usr/share/man/${d}"
					[ -e "/usr/share/man/${d}/$( basename "${f}" )" ] ||
						cp -v "${f}" "/usr/share/man/${d}/"
				done
			fi
		fi
	done
	unset last_d d f s

	echo >&2 "Rebuilding man-db cache ..."
	time nice mandb --no-purge --quiet || rc=${?}
	#nice mandb --no-purge --debug || rc=${?}
	print "mandb update returned ${rc}"
fi

if [ -d /usr/libexec/entrypoint.d ]; then
	rc=0
	bin="$( basename "${service_cmd}" )"
	if [ -n "${bin:-}" ] && [ -s /usr/libexec/entrypoint.d/"${bin}" ]; then
		print "Running entrypoint script" \
			"'/usr/libexec/entrypoint.d/${bin}' ..."
		# shellcheck disable=SC1090
		. /usr/libexec/entrypoint.d/"${bin}" || rc=${?}
		# Now that any entrypoint.d script isn't run in a sub-shell, we can't
		# capture any result in this way...
		# ('131' is to allow sa-update to exit successfully)
		#
		#print "entrypoint script '${bin}' returned ${rc}"
		#case ${rc} in
		#	0)		: ;;
		#	131)	exit 0 ;;
		#	*)		exit ${rc} ;;
		#esac
	fi
fi

if [ "${service_cmd}" = '__wait__' ]; then
	exec sleep infinity 2>dev/null
else
	# shellcheck disable=SC2016
	print "Running service '${service_cmd}'${*+ with parameters '${*}'} ..."
	exec "${service_cmd}" ${@+"${@}"}
fi

# vi: set colorcolumn=80 foldmarker=()\ {,}\ \ #\  foldmethod=marker syntax=sh sw=4 ts=4:
