#! /usr/bin/env bash

declare trace="${TRACE:-}"
# shellcheck disable=SC2034
declare debug="${DEBUG:-}"

set -eu
set -o pipefail

[[ -n "${trace:-}" ]] && set -o xtrace

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

# Set by common/vars.sh, sourced below...
#
#declare build_name=''

# shellcheck disable=SC1091
[[ ! -s common/vars.sh ]] || . common/vars.sh
# shellcheck disable=SC2034  # Set from common/vars.sh
[[ -n "${__COMMON_VARS_INCLUDED:-}" ]] || {
	echo >&2 'FATAL: Inclusion of common defaults failed'
	exit 1
}

# shellcheck disable=SC2034,SC2154
declare IMAGE="${build_name}:latest"
# shellcheck disable=SC1091
[[ -s common/run.sh ]] && . common/run.sh >/dev/null
if [[ "$( type -t 'die' )" != 'function' ]]; then
	echo >&2 "FATAL: Unable to source shared functions from" \
		"'common/run.sh': ${?}"
	exit 127
fi

if [[ -z "${*:-}" || " ${*:-} " =~ \ -(h|-help)\  ]]; then
	output >&2 "Usage: $( basename "${0}" )" \
		"<category/package_name [portage_atom...]>" \
		"[--rebuild='<portage_atom ...>'] [--force-keywords] [--cmd=<cmd>]" \
		"[--entrypoint=<path>] [--memory=2g] [--memory-limit=8g]" \
		"[--name=<container_name>]"
	exit 0
fi

declare _output=''
# shellcheck disable=SC2154
if ! [[ -x "$( type -pf "${_command}" )" ]]; then
	echo >&2 "FATAL: Cannot locate binary '${_command}'"
	exit 1
elif ! _output="$( "${_command}" info 2>&1 )"; then
	if [[ "${_command}" == 'podman' ]]; then
		echo >&2 "FATAL: Unable to successfully execute" \
			"'${_command}' - do you need to run '${_command}" \
			"machine start' or re-run '$( basename "${0}" )' as" \
			"'root'?"
	else
		echo >&2 "FATAL: Unable to successfully execute" \
			"'${_command}' - do you need to re-run" \
			"'$( basename "${0}" )' as 'root'?"
	fi
	exit 1
elif [[ "$( uname -s )" != 'Darwin' ]] &&
		(( EUID )) &&
		grep -Fq -- 'rootless: false' <<<"${_output}"
then
	echo >&2 "FATAL: Please re-run '$( basename "${0}")' as user 'root'"
	exit 1
fi
unset _output

declare -i FORCE_KEYWORDS=0
declare -i PODMAN_MEMORY_RESERVATION=0
declare -i PODMAN_MEMORY_LIMIT=0
declare -i PODMAN_SWAP_LIMIT=0
declare DOCKER_ENTRYPOINT=''
declare DOCKER_CMD=''
declare rebuild=''

declare args='' arg=''

# Extract 'entrypoint' argument - all others can be handled by the entrypoint
# script within the container itself...
for arg in "${@:-}"; do
	# pop 'arg', but then process it (and potentially re-add it) below...
	if [[ -n "${2:-}" ]]; then
		shift
	else
		set --
	fi

	case "${arg:-}" in
		-k|--force-keywords)
			FORCE_KEYWORDS=1
			export FORCE_KEYWORDS
			continue
			;;
		--entrypoint=*)
			DOCKER_ENTRYPOINT="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			export DOCKER_ENTRYPOINT
			continue
			;;
		--cmd=*)
			DOCKER_CMD="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			export DOCKER_CMD
			continue
			;;
		--rebuild=*)
			rebuild="${rebuild:+"${rebuild} "}$( # <- Syntax
					xargs -r <<<"${arg#"--rebuild="}"
				)"
			set -- "${@}" "$( xargs -r <<<"${arg}" )"
			;;
		--rebuild)
			if [[ -n "${1:-}" ]]; then
				rebuild="${rebuild:+"${rebuild} "}$( # <- Syntax
						xargs -r <<<"${1}"
					)"
				set -- "${@}" "${arg}=$( xargs -r <<<"${1}" )"
				shift
			fi
			;;
		--memory=*)
			# shellcheck disable=SC2034
			PODMAN_MEMORY_RESERVATION="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			#if (( PODMAN_MEMORY_LIMIT < PODMAN_MEMORY_RESERVATION )); then
			#	(( PODMAN_MEMORY_LIMIT = PODMAN_MEMORY_RESERVATION ))
			#fi
			;;
		--memory-limit=*)
			PODMAN_MEMORY_LIMIT="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			# shellcheck disable=SC2034
			PODMAN_SWAP_LIMIT="${PODMAN_MEMORY_LIMIT}"
			#if (( PODMAN_MEMORY_RESERVATION < PODMAN_MEMORY_LIMIT )); then
			#	(( PODMAN_MEMORY_RESERVATION = PODMAN_MEMORY_LIMIT ))
			#fi
			;;
		*)
			args="${args:+"${args} "}${arg}"
			set -- "${@}" "${arg}"
			;;
	esac
done

if [[ -z "${args:-}" && -n "${rebuild:-}" ]]; then
	# We only need to specify one package, as the rebuild logic will pull-in
	# each original package prior to recompiling it...
	set -- "${rebuild%%" "*}" "${@}"
	print "First element of \$rebuild re-added as first argument to give$( #
			for arg in "${@:-}"; do
				printf " '%s'" "${arg:-}"
			done
		)"
fi

unset arg args rebuild

# FIXME: shellcheck wants:
#
#          docker_extra_mounts+=( $( add_mount ... ) )
#
#        ... to be expressed in the form of:
#
#          readarray -O "${#docker_extra_mounts[@]}" -t docker_extra_mounts < <(
#            add_mount ...
#          )
#
# shellcheck disable=SC2207
{
declare -a docker_extra_mounts=()
docker_extra_mounts+=(
	$( add_mount --print '/etc/locale.gen' )
	$( add_mount --dir --print '/etc/portage/package.accept_keywords' )
	$( add_mount --print '/etc/portage/package.license' )
	$( add_mount --print '/etc/portage/profile/use.mask' )
	$( add_mount --print '/etc/portage/profile/package.use.force' )
	$( add_mount --print '/etc/portage/profile/package.use.mask' )
) || :
if [[ -d '/var/lib/portage/eclass/linux-info' ]]; then
	docker_extra_mounts+=(
		$( add_mount --dir --no-ro --print '/var/lib/portage/eclass/linux-info' \
				'/srv/host/...'
			)
	) || :
fi

# Use host package.mask (if present), overriding the container build-time
# default...
if ! [[ -d /etc/portage/package.mask ]]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask' \
			'../host.mask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask/package.mask' \
			'/etc/portage/package.mask/host.mask'
		) ) || :

	declare extra_mask='' file=''
	while read -r extra_mask; do
		file="$( basename "${extra_mask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.mask/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.mask/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-not -name 'package.mask' \
				-print0 |
			grep -vz -- '^repo-.*-mask' |
			xargs -0rn 1
	)
	unset file extra_mask
fi #Â [[ -d /etc/portage/package.mask ]]

# Use host package.unmask (if present), overriding the container build-time
# default...
if ! [[ -d /etc/portage/package.unmask ]]; then
	#docker_extra_mounts+=( $( add_mount --print \
	#		'/etc/portage/package.unmask'
	#	) ) || :
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask' \
			'.../host.unmask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask/package.unmask' \
			'/etc/portage/package.unmask/host.unmask'
		) ) || :

	declare extra_unmask='' file=''
	while read -r extra_unmask; do
		file="$( basename "${extra_unmask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.unmask/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.unmask/ \
			-mindepth 1 \
			-maxdepth 1 \
			-type f \
			-not -name 'package.unmask' \
			-print
	)
	unset file extra_unmask
fi # [[ -d /etc/portage/package.unmask ]]

if ! [[ -d /etc/portage/package.use ]]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.use' \
			'.../package.use'
		) ) || :
else
	docker_extra_mounts+=( # <- Syntax
		$( add_mount --print '/etc/portage/package.use/00_package.use' )
		$( add_mount --print '/etc/portage/package.use/01_package.use.local' )
		$( add_mount --print '/etc/portage/package.use/05_host.use' )
	) || :

	declare targets='' file=''
	while read -r targets; do
		file="$( basename "${targets}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.use/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.use/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-name '*_targets'
		find /etc/portage/package.use/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-print0 |
			xargs -0rn 1 basename |
			grep -Fv -e '.use' -e '_targets'
	)
	unset file targets
fi # [[ -d /etc/portage/package.use ]]

# Even with all of the below made available, linux-info.eclass still causes
# builds to fail due to not being able to find a valid kernel configuration?!
#
#docker_extra_mounts+=( $( add_mount --print \
#		'/usr/src/linux/.config'
#	) ) || :
#KBUILD_OUTPUT='/usr/src/linux'
#export KBUILD_OUTPUT

export DOCKER_EXTRA_MOUNTS="${docker_extra_mounts[*]:-}"
unset docker_extra_mounts
}  # end shellcheck disable SC2207

declare prepkg=''
declare preuse="${PREUSE:-}"
declare use="${USE:-}"
declare postuse="${POSTUSE:-}"

preuse="$( replace_flags '-lib-only' -- "${preuse:-}" )"
use="$( replace_flags '-lib-only' -- "${use:-}" )"
postuse="$( replace_flags 'lib-only' -- "${postuse:-}" )"
if [ -n "${prepkg:-}" ]; then
	note >&2 "Adding pre-build package(s) '$( xargs -r <<<"${prepkg}" )'" \
		"to resolve depenency loops ..."
	set -- "${@}" --pre-pkgs="${prepkg}"
fi
if [ -n "${preuse:-}" ]; then
	note >&2 "Adding pre-build USE flag(s) '$( xargs -r <<<"${preuse}" )'" \
		"to resolve depenency loops ..."
	set -- "${@}" --pre-use="${preuse}"
fi
if [ -n "${use:-}" ]; then
	note >&2 "Adding build-time USE flag(s) '$( xargs -r <<<"${use}" )' ..."
	set -- "${@}" --with-use="${use}"
fi
if [ -n "${postuse:-}" ]; then
	note >&2 "Adding post-build USE flag(s) '$( xargs -r <<<"${postuse}" )'" \
		"to minimise host requirements ..."
	set -- "${@}" --post-use="${postuse}"
fi

# Add '--cap-add' entries sync'd with 'fcaps' calls in ebuilds...
#
# shellcheck disable=SC2034
DOCKER_CAPS="
	DAC_OVERRIDE DAC_READ_SEARCH
	NET_ADMIN NET_BIND_SERVICE NET_RAW
	SETGID SETUID
	SYS_ADMIN SYS_RESOURCE SYS_TTY_CONFIG
"

# Provide a '--name' to prevent the container being removed on exit
#
_docker_build --intent=discard ${@+"${@}"} \

# vi: set colorcolumn=80 syntax=sh:
