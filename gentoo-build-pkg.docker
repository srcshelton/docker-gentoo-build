#! /usr/bin/env bash

set -eu

trace=${TRACE:-}

[ -n "${trace:-}" ] && set -o xtrace

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

build_name=''
docker_readonly=''

# shellcheck disable=SC1091
[ ! -s common/vars.sh ] || . common/vars.sh

IMAGE="${build_name}:latest"
export IMAGE

# shellcheck disable=SC1091
[ -s common/run.sh ] && . common/run.sh

if [ -z "${*:-}" ] || echo " ${*:-} " | grep -Eq -- ' -(h|-help) '; then
	output >&2 "Usage: $( basename "${0}" ) <category/package_name [portage_atom...]> [--rebuild='<portage_atom...>'] [--force-keywords] [--cmd=<cmd>] [--entrypoint=<path>] [--memory=2g] [--memory-limit=8g]"
	exit 0
fi

# Support 'core' user for podman+machine Fedora default user...
if [[ "$( uname -s )" == 'Darwin' ]]; then
	if (( EUID )) && [[ "$( id -nu )" == 'core' ]]; then
		die "Please re-run '$( basename "${0}" )' as user 'root'"
	fi
fi

# Extract 'entrypoint' argument - all others can be handled by the entrypoint
# script within the container itself...
args=''
rebuild=''
for arg in "${@}"; do
	# pop 'arg', but then process it (and potentially re-add it) below...
	shift

	case "${arg}" in
		-k|--force-keywords)
			FORCE_KEYWORDS=1
			export FORCE_KEYWORDS
			continue
			;;
		--entrypoint=*)
			DOCKER_ENTRYPOINT="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			export DOCKER_ENTRYPOINT
			continue
			;;
		--cmd=*)
			DOCKER_CMD="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			export DOCKER_CMD
			continue
			;;
		--rebuild=*)
			rebuild="${rebuild:+${rebuild} }${arg#--rebuild=}"
			set -- "${@}" "${arg}"
			;;
		--rebuild)
			if [[ -n "${1:-}" ]]; then
				rebuild="${rebuild:+${rebuild} }${1}"
				set -- "${@}" "${arg}=${1}"
				shift
			fi
			;;
		--memory=*)
			PODMAN_MEMORY_RESERVATION="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			#if (( PODMAN_MEMORY_LIMIT < PODMAN_MEMORY_RESERVATION )); then
			#	(( PODMAN_MEMORY_LIMIT = PODMAN_MEMORY_RESERVATION ))
			#fi
			;;
		--memory-limit=*)
			PODMAN_MEMORY_LIMIT="$( printf '%s' "${arg}" | cut -d'=' -f 2- )"
			PODMAN_SWAP_LIMIT="${PODMAN_MEMORY_LIMIT}"
			#if (( PODMAN_MEMORY_RESERVATION < PODMAN_MEMORY_LIMIT )); then
			#	(( PODMAN_MEMORY_RESERVATION = PODMAN_MEMORY_LIMIT ))
			#fi
			;;
		*)
			args="${args:+${args} }${arg}"
			set -- "${@}" "${arg}"
			;;
	esac
done

if [ -z "${args:-}" ] && [ -n "${rebuild:-}" ]; then
	# We only need to specify one package, as the rebuild logic will
	# pull-in each original package prior to recompiling it...
	set -- "${rebuild%% *}" "${@}"
fi

declare -a docker_extra_mounts=()
docker_extra_mounts+=(
	$( add_mount --dir --print \
			'/etc/portage/package.accept_keywords'
		)
	$( add_mount --print \
			'/etc/portage/package.license'
		)
	$( add_mount --print \
			'/etc/portage/profile/use.mask'
		)
) || :

# Use host package.mask (if present), overriding the container build-time
# default...
if ! [ -d /etc/portage/package.mask ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask' \
			'../host.mask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.mask/package.mask' \
			'/etc/portage/package.mask/host.mask'
		) ) || :
	declare extra_mask='' file=''
	while read -r extra_mask; do
		file="$( basename "${extra_mask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.mask/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.mask/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-not -name 'package.mask' \
				-print0 |
			grep -vz -- '^repo-.*-mask'
	)
	unset file extra_mask
fi

# Use host package.unmask (if present), overriding the container build-time
# default...
if ! [ -d /etc/portage/package.unmask ]; then
	#docker_extra_mounts+=( $( add_mount --print \
	#		'/etc/portage/package.unmask'
	#	) ) || :
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask' \
			'.../host.unmask'
		) ) || :
else
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.unmask/package.unmask' \
			'/etc/portage/package.unmask/host.unmask'
		) ) || :
	declare extra_unmask='' file=''
	while read -r extra_unmask; do
		file="$( basename "${extra_unmask}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.unmask/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.unmask/ \
			-mindepth 1 \
			-maxdepth 1 \
			-type f \
			-not -name 'package.unmask' \
			-print
	)
	unset file extra_unmask
fi

if ! [ -d /etc/portage/package.use ]; then
	docker_extra_mounts+=( $( add_mount --print \
			'/etc/portage/package.use' \
			'.../package.use'
		) ) || :
else
	# Add a prefix so that host.use can override package.use...
	docker_extra_mounts+=( # <- Syntax
		$( add_mount --print \
				'/etc/portage/package.use/package.use' \
				'/etc/portage/package.use/aa-package.use'
			)
		$( add_mount --print \
				'/etc/portage/package.use/package.use.local' \
				'/etc/portage/package.use/ab-package.use.local'
			)
		$( add_mount --print \
				'/etc/portage/package.use/host.use' \
				'/etc/portage/package.use/zz-host.use'
			)
	) || :
	declare targets='' file=''
	while read -r targets; do
		file="$( basename "${targets}" )"
		docker_extra_mounts+=( $( add_mount --print \
				"/etc/portage/package.use/${file}"
			) ) || :
	done < <( # <- Syntax
		find /etc/portage/package.use/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-name '*_targets'
		find /etc/portage/package.use/ \
				-mindepth 1 \
				-maxdepth 1 \
				-type f \
				-print0 |
			xargs -0rn 1 basename |
				grep -FvZ -e '.use' -e '_targets'
	)
	unset file targets
fi

docker_extra_mounts+=( $( add_mount --print \
		'/etc/portage/profile/package.use.mask'
	) ) || :

# Even with all of the below made available, linux-info.eclass still causes
# builds to fail due to not being able to find a valid kernel configuration?!
#
#docker_extra_mounts+=( $( add_mount --print \
#		'/usr/src/linux/.config'
#	) ) || :
#KBUILD_OUTPUT="/usr/src/linux"
#export KBUILD_OUTPUT

export DOCKER_EXTRA_MOUNTS="${docker_extra_mounts[*]:-}"
unset docker_extra_mounts

if [ -n "${USE:-}" ]; then
	# Without passing USE flags in this way, they appear to be getting lost (when /etc/portage/package.use exists?)
	set -- "${@}" --with-use="${USE}"
fi

#note >&2 "Adding circular-dependency fixes ..."
#if echo "${*}" | grep -q -- 'app-arch/libarchive'; then
#	pkg="${pkg:+${pkg} }$( echo " ${*} " | sed -r 's|^.*\s([^[:space:]]*app-arch/libarchive[^[:space:]]*)\s.*$|\1|' )"
#else
#	pkg="${pkg:+${pkg} }app-arch/libarchive"
#fi
##if echo "${*}" | grep -q -- 'dev-util/pkgconfig'; then
##	pkg="${pkg:+${pkg} }$( echo " ${*} " | sed -r 's|^.*\s([^[:space:]]*dev-util/pkgconfig[^[:space:]]*)\s.*$|\1|' )"
##else
##	pkg="${pkg:+${pkg} }dev-util/pkgconfig"
##fi
#set -- "${@}" --pre-pkgs="${pkg}" --pre-use='-lz4 internal-glib'
#unset pkg
#set -- "${@}" --pre-use='-lz4 internal-glib'

prepkg=''
preuse="${PREUSE:-}"
use="${USE:-}"
postuse="${POSTUSE:-}"
for arg in "${@:-}"; do
	case "$( echo "${arg}" | sed -r 's/^[<>]?=?//' )" in
		media-libs/freetype|freetype|media-libs/freetype-*|freetype-*)
			prepkg="${prepkg:+${prepkg} }${arg} media-libs/harfbuzz"
			preuse="$( replace_flags '-harfbuzz' '-truetype' -- "${preuse}" )"
			;;
		media-libs/harfbuzz|harfbuzz|media-libs/harfbuzz-*|harfbuzz-*)
			prepkg="${prepkg:+${prepkg} }${arg} media-libs/freetype"
			preuse="$( replace_flags '-harfbuzz' '-truetype' -- "${preuse}" )"
			;;
		#sys-libs/glibc|glibc|sys-libs/glibc-*|glibc-*)
		#	prepkg="${prepkg:+${prepkg} }${arg}"
		#	;;
	esac
done
preuse="$( replace_flags '-lib-only' -- "${preuse:-}" )"
use="$( replace_flags '-lib-only' -- "${use:-}" )"
postuse="$( replace_flags 'lib-only' -- "${postuse:-}" )"
if [ -n "${prepkg:-}" ]; then
	note >&2 "Adding pre-build package(s) '$( xargs -r <<<"${prepkg}" )' to resolve depenency loops ..."
	set -- "${@}" --pre-pkgs="${prepkg}"
fi
if [ -n "${preuse:-}" ]; then
	note >&2 "Adding pre-build USE flag(s) '$( xargs -r <<<"${preuse}" )' to resolve depenency loops ..."
	set -- "${@}" --pre-use="${preuse}"
fi
if [ -n "${use:-}" ]; then
	note >&2 "Adding build-time USE flag(s) '$( xargs -r <<<"${use}" )' ..."
	set -- "${@}" --with-use="${use}"
fi
if [ -n "${postuse:-}" ]; then
	note >&2 "Adding post-build USE flag(s) '$( xargs -r <<<"${postuse}" )' to minimise host requirements ..."
	set -- "${@}" --post-use="${postuse}"
fi

# Provide a '--name' to prevent the container being removed on exit.
# Invoke with '--usepkg=n' to rebuild existing packages...

_docker_build ${@+"${@}"}

# vi: set colorcolumn=80 syntax=sh:
